[
  {
    "original_code": "function remainder(x, y) {\n  \n}",
    "new_code": "function remainder(x, y) {\n  // Your code here.\n}\n\nmodule.exports = remainder;\n",
    "original_tests": "Test.assertEquals(remainder(7,2), 1);\nTest.assertEquals(remainder(3, 4), 3);\nTest.assertEquals(remainder(-9, 45), -9);\nTest.assertEquals(remainder(5, 5), 0);",
    "new_tests": "const remainder = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(remainder(7, 2)).toEqual(1);\n        expect(remainder(3, 4)).toEqual(3);\n        expect(remainder(-9, 45)).toEqual(-9);\n        expect(remainder(5, 5)).toEqual(0);\n    });\n});\n"
  },
  {
    "original_code": "function addition(a, b) {\n  \n}",
    "new_code": "function addition(a, b) {\n  // Your code here.\n}\n\nmodule.exports = addition;\n",
    "original_tests": "Test.assertEquals( addition(2,3), 5);\nTest.assertEquals( addition(-3,-6), -9);\nTest.assertEquals( addition(7,3), 10);",
    "new_tests": "const addition = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(addition(2, 3)).toEqual(5);\n        expect(addition(-3, -6)).toEqual(-9);\n        expect(addition(7, 3)).toEqual(10);\n    });\n});\n"
  },
  {
    "original_code": "function hello() {\n  \n}",
    "new_code": "function hello() {\n  // Your code here.\n}\n\nmodule.exports = hello;\n",
    "original_tests": "Test.assertEquals(hello(), \"hello edabit.com\", \"Did you *return* the result?\");",
    "new_tests": "const hello = require('./code');\n\ndescribe('Tests', () => {\n    test('Did you *return* the result?', () => {\n        expect(hello()).toEqual('hello edabit.com');\n    });\n    \n    test('the tests', () => {\n        \n    });\n});\n"
  },
  {
    "original_code": "function addition(num) {\n  \n}",
    "new_code": "function addition(num) {\n  // Your code here.\n}\n\nmodule.exports = addition;\n",
    "original_tests": "Test.assertEquals(addition(2), 3);\nTest.assertEquals(addition(-9), -8);\nTest.assertEquals(addition(0), 1);",
    "new_tests": "const addition = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(addition(2)).toEqual(3);\n        expect(addition(-9)).toEqual(-8);\n        expect(addition(0)).toEqual(1);\n    });\n});\n"
  },
  {
    "original_code": "function lessThanOrEqualToZero(num) {\n  \n}",
    "new_code": "function lessThanOrEqualToZero(num) {\n  // Your code here.\n}\n\nmodule.exports = lessThanOrEqualToZero;\n",
    "original_tests": "Test.assertEquals(lessThanOrEqualToZero(5), false);\nTest.assertEquals(lessThanOrEqualToZero(0), true);\nTest.assertEquals(lessThanOrEqualToZero(-5), true);\nTest.assertEquals(lessThanOrEqualToZero(1), false);\nTest.assertEquals(lessThanOrEqualToZero(2), false);\nTest.assertEquals(lessThanOrEqualToZero(10000), false);\nTest.assertEquals(lessThanOrEqualToZero(0.5), false);",
    "new_tests": "const lessThanOrEqualToZero = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(lessThanOrEqualToZero(5)).toEqual(false);\n        expect(lessThanOrEqualToZero(0)).toEqual(true);\n        expect(lessThanOrEqualToZero(-5)).toEqual(true);\n        expect(lessThanOrEqualToZero(1)).toEqual(false);\n        expect(lessThanOrEqualToZero(2)).toEqual(false);\n        expect(lessThanOrEqualToZero(10000)).toEqual(false);\n        expect(lessThanOrEqualToZero(0.5)).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function comp(str1, str2) {\n  \n}",
    "new_code": "function comp(str1, str2) {\n  // Your code here.\n}\n\nmodule.exports = comp;\n",
    "original_tests": "Test.assertEquals(comp(\"AB\", \"CD\"), true);\nTest.assertEquals(comp(\"ABC\", \"DE\"), false);\nTest.assertEquals(comp(\"hello\", \"edabit\"), false);\nTest.assertEquals(comp(\"meow\", \"woof\"), true);\nTest.assertEquals(comp(\"jrnvjrnnt\", \"cvjknfjvmfvnfjn\"), false);\nTest.assertEquals(comp(\"jkvnjrt\", \"krnf\"), false);\nTest.assertEquals(comp(\"Facebook\", \"Snapchat\"), true);",
    "new_tests": "const comp = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(comp('AB', 'CD')).toEqual(true);\n        expect(comp('ABC', 'DE')).toEqual(false);\n        expect(comp('hello', 'edabit')).toEqual(false);\n        expect(comp('meow', 'woof')).toEqual(true);\n        expect(comp('jrnvjrnnt', 'cvjknfjvmfvnfjn')).toEqual(false);\n        expect(comp('jkvnjrt', 'krnf')).toEqual(false);\n        expect(comp('Facebook', 'Snapchat')).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function getLastItem(arr) {\n  \n}",
    "new_code": "function getLastItem(arr) {\n  // Your code here.\n}\n\nmodule.exports = getLastItem;\n",
    "original_tests": "Test.assertEquals(getLastItem(['Cat', 'Dog', 'Duck']), 'Duck');\nTest.assertEquals(getLastItem([1, 2, 3]), 3);\nTest.assertEquals(getLastItem([undefined]));\nTest.assertEquals(getLastItem([true, false, false, true]), true);\nTest.assertEquals(getLastItem([7, 'String', false, undefined, null]), null);\nTest.assertEquals(getLastItem([false]), false);\nTest.assertEquals(getLastItem([undefined, undefined, undefined]), undefined);\nTest.assertEquals(getLastItem([1, 2, 3, 56, 87, 23, 65, 45]), 45);\nTest.assertEquals(getLastItem(['Apple', 'Orange', undefined]), undefined);\nTest.assertEquals(getLastItem([true, false, 'Apple']), 'Apple');\nTest.assertEquals(getLastItem([null, null, null]), null);\nTest.assertEquals(getLastItem([1]), 1);",
    "new_tests": "const getLastItem = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(getLastItem(['Cat', 'Dog', 'Duck'])).toEqual('Duck');\n        expect(getLastItem([1, 2, 3])).toEqual(3);\n        expect(getLastItem([undefined])).toEqual(undefined);\n        expect(getLastItem([true, false, false, true])).toEqual(true);\n        expect(getLastItem([7, 'String', false, undefined, undefined])).toEqual(undefined);\n        expect(getLastItem([false])).toEqual(false);\n        expect(getLastItem([undefined, undefined, undefined])).toEqual(undefined);\n        expect(getLastItem([1, 2, 3, 56, 87, 23, 65, 45])).toEqual(45);\n        expect(getLastItem(['Apple', 'Orange', undefined])).toEqual(undefined);\n        expect(getLastItem([true, false, 'Apple'])).toEqual('Apple');\n        expect(getLastItem([undefined, undefined, undefined])).toEqual(undefined);\n        expect(getLastItem([1])).toEqual(1);\n    });\n});\n"
  },
  {
    "original_code": "function isEvenOrOdd(num) {\n  \n}",
    "new_code": "function isEvenOrOdd(num) {\n  // Your code here.\n}\n\nmodule.exports = isEvenOrOdd;\n",
    "original_tests": "Test.assertEquals(isEvenOrOdd(3), \"odd\");\nTest.assertEquals(isEvenOrOdd(0), \"even\");\nTest.assertEquals(isEvenOrOdd(7), \"odd\");\nTest.assertEquals(isEvenOrOdd(12), \"even\");\nTest.assertEquals(isEvenOrOdd(6474), \"even\");\nTest.assertEquals(isEvenOrOdd(0563), \"odd\");\nTest.assertEquals(isEvenOrOdd(3), \"odd\");\nTest.assertEquals(isEvenOrOdd(0000001111100000), \"even\");\nTest.assertEquals(isEvenOrOdd(301), \"odd\");\nTest.assertEquals(isEvenOrOdd(-3), \"odd\");\nTest.assertEquals(isEvenOrOdd(-0), \"even\");\nTest.assertEquals(isEvenOrOdd(-7), \"odd\");\nTest.assertEquals(isEvenOrOdd(-12), \"even\");\nTest.assertEquals(isEvenOrOdd(-6474), \"even\");\nTest.assertEquals(isEvenOrOdd(-0563), \"odd\");\nTest.assertEquals(isEvenOrOdd(-3), \"odd\");\nTest.assertEquals(isEvenOrOdd(-0000001111100000), \"even\");\nTest.assertEquals(isEvenOrOdd(-301), \"odd\");",
    "new_tests": "const isEvenOrOdd = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isEvenOrOdd(3)).toEqual('odd');\n        expect(isEvenOrOdd(0)).toEqual('even');\n        expect(isEvenOrOdd(7)).toEqual('odd');\n        expect(isEvenOrOdd(12)).toEqual('even');\n        expect(isEvenOrOdd(6474)).toEqual('even');\n        expect(isEvenOrOdd(371)).toEqual('odd');\n        expect(isEvenOrOdd(3)).toEqual('odd');\n        expect(isEvenOrOdd(153387008)).toEqual('even');\n        expect(isEvenOrOdd(301)).toEqual('odd');\n        expect(isEvenOrOdd(-3)).toEqual('odd');\n        expect(isEvenOrOdd(-0)).toEqual('even');\n        expect(isEvenOrOdd(-7)).toEqual('odd');\n        expect(isEvenOrOdd(-12)).toEqual('even');\n        expect(isEvenOrOdd(-6474)).toEqual('even');\n        expect(isEvenOrOdd(-371)).toEqual('odd');\n        expect(isEvenOrOdd(-3)).toEqual('odd');\n        expect(isEvenOrOdd(-153387008)).toEqual('even');\n        expect(isEvenOrOdd(-301)).toEqual('odd');\n    });\n});\n"
  },
  {
    "original_code": "function firstLast(arr) {\n  \n}",
    "new_code": "function firstLast(arr) {\n  // Your code here.\n}\n\nmodule.exports = firstLast;\n",
    "original_tests": "Test.assertSimilar(firstLast([5, 10, 15, 20, 25]), [5, 25]);\nTest.assertSimilar(firstLast([\"edabit\", 13, null, false, true]), [\"edabit\", true]);\nTest.assertSimilar(firstLast([undefined, 4, \"6\", \"hello\", null]), [undefined, null]);\nTest.assertSimilar(firstLast([\"hello\", \"edabit\", \"dot\", \"com\"]), [\"hello\", \"com\"]);\nTest.assertSimilar(firstLast([3, 2, 1]), [3, 1]);\nTest.assertSimilar(firstLast([\"one\", \"two\"]), [\"one\", \"two\"]);\nTest.assertSimilar(firstLast([false, false, true, false, false, true, false]), [false, false]);",
    "new_tests": "const firstLast = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(firstLast([5, 10, 15, 20, 25])).toEqual([5, 25]);\n        expect(firstLast(['edabit', 13, undefined, false, true])).toEqual(['edabit', true]);\n        expect(firstLast([undefined, 4, '6', 'hello', undefined])).toEqual([undefined, undefined]);\n        expect(firstLast(['hello', 'edabit', 'dot', 'com'])).toEqual(['hello', 'com']);\n        expect(firstLast([3, 2, 1])).toEqual([3, 1]);\n        expect(firstLast(['one', 'two'])).toEqual(['one', 'two']);\n        expect(firstLast([false, false, true, false, false, true, false])).toEqual([false, false]);\n    });\n});\n"
  },
  {
    "original_code": "function find_index(arr, str) {\n  \n}",
    "new_code": "function find_index(arr, str) {\n  // Your code here.\n}\n\nmodule.exports = find_index;\n",
    "original_tests": "Test.assertEquals(find_index(['abc', 'ghj', 'banana', 'grape'], 'grape'), 3);\nTest.assertEquals(find_index(['a', 'b', 'c', 'd', 'e', 'f'], 'f'), 5);\nTest.assertEquals(find_index(['hi', 'edabit.com', 'testcase', 'validstring'], 'edabit.com'), 1);",
    "new_tests": "const find_index = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(find_index(['abc', 'ghj', 'banana', 'grape'], 'grape')).toEqual(3);\n        expect(find_index(['a', 'b', 'c', 'd', 'e', 'f'], 'f')).toEqual(5);\n        expect(find_index(['hi', 'edabit.com', 'testcase', 'validstring'], 'edabit.com')).toEqual(1);\n    });\n});\n"
  },
  {
    "original_code": "function calculateExponent(num, exp) {\n  \n}",
    "new_code": "function calculateExponent(num, exp) {\n  // Your code here.\n}\n\nmodule.exports = calculateExponent;\n",
    "original_tests": "Test.assertEquals(calculateExponent(5,5), 3125);\nTest.assertEquals(calculateExponent(3,3), 27);\nTest.assertEquals(calculateExponent(10,10), 10000000000);",
    "new_tests": "const calculateExponent = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(calculateExponent(5, 5)).toEqual(3125);\n        expect(calculateExponent(3, 3)).toEqual(27);\n        expect(calculateExponent(10, 10)).toEqual(10000000000);\n    });\n});\n"
  },
  {
    "original_code": "function numArgs() {\n  \n}",
    "new_code": "function numArgs() {\n  // Your code here.\n}\n\nmodule.exports = numArgs;\n",
    "original_tests": "Test.assertEquals(numArgs(), 0);\nTest.assertEquals(numArgs('foo'), 1);\nTest.assertEquals(numArgs('foo', 'bar'), 2);\nTest.assertEquals(numArgs(null, null), 2);\nTest.assertEquals(numArgs('foo', 'bar', 5, null), 4);\nTest.assertEquals(numArgs(false), 1);\nTest.assertEquals(numArgs('foo', {}), 2);\nTest.assertEquals(numArgs('foo', 'bar', {}), 3);\nTest.assertEquals(numArgs([], [], {}), 3);\nTest.assertEquals(numArgs('foo', 'bar', true, null, 0), 5);",
    "new_tests": "const numArgs = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(numArgs()).toEqual(0);\n        expect(numArgs('foo')).toEqual(1);\n        expect(numArgs('foo', 'bar')).toEqual(2);\n        expect(numArgs(undefined, undefined)).toEqual(2);\n        expect(numArgs('foo', 'bar', 5, undefined)).toEqual(4);\n        expect(numArgs(false)).toEqual(1);\n        expect(numArgs('foo', {})).toEqual(2);\n        expect(numArgs('foo', 'bar', {})).toEqual(3);\n        expect(numArgs([], [], {})).toEqual(3);\n        expect(numArgs('foo', 'bar', true, undefined, 0)).toEqual(5);\n    });\n});\n"
  },
  {
    "original_code": "function findDigitAmount(num) {\n  \n}",
    "new_code": "function findDigitAmount(num) {\n  // Your code here.\n}\n\nmodule.exports = findDigitAmount;\n",
    "original_tests": "Test.assertEquals(findDigitAmount(1), 1, 'Should work with one digit');\nTest.assertEquals(findDigitAmount(67), 2, 'Should work with a two-digit number');\nTest.assertEquals(findDigitAmount(123), 3, 'Should work with a three-digit number');\nTest.assertEquals(findDigitAmount(55551), 5, 'Should work with a bit bigger number');\nTest.assertEquals(findDigitAmount(96456431), 8, 'Should work with bigger numbers');\nTest.assertEquals(findDigitAmount(0), 1, '0 should return 1, as it is a digit');",
    "new_tests": "const findDigitAmount = require('./code');\n\ndescribe('Tests', () => {\n    test('Should work with one digit', () => {\n        expect(findDigitAmount(1)).toEqual(1);\n    });\n\ntest('Should work with a two-digit number', () => {\n        expect(findDigitAmount(67)).toEqual(2);\n    });\n\ntest('Should work with a three-digit number', () => {\n        expect(findDigitAmount(123)).toEqual(3);\n    });\n\ntest('Should work with a bit bigger number', () => {\n        expect(findDigitAmount(55551)).toEqual(5);\n    });\n\ntest('Should work with bigger numbers', () => {\n        expect(findDigitAmount(96456431)).toEqual(8);\n    });\n\ntest('0 should return 1, as it is a digit', () => {\n        expect(findDigitAmount(0)).toEqual(1);\n    });\n    \n    test('the tests', () => {\n        \n    });\n});\n"
  },
  {
    "original_code": "function month_name(num) {\n  \n}",
    "new_code": "function month_name(num) {\n  // Your code here.\n}\n\nmodule.exports = month_name;\n",
    "original_tests": "Test.assertEquals(month_name(1),\t'January');\nTest.assertEquals(month_name(2)\t, 'February');\nTest.assertEquals(month_name(3), 'March');\nTest.assertEquals(month_name(4), 'April');\nTest.assertEquals(month_name(5)\t, 'May');\nTest.assertEquals(month_name(6)\t, 'June');\nTest.assertEquals(month_name(7)\t, 'July');\nTest.assertEquals(month_name(8)\t, 'August');\nTest.assertEquals(month_name(9)\t, 'September');\nTest.assertEquals(month_name(10), 'October');\nTest.assertEquals(month_name(11), 'November');\nTest.assertEquals(month_name(12), 'December');",
    "new_tests": "const month_name = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(month_name(1)).toEqual('January');\n        expect(month_name(2)).toEqual('February');\n        expect(month_name(3)).toEqual('March');\n        expect(month_name(4)).toEqual('April');\n        expect(month_name(5)).toEqual('May');\n        expect(month_name(6)).toEqual('June');\n        expect(month_name(7)).toEqual('July');\n        expect(month_name(8)).toEqual('August');\n        expect(month_name(9)).toEqual('September');\n        expect(month_name(10)).toEqual('October');\n        expect(month_name(11)).toEqual('November');\n        expect(month_name(12)).toEqual('December');\n    });\n});\n"
  },
  {
    "original_code": "function countWords(str) {\n  \n}",
    "new_code": "function countWords(str) {\n  // Your code here.\n}\n\nmodule.exports = countWords;\n",
    "original_tests": "Test.assertEquals(countWords(\"It's high noon\"), 3);\nTest.assertEquals(countWords(\"Is this easy mode\"), 4);\nTest.assertEquals(countWords(\"Is this easy mode\"), 4);",
    "new_tests": "const countWords = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(countWords('It\\'s high noon')).toEqual(3);\n        expect(countWords('Is this easy mode')).toEqual(4);\n        expect(countWords('Is this easy mode')).toEqual(4);\n    });\n});\n"
  },
  {
    "original_code": "function reverse(bool) {\n  \n}",
    "new_code": "function reverse(bool) {\n  // Your code here.\n}\n\nmodule.exports = reverse;\n",
    "original_tests": "Test.assertEquals(reverse(false), true);\nTest.assertEquals(reverse(true), false);\nTest.assertEquals(reverse(0), \"boolean expected\");\nTest.assertEquals(reverse(null), \"boolean expected\");\nTest.assertEquals(reverse(undefined), \"boolean expected\");\nTest.assertEquals(reverse({}), \"boolean expected\");",
    "new_tests": "const reverse = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(reverse(false)).toEqual(true);\n        expect(reverse(true)).toEqual(false);\n        expect(reverse(0)).toEqual('boolean expected');\n        expect(reverse(undefined)).toEqual('boolean expected');\n        expect(reverse(undefined)).toEqual('boolean expected');\n        expect(reverse({})).toEqual('boolean expected');\n    });\n});\n"
  },
  {
    "original_code": "function findSmallestNum(arr) {\n  \n}",
    "new_code": "function findSmallestNum(arr) {\n  // Your code here.\n}\n\nmodule.exports = findSmallestNum;\n",
    "original_tests": "Test.assertEquals(findSmallestNum([34, 15, 88, 2]), 2)\nTest.assertEquals(findSmallestNum([34, -345, -1, 100]), -345)\nTest.assertEquals(findSmallestNum([-76, 1.345, 1, 0]), -76)\nTest.assertEquals(findSmallestNum([0.4356, 0.8795, 0.5435, -0.9999]), -0.9999)\nTest.assertEquals(findSmallestNum([7, 7, 7]), 7)\nTest.assertEquals(findSmallestNum([4, 6, 1, 3, 4, 5, 5, 1]), 1)\nTest.assertEquals(findSmallestNum([-4, -6, -8, -1]), -8)\nTest.assertEquals(findSmallestNum([54, 76, 23, 54]), 23)\nTest.assertEquals(findSmallestNum([100]), 100)\nTest.assertEquals(findSmallestNum([0, 1, 2, 3, 4, 5]), 0)",
    "new_tests": "const findSmallestNum = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(findSmallestNum([34, 15, 88, 2])).toEqual(2);\n        expect(findSmallestNum([34, -345, -1, 100])).toEqual(-345);\n        expect(findSmallestNum([-76, 1.345, 1, 0])).toEqual(-76);\n        expect(findSmallestNum([0.4356, 0.8795, 0.5435, -0.9999])).toEqual(-0.9999);\n        expect(findSmallestNum([7, 7, 7])).toEqual(7);\n        expect(findSmallestNum([4, 6, 1, 3, 4, 5, 5, 1])).toEqual(1);\n        expect(findSmallestNum([-4, -6, -8, -1])).toEqual(-8);\n        expect(findSmallestNum([54, 76, 23, 54])).toEqual(23);\n        expect(findSmallestNum([100])).toEqual(100);\n        expect(findSmallestNum([0, 1, 2, 3, 4, 5])).toEqual(0);\n    });\n});\n"
  },
  {
    "original_code": "function findLargestNum(arr) {\n  \n}",
    "new_code": "function findLargestNum(arr) {\n  // Your code here.\n}\n\nmodule.exports = findLargestNum;\n",
    "original_tests": "Test.assertEquals(findLargestNum([4, 5, 1, 3]), 5)\nTest.assertEquals(findLargestNum([13, 27, 18, 26]), 27)\nTest.assertEquals(findLargestNum([32, 35, 37, 39]), 39)\nTest.assertEquals(findLargestNum([1000, 1001, 857, 1]), 1001)\nTest.assertEquals(findLargestNum([27364, 837363, 736736, 73635]), 837363)\nTest.assertEquals(findLargestNum([30, 2, 40, 3]), 40)\nTest.assertEquals(findLargestNum([0, 1, 0, 0, 1]), 1)",
    "new_tests": "const findLargestNum = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(findLargestNum([4, 5, 1, 3])).toEqual(5);\n        expect(findLargestNum([13, 27, 18, 26])).toEqual(27);\n        expect(findLargestNum([32, 35, 37, 39])).toEqual(39);\n        expect(findLargestNum([1000, 1001, 857, 1])).toEqual(1001);\n        expect(findLargestNum([27364, 837363, 736736, 73635])).toEqual(837363);\n        expect(findLargestNum([30, 2, 40, 3])).toEqual(40);\n        expect(findLargestNum([0, 1, 0, 0, 1])).toEqual(1);\n    });\n});\n"
  },
  {
    "original_code": "function Go(num) {\n  \n}",
    "new_code": "function Go(num) {\n  // Your code here.\n}\n\nmodule.exports = Go;\n",
    "original_tests": "Test.assertEquals(Go(1),\"-\");\nTest.assertEquals(Go(2),\"--\");\nTest.assertEquals(Go(3),\"---\");\nTest.assertEquals(Go(4),\"----\");\nTest.assertEquals(Go(5),\"-----\");\nTest.assertEquals(Go(6),\"------\");\nTest.assertEquals(Go(7),\"-------\");\nTest.assertEquals(Go(8),\"--------\");\nTest.assertEquals(Go(9),\"---------\");\nTest.assertEquals(Go(10),\"----------\");\nTest.assertEquals(Go(11),\"-----------\");\nTest.assertEquals(Go(12),\"------------\");\nTest.assertEquals(Go(13),\"-------------\");\nTest.assertEquals(Go(14),\"--------------\");\nTest.assertEquals(Go(15),\"---------------\");\nTest.assertEquals(Go(16),\"----------------\");\nTest.assertEquals(Go(17),\"-----------------\");\nTest.assertEquals(Go(18),\"------------------\");\nTest.assertEquals(Go(19),\"-------------------\");\nTest.assertEquals(Go(20),\"--------------------\");\nTest.assertEquals(Go(21),\"---------------------\");\nTest.assertEquals(Go(22),\"----------------------\");\nTest.assertEquals(Go(23),\"-----------------------\");\nTest.assertEquals(Go(24),\"------------------------\");\nTest.assertEquals(Go(25),\"-------------------------\");\nTest.assertEquals(Go(26),\"--------------------------\");\nTest.assertEquals(Go(27),\"---------------------------\");\nTest.assertEquals(Go(28),\"----------------------------\");\nTest.assertEquals(Go(29),\"-----------------------------\");\nTest.assertEquals(Go(30),\"------------------------------\");\nTest.assertEquals(Go(31),\"-------------------------------\");\nTest.assertEquals(Go(32),\"--------------------------------\");\nTest.assertEquals(Go(33),\"---------------------------------\");\nTest.assertEquals(Go(34),\"----------------------------------\");\nTest.assertEquals(Go(35),\"-----------------------------------\");\nTest.assertEquals(Go(36),\"------------------------------------\");\nTest.assertEquals(Go(37),\"-------------------------------------\");\nTest.assertEquals(Go(38),\"--------------------------------------\");\nTest.assertEquals(Go(39),\"---------------------------------------\");\nTest.assertEquals(Go(40),\"----------------------------------------\");\nTest.assertEquals(Go(41),\"-----------------------------------------\");\nTest.assertEquals(Go(42),\"------------------------------------------\");\nTest.assertEquals(Go(43),\"-------------------------------------------\");\nTest.assertEquals(Go(44),\"--------------------------------------------\");\nTest.assertEquals(Go(45),\"---------------------------------------------\");\nTest.assertEquals(Go(46),\"----------------------------------------------\");\nTest.assertEquals(Go(47),\"-----------------------------------------------\");\nTest.assertEquals(Go(48),\"------------------------------------------------\");\nTest.assertEquals(Go(49),\"-------------------------------------------------\");\nTest.assertEquals(Go(50),\"--------------------------------------------------\");\nTest.assertEquals(Go(51),\"---------------------------------------------------\");\nTest.assertEquals(Go(52),\"----------------------------------------------------\");\nTest.assertEquals(Go(53),\"-----------------------------------------------------\");\nTest.assertEquals(Go(54),\"------------------------------------------------------\");\nTest.assertEquals(Go(55),\"-------------------------------------------------------\");\nTest.assertEquals(Go(56),\"--------------------------------------------------------\");\nTest.assertEquals(Go(57),\"---------------------------------------------------------\");\nTest.assertEquals(Go(58),\"----------------------------------------------------------\");\nTest.assertEquals(Go(59),\"-----------------------------------------------------------\");\nTest.assertEquals(Go(60),\"------------------------------------------------------------\");",
    "new_tests": "const Go = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(Go(1)).toEqual('-');\n        expect(Go(2)).toEqual('--');\n        expect(Go(3)).toEqual('---');\n        expect(Go(4)).toEqual('----');\n        expect(Go(5)).toEqual('-----');\n        expect(Go(6)).toEqual('------');\n        expect(Go(7)).toEqual('-------');\n        expect(Go(8)).toEqual('--------');\n        expect(Go(9)).toEqual('---------');\n        expect(Go(10)).toEqual('----------');\n        expect(Go(11)).toEqual('-----------');\n        expect(Go(12)).toEqual('------------');\n        expect(Go(13)).toEqual('-------------');\n        expect(Go(14)).toEqual('--------------');\n        expect(Go(15)).toEqual('---------------');\n        expect(Go(16)).toEqual('----------------');\n        expect(Go(17)).toEqual('-----------------');\n        expect(Go(18)).toEqual('------------------');\n        expect(Go(19)).toEqual('-------------------');\n        expect(Go(20)).toEqual('--------------------');\n        expect(Go(21)).toEqual('---------------------');\n        expect(Go(22)).toEqual('----------------------');\n        expect(Go(23)).toEqual('-----------------------');\n        expect(Go(24)).toEqual('------------------------');\n        expect(Go(25)).toEqual('-------------------------');\n        expect(Go(26)).toEqual('--------------------------');\n        expect(Go(27)).toEqual('---------------------------');\n        expect(Go(28)).toEqual('----------------------------');\n        expect(Go(29)).toEqual('-----------------------------');\n        expect(Go(30)).toEqual('------------------------------');\n        expect(Go(31)).toEqual('-------------------------------');\n        expect(Go(32)).toEqual('--------------------------------');\n        expect(Go(33)).toEqual('---------------------------------');\n        expect(Go(34)).toEqual('----------------------------------');\n        expect(Go(35)).toEqual('-----------------------------------');\n        expect(Go(36)).toEqual('------------------------------------');\n        expect(Go(37)).toEqual('-------------------------------------');\n        expect(Go(38)).toEqual('--------------------------------------');\n        expect(Go(39)).toEqual('---------------------------------------');\n        expect(Go(40)).toEqual('----------------------------------------');\n        expect(Go(41)).toEqual('-----------------------------------------');\n        expect(Go(42)).toEqual('------------------------------------------');\n        expect(Go(43)).toEqual('-------------------------------------------');\n        expect(Go(44)).toEqual('--------------------------------------------');\n        expect(Go(45)).toEqual('---------------------------------------------');\n        expect(Go(46)).toEqual('----------------------------------------------');\n        expect(Go(47)).toEqual('-----------------------------------------------');\n        expect(Go(48)).toEqual('------------------------------------------------');\n        expect(Go(49)).toEqual('-------------------------------------------------');\n        expect(Go(50)).toEqual('--------------------------------------------------');\n        expect(Go(51)).toEqual('---------------------------------------------------');\n        expect(Go(52)).toEqual('----------------------------------------------------');\n        expect(Go(53)).toEqual('-----------------------------------------------------');\n        expect(Go(54)).toEqual('------------------------------------------------------');\n        expect(Go(55)).toEqual('-------------------------------------------------------');\n        expect(Go(56)).toEqual('--------------------------------------------------------');\n        expect(Go(57)).toEqual('---------------------------------------------------------');\n        expect(Go(58)).toEqual('----------------------------------------------------------');\n        expect(Go(59)).toEqual('-----------------------------------------------------------');\n        expect(Go(60)).toEqual('------------------------------------------------------------');\n    });\n});\n"
  },
  {
    "original_code": "function nameShuffle(str) {\n  \n}",
    "new_code": "function nameShuffle(str) {\n  // Your code here.\n}\n\nmodule.exports = nameShuffle;\n",
    "original_tests": "Test.assertEquals(nameShuffle(\"Donald Trump\"),\"Trump Donald\");\nTest.assertEquals(nameShuffle(\"Rosie O'Donnel\"),\"O'Donnel Rosie\");\nTest.assertEquals(nameShuffle(\"Seymour Butts\"),\"Butts Seymour\");\nTest.assertEquals(nameShuffle(\"Ebony Greene\"),\"Greene Ebony\");\nTest.assertEquals(nameShuffle(\"Ken Kennedy\"),\"Kennedy Ken\");\nTest.assertEquals(nameShuffle(\"Allison Gonzalez\"),\"Gonzalez Allison\");\nTest.assertEquals(nameShuffle(\"Albert Frazier\"),\"Frazier Albert\");\nTest.assertEquals(nameShuffle(\"Eloise Hopkins\"),\"Hopkins Eloise\");\nTest.assertEquals(nameShuffle(\"Donnie Welch\"),\"Welch Donnie\");\nTest.assertEquals(nameShuffle(\"Vernon Thomas\"),\"Thomas Vernon\");",
    "new_tests": "const nameShuffle = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(nameShuffle('Donald Trump')).toEqual('Trump Donald');\n        expect(nameShuffle('Rosie O\\'Donnel')).toEqual('O\\'Donnel Rosie');\n        expect(nameShuffle('Seymour Butts')).toEqual('Butts Seymour');\n        expect(nameShuffle('Ebony Greene')).toEqual('Greene Ebony');\n        expect(nameShuffle('Ken Kennedy')).toEqual('Kennedy Ken');\n        expect(nameShuffle('Allison Gonzalez')).toEqual('Gonzalez Allison');\n        expect(nameShuffle('Albert Frazier')).toEqual('Frazier Albert');\n        expect(nameShuffle('Eloise Hopkins')).toEqual('Hopkins Eloise');\n        expect(nameShuffle('Donnie Welch')).toEqual('Welch Donnie');\n        expect(nameShuffle('Vernon Thomas')).toEqual('Thomas Vernon');\n    });\n});\n"
  },
  {
    "original_code": "function MultiplyByLength(arr) {\n  \n}",
    "new_code": "function MultiplyByLength(arr) {\n  // Your code here.\n}\n\nmodule.exports = MultiplyByLength;\n",
    "original_tests": "Test.assertSimilar(MultiplyByLength([2,6,4,9]), [8,24,16,36]);\nTest.assertSimilar(MultiplyByLength([4,1,1]), [12,3,3]);\nTest.assertSimilar(MultiplyByLength([1,0,3,3,7,2,1]), [7,0,21,21,49,14,7]);\nTest.assertSimilar(MultiplyByLength([0]), [0]);",
    "new_tests": "const MultiplyByLength = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(MultiplyByLength([2, 6, 4, 9])).toEqual([8, 24, 16, 36]);\n        expect(MultiplyByLength([4, 1, 1])).toEqual([12, 3, 3]);\n        expect(MultiplyByLength([1, 0, 3, 3, 7, 2, 1])).toEqual([7, 0, 21, 21, 49, 14, 7]);\n        expect(MultiplyByLength([0])).toEqual([0]);\n    });\n});\n"
  },
  {
    "original_code": "function reverse(str) {\n  \n}",
    "new_code": "function reverse(str) {\n  // Your code here.\n}\n\nmodule.exports = reverse;\n",
    "original_tests": "Test.assertEquals(reverse(\"Think different.\"), \".tnereffid knihT\");\nTest.assertEquals(reverse(\"It doesn\u2019t make sense to hire smart people and tell them what to do; we hire smart people so they can tell us what to do.\"), \".od ot tahw su llet nac yeht os elpoep trams erih ew ;od ot tahw meht llet dna elpoep trams erih ot esnes ekam t\u2019nseod tI\");\nTest.assertEquals(reverse(\"Innovation is the ability to see change as an opportunity - not a threat\"), \"taerht a ton - ytinutroppo na sa egnahc ees ot ytiliba eht si noitavonnI\");\nTest.assertEquals(reverse(\"Everything is based on a simple rule: Quality is the best business plan.\"), \".nalp ssenisub tseb eht si ytilauQ :elur elpmis a no desab si gnihtyrevE\");\nTest.assertEquals(reverse(\"The people who are crazy enough to think they can change the world are the ones who do.\"), \".od ohw seno eht era dlrow eht egnahc nac yeht kniht ot hguone yzarc era ohw elpoep ehT\");\nTest.assertEquals(reverse(\"Don\u2019t let the noise of others\u2019 opinions drown out your own inner voice.\"), \".eciov renni nwo ruoy tuo nword snoinipo \u2019srehto fo esion eht tel t\u2019noD\");\nTest.assertEquals(reverse(\"Learn continually; There's always one more thing to learn.\"), \".nrael ot gniht erom eno syawla s'erehT ;yllaunitnoc nraeL\");\nTest.assertEquals(reverse(\"Quality is more important than quantity. One home run is much better than two doubles.\"), \".selbuod owt naht retteb hcum si nur emoh enO .ytitnauq naht tnatropmi erom si ytilauQ\");\nTest.assertEquals(reverse(\"Your time is limited so don't waste it living someone else's life.\"), \".efil s'esle enoemos gnivil ti etsaw t'nod os detimil si emit ruoY\");\nTest.assertEquals(reverse(\"The only way to be truly satisfied is to do what you believe is great work.\"), \".krow taerg si eveileb uoy tahw od ot si deifsitas ylurt eb ot yaw ylno ehT\");",
    "new_tests": "const reverse = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(reverse('Think different.')).toEqual('.tnereffid knihT');\n        expect(reverse('It doesn\u2019t make sense to hire smart people and tell them what to do; we hire smart people so they can tell us what to do.')).toEqual('.od ot tahw su llet nac yeht os elpoep trams erih ew ;od ot tahw meht llet dna elpoep trams erih ot esnes ekam t\u2019nseod tI');\n        expect(reverse('Innovation is the ability to see change as an opportunity - not a threat')).toEqual('taerht a ton - ytinutroppo na sa egnahc ees ot ytiliba eht si noitavonnI');\n        expect(reverse('Everything is based on a simple rule: Quality is the best business plan.')).toEqual('.nalp ssenisub tseb eht si ytilauQ :elur elpmis a no desab si gnihtyrevE');\n        expect(reverse('The people who are crazy enough to think they can change the world are the ones who do.')).toEqual('.od ohw seno eht era dlrow eht egnahc nac yeht kniht ot hguone yzarc era ohw elpoep ehT');\n        expect(reverse('Don\u2019t let the noise of others\u2019 opinions drown out your own inner voice.')).toEqual('.eciov renni nwo ruoy tuo nword snoinipo \u2019srehto fo esion eht tel t\u2019noD');\n        expect(reverse('Learn continually; There\\'s always one more thing to learn.')).toEqual('.nrael ot gniht erom eno syawla s\\'erehT ;yllaunitnoc nraeL');\n        expect(reverse('Quality is more important than quantity. One home run is much better than two doubles.')).toEqual('.selbuod owt naht retteb hcum si nur emoh enO .ytitnauq naht tnatropmi erom si ytilauQ');\n        expect(reverse('Your time is limited so don\\'t waste it living someone else\\'s life.')).toEqual('.efil s\\'esle enoemos gnivil ti etsaw t\\'nod os detimil si emit ruoY');\n        expect(reverse('The only way to be truly satisfied is to do what you believe is great work.')).toEqual('.krow taerg si eveileb uoy tahw od ot si deifsitas ylurt eb ot yaw ylno ehT');\n    });\n});\n"
  },
  {
    "original_code": "function repeat(item, times) {\n  \n}",
    "new_code": "function repeat(item, times) {\n  // Your code here.\n}\n\nmodule.exports = repeat;\n",
    "original_tests": "Test.assertSimilar(repeat(\"edabit\", 3), [\"edabit\", \"edabit\", \"edabit\"]);\nTest.assertSimilar(repeat(13, 5), [13, 13, 13, 13, 13]);\nTest.assertSimilar(repeat(\"7\", 2),  [\"7\", \"7\"]);\nTest.assertSimilar(repeat(\"2 0 1 8\", 1), [\"2 0 1 8\"]);\nTest.assertSimilar(repeat(\"tom dick and harry\", 6), [\"tom dick and harry\", \"tom dick and harry\", \"tom dick and harry\", \"tom dick and harry\", \"tom dick and harry\", \"tom dick and harry\"]);\nTest.assertSimilar(repeat(0, 1), [0]);\nTest.assertSimilar(repeat(0, 0), []);\nTest.assertSimilar(repeat(\"z\", 0), []);",
    "new_tests": "const repeat = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(repeat('edabit', 3)).toEqual(['edabit', 'edabit', 'edabit']);\n        expect(repeat(13, 5)).toEqual([13, 13, 13, 13, 13]);\n        expect(repeat('7', 2)).toEqual(['7', '7']);\n        expect(repeat('2 0 1 8', 1)).toEqual(['2 0 1 8']);\n        expect(repeat('tom dick and harry', 6)).toEqual(['tom dick and harry', 'tom dick and harry', 'tom dick and harry', 'tom dick and harry', 'tom dick and harry', 'tom dick and harry']);\n        expect(repeat(0, 1)).toEqual([0]);\n        expect(repeat(0, 0)).toEqual([]);\n        expect(repeat('z', 0)).toEqual([]);\n    });\n});\n"
  },
  {
    "original_code": "function isFourLetters(arr) {\n  \n}",
    "new_code": "function isFourLetters(arr) {\n  // Your code here.\n}\n\nmodule.exports = isFourLetters;\n",
    "original_tests": "Test.assertSimilar(isFourLetters([\"Ryan\", \"Kieran\", \"Jason\", \"Matt\"]), [\"Ryan\", \"Matt\"])\nTest.assertSimilar(isFourLetters([\"Tomato\", \"Potato\", \"Pair\"]), [\"Pair\"])\nTest.assertSimilar(isFourLetters([\"Kangaroo\", \"Bear\", \"Fox\"]), [\"Bear\"])\nTest.assertSimilar(isFourLetters([\"Red\", \"Blue\", \"Green\", \"Pink\"]), [\"Blue\", \"Pink\"])\nTest.assertSimilar(isFourLetters([\"is\", \"up\", \"two\", \"elephant\"]), [])\nTest.assertSimilar(isFourLetters([]), [])\nTest.assertSimilar(isFourLetters([\"jazz\", \"quiz\", \"jump\"]), [\"jazz\", \"quiz\", \"jump\"])\nTest.assertSimilar(isFourLetters([\"\"]), [])\nTest.assertSimilar(isFourLetters([\"Broccoli\", \"Carrot\", \"Spinach\"]), [])",
    "new_tests": "const isFourLetters = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isFourLetters(['Ryan', 'Kieran', 'Jason', 'Matt'])).toEqual(['Ryan', 'Matt']);\n        expect(isFourLetters(['Tomato', 'Potato', 'Pair'])).toEqual(['Pair']);\n        expect(isFourLetters(['Kangaroo', 'Bear', 'Fox'])).toEqual(['Bear']);\n        expect(isFourLetters(['Red', 'Blue', 'Green', 'Pink'])).toEqual(['Blue', 'Pink']);\n        expect(isFourLetters(['is', 'up', 'two', 'elephant'])).toEqual([]);\n        expect(isFourLetters([])).toEqual([]);\n        expect(isFourLetters(['jazz', 'quiz', 'jump'])).toEqual(['jazz', 'quiz', 'jump']);\n        expect(isFourLetters([''])).toEqual([]);\n        expect(isFourLetters(['Broccoli', 'Carrot', 'Spinach'])).toEqual([]);\n    });\n});\n"
  },
  {
    "original_code": "function AlphabetSoup(str) {\n  \n}",
    "new_code": "function AlphabetSoup(str) {\n  // Your code here.\n}\n\nmodule.exports = AlphabetSoup;\n",
    "original_tests": "Test.assertEquals(AlphabetSoup(\"hello\"), \"ehllo\");\nTest.assertEquals(AlphabetSoup(\"edabit\"), \"abdeit\");\nTest.assertEquals(AlphabetSoup(\"hacker\"), \"acehkr\");\nTest.assertEquals(AlphabetSoup(\"geek\"), \"eegk\");\nTest.assertEquals(AlphabetSoup(\"javascript\"), \"aacijprstv\");\nTest.assertEquals(AlphabetSoup(\"credibility\"), \"bcdeiiilrty\");\nTest.assertEquals(AlphabetSoup(\"apostrophe\"), \"aehoopprst\");\nTest.assertEquals(AlphabetSoup(\"determination\"), \"adeeiimnnortt\");\nTest.assertEquals(AlphabetSoup(\"win\"), \"inw\");\nTest.assertEquals(AlphabetSoup(\"synthesis\"), \"ehinsssty\");",
    "new_tests": "const AlphabetSoup = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(AlphabetSoup('hello')).toEqual('ehllo');\n        expect(AlphabetSoup('edabit')).toEqual('abdeit');\n        expect(AlphabetSoup('hacker')).toEqual('acehkr');\n        expect(AlphabetSoup('geek')).toEqual('eegk');\n        expect(AlphabetSoup('javascript')).toEqual('aacijprstv');\n        expect(AlphabetSoup('credibility')).toEqual('bcdeiiilrty');\n        expect(AlphabetSoup('apostrophe')).toEqual('aehoopprst');\n        expect(AlphabetSoup('determination')).toEqual('adeeiimnnortt');\n        expect(AlphabetSoup('win')).toEqual('inw');\n        expect(AlphabetSoup('synthesis')).toEqual('ehinsssty');\n    });\n});\n"
  },
  {
    "original_code": "function checkEnding(str1, str2) {\n  \n}",
    "new_code": "function checkEnding(str1, str2) {\n  // Your code here.\n}\n\nmodule.exports = checkEnding;\n",
    "original_tests": "Test.assertEquals(checkEnding(\"abc\", \"bc\"), true);\nTest.assertEquals(checkEnding(\"abc\", \"d\"), false);\nTest.assertEquals(checkEnding(\"samurai\", \"zi\"), false);\nTest.assertEquals(checkEnding(\"feminine\", \"nine\"), true);\nTest.assertEquals(checkEnding(\"convention\", \"tio\"), false);\nTest.assertEquals(checkEnding(\"cooperative\", \"ooper\"), false);\nTest.assertEquals(checkEnding(\"extraterrestrial\", \"xtraterrestrial\"), true);\nTest.assertEquals(checkEnding(\"access\", \"ss\"), true);\nTest.assertEquals(checkEnding(\"motorist\", \"is\"), false);\nTest.assertEquals(checkEnding(\"landowner\", \"landowner\"), true);",
    "new_tests": "const checkEnding = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(checkEnding('abc', 'bc')).toEqual(true);\n        expect(checkEnding('abc', 'd')).toEqual(false);\n        expect(checkEnding('samurai', 'zi')).toEqual(false);\n        expect(checkEnding('feminine', 'nine')).toEqual(true);\n        expect(checkEnding('convention', 'tio')).toEqual(false);\n        expect(checkEnding('cooperative', 'ooper')).toEqual(false);\n        expect(checkEnding('extraterrestrial', 'xtraterrestrial')).toEqual(true);\n        expect(checkEnding('access', 'ss')).toEqual(true);\n        expect(checkEnding('motorist', 'is')).toEqual(false);\n        expect(checkEnding('landowner', 'landowner')).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function noOdds(arr) {\n  \n}",
    "new_code": "function noOdds(arr) {\n  // Your code here.\n}\n\nmodule.exports = noOdds;\n",
    "original_tests": "Test.assertSimilar(noOdds([1, 2, 3, 4, 5, 6, 7, 8]), [2, 4, 6, 8]);\nTest.assertSimilar(noOdds([43, 65, 23, 89, 53, 9, 6]), [6]);\nTest.assertSimilar(noOdds([718, 991, 449, 644, 380, 440]), [718, 644, 380, 440]);\nTest.assertSimilar(noOdds([148, 6, 16, 85]), [148, 6, 16]);\nTest.assertSimilar(noOdds([9, 49, 23]), []);\nTest.assertSimilar(noOdds([34, 43, 32, 49, 40]), [34, 32, 40]);\nTest.assertSimilar(noOdds([1232, 1990, 1284, 1391, 1958]), [1232, 1990, 1284, 1958]);\nTest.assertSimilar(noOdds([2766, 2651, 2373, 2916, 2397, 2539]), [2766, 2916]);\nTest.assertSimilar(noOdds([53, 65, 52, 62, 59]), [52, 62]);\nTest.assertSimilar(noOdds([393, 156, 14, 166, 129, 246]), [156, 14, 166, 246]);",
    "new_tests": "const noOdds = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(noOdds([1, 2, 3, 4, 5, 6, 7, 8])).toEqual([2, 4, 6, 8]);\n        expect(noOdds([43, 65, 23, 89, 53, 9, 6])).toEqual([6]);\n        expect(noOdds([718, 991, 449, 644, 380, 440])).toEqual([718, 644, 380, 440]);\n        expect(noOdds([148, 6, 16, 85])).toEqual([148, 6, 16]);\n        expect(noOdds([9, 49, 23])).toEqual([]);\n        expect(noOdds([34, 43, 32, 49, 40])).toEqual([34, 32, 40]);\n        expect(noOdds([1232, 1990, 1284, 1391, 1958])).toEqual([1232, 1990, 1284, 1958]);\n        expect(noOdds([2766, 2651, 2373, 2916, 2397, 2539])).toEqual([2766, 2916]);\n        expect(noOdds([53, 65, 52, 62, 59])).toEqual([52, 62]);\n        expect(noOdds([393, 156, 14, 166, 129, 246])).toEqual([156, 14, 166, 246]);\n    });\n});\n"
  },
  {
    "original_code": "function addUp(num) {\n  \n}",
    "new_code": "function addUp(num) {\n  // Your code here.\n}\n\nmodule.exports = addUp;\n",
    "original_tests": "Test.assertEquals(addUp(4), 10)\nTest.assertEquals(addUp(13), 91)\nTest.assertEquals(addUp(600), 180300)\nTest.assertEquals(addUp(392), 77028)\nTest.assertEquals(addUp(53), 1431)\nTest.assertEquals(addUp(897), 402753)\nTest.assertEquals(addUp(23), 276)\nTest.assertEquals(addUp(1000), 500500)\nTest.assertEquals(addUp(738), 272691)\nTest.assertEquals(addUp(100), 5050)\nTest.assertEquals(addUp(925), 428275)\nTest.assertEquals(addUp(1), 1)\nTest.assertEquals(addUp(999), 499500)\nTest.assertEquals(addUp(175), 15400)\nTest.assertEquals(addUp(111), 6216)",
    "new_tests": "const addUp = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(addUp(4)).toEqual(10);\n        expect(addUp(13)).toEqual(91);\n        expect(addUp(600)).toEqual(180300);\n        expect(addUp(392)).toEqual(77028);\n        expect(addUp(53)).toEqual(1431);\n        expect(addUp(897)).toEqual(402753);\n        expect(addUp(23)).toEqual(276);\n        expect(addUp(1000)).toEqual(500500);\n        expect(addUp(738)).toEqual(272691);\n        expect(addUp(100)).toEqual(5050);\n        expect(addUp(925)).toEqual(428275);\n        expect(addUp(1)).toEqual(1);\n        expect(addUp(999)).toEqual(499500);\n        expect(addUp(175)).toEqual(15400);\n        expect(addUp(111)).toEqual(6216);\n    });\n});\n"
  },
  {
    "original_code": "function minMax(arr) {\n  \n}",
    "new_code": "function minMax(arr) {\n  // Your code here.\n}\n\nmodule.exports = minMax;\n",
    "original_tests": "Test.assertSimilar(minMax([14, 35, 6, 1, 34, 54]), [1, 54])\nTest.assertSimilar(minMax([1.346, 1.6532, 1.8734, 1.8723]), [1.346, 1.8734])\nTest.assertSimilar(minMax([0.432, 0.874, 0.523, 0.984, 0.327, 0.2345]), [0.2345, 0.984])\nTest.assertSimilar(minMax([13, 72, 98, 43, 24, 65, 31]), [13, 98])\nTest.assertSimilar(minMax([-54, -23, -54, -21]), [-54, -21])\nTest.assertSimilar(minMax([-0.473, -0.6834, -0.1287, 0.5632]), [-0.6834, 0.5632])\nTest.assertSimilar(minMax([0, 0, 0, 0]), [0, 0])",
    "new_tests": "const minMax = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(minMax([14, 35, 6, 1, 34, 54])).toEqual([1, 54]);\n        expect(minMax([1.346, 1.6532, 1.8734, 1.8723])).toEqual([1.346, 1.8734]);\n        expect(minMax([0.432, 0.874, 0.523, 0.984, 0.327, 0.2345])).toEqual([0.2345, 0.984]);\n        expect(minMax([13, 72, 98, 43, 24, 65, 31])).toEqual([13, 98]);\n        expect(minMax([-54, -23, -54, -21])).toEqual([-54, -21]);\n        expect(minMax([-0.473, -0.6834, -0.1287, 0.5632])).toEqual([-0.6834, 0.5632]);\n        expect(minMax([0, 0, 0, 0])).toEqual([0, 0]);\n    });\n});\n"
  },
  {
    "original_code": "function timeForMilkAndCookies(date) {\n  \n}",
    "new_code": "function timeForMilkAndCookies(date) {\n  // Your code here.\n}\n\nmodule.exports = timeForMilkAndCookies;\n",
    "original_tests": "Test.assertEquals(timeForMilkAndCookies(new Date(2013, 11, 24)), true)\nTest.assertEquals(timeForMilkAndCookies(new Date(3000, 11, 24)), true)\nTest.assertEquals(timeForMilkAndCookies(new Date(2154, 11, 11)), false)\nTest.assertEquals(timeForMilkAndCookies(new Date(2010, 11, 2)), false)\nTest.assertEquals(timeForMilkAndCookies(new Date(1980, 9, 24)), false)",
    "new_tests": "const timeForMilkAndCookies = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(timeForMilkAndCookies(new Date(2013, 11, 24))).toEqual(true);\n        expect(timeForMilkAndCookies(new Date(3000, 11, 24))).toEqual(true);\n        expect(timeForMilkAndCookies(new Date(2154, 11, 11))).toEqual(false);\n        expect(timeForMilkAndCookies(new Date(2010, 11, 2))).toEqual(false);\n        expect(timeForMilkAndCookies(new Date(1980, 9, 24))).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function filterArray(arr) {\n  \n}",
    "new_code": "function filterArray(arr) {\n  // Your code here.\n}\n\nmodule.exports = filterArray;\n",
    "original_tests": "Test.assertSimilar(filterArray([1, 2, \"a\", \"b\"]), [1, 2]);\nTest.assertSimilar(filterArray([1, \"a\", \"b\", 0, 15]), [1, 0, 15]);\nTest.assertSimilar(filterArray([1, 2, \"aasf\", \"1\", \"123\", 123]), [1, 2, 123]);\nTest.assertSimilar(filterArray([\"jsyt\", 4, \"yt\", 6]), [4,6]);\nTest.assertSimilar(filterArray([\"r\", 5, \"y\", \"e\", 8, 9]), [5, 8, 9]);\nTest.assertSimilar(filterArray([\"a\", \"e\", \"i\", \"o\", \"u\"]), []);\nTest.assertSimilar(filterArray([4, \"z\", \"f\", 5]), [4, 5]);\nTest.assertSimilar(filterArray([\"abc\", 123]), [123]);\nTest.assertSimilar(filterArray([\"$%^\", 567, \"&&&\"]), [567]);\nTest.assertSimilar(filterArray([\"w\", \"r\", \"u\", 43, \"s\", \"a\", 76, \"d\", 88]), [43, 76, 88]);",
    "new_tests": "const filterArray = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(filterArray([1, 2, 'a', 'b'])).toEqual([1, 2]);\n        expect(filterArray([1, 'a', 'b', 0, 15])).toEqual([1, 0, 15]);\n        expect(filterArray([1, 2, 'aasf', '1', '123', 123])).toEqual([1, 2, 123]);\n        expect(filterArray(['jsyt', 4, 'yt', 6])).toEqual([4, 6]);\n        expect(filterArray(['r', 5, 'y', 'e', 8, 9])).toEqual([5, 8, 9]);\n        expect(filterArray(['a', 'e', 'i', 'o', 'u'])).toEqual([]);\n        expect(filterArray([4, 'z', 'f', 5])).toEqual([4, 5]);\n        expect(filterArray(['abc', 123])).toEqual([123]);\n        expect(filterArray(['$%^', 567, '&&&'])).toEqual([567]);\n        expect(filterArray(['w', 'r', 'u', 43, 's', 'a', 76, 'd', 88])).toEqual([43, 76, 88]);\n    });\n});\n"
  },
  {
    "original_code": "function charCount(myChar, str) {\n  \n}",
    "new_code": "function charCount(myChar, str) {\n  // Your code here.\n}\n\nmodule.exports = charCount;\n",
    "original_tests": "Test.assertEquals(charCount('a', 'edabit'), 1);\nTest.assertEquals(charCount('b', 'big fat bubble'), 4);\nTest.assertEquals(charCount('c', 'Chamber of secrets'), 1);\nTest.assertEquals(charCount('f', 'frank and his friends have offered five foxes for sale'), 7);\nTest.assertEquals(charCount('x', 'edabit'), 0);\nTest.assertEquals(charCount('a', 'Adam and Eve bit the apple and found a snake'), 6);\nTest.assertEquals(charCount('s', 'sssssssssssssssssssssssss'), 25);\nTest.assertEquals(charCount('7', '10795426697'), 2);",
    "new_tests": "const charCount = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(charCount('a', 'edabit')).toEqual(1);\n        expect(charCount('b', 'big fat bubble')).toEqual(4);\n        expect(charCount('c', 'Chamber of secrets')).toEqual(1);\n        expect(charCount('f', 'frank and his friends have offered five foxes for sale')).toEqual(7);\n        expect(charCount('x', 'edabit')).toEqual(0);\n        expect(charCount('a', 'Adam and Eve bit the apple and found a snake')).toEqual(6);\n        expect(charCount('s', 'sssssssssssssssssssssssss')).toEqual(25);\n        expect(charCount('7', '10795426697')).toEqual(2);\n    });\n});\n"
  },
  {
    "original_code": "function doubleChar(str) {\n  \n}",
    "new_code": "function doubleChar(str) {\n  // Your code here.\n}\n\nmodule.exports = doubleChar;\n",
    "original_tests": "Test.assertEquals(doubleChar(\"String\"), \"SSttrriinngg\")\nTest.assertEquals(doubleChar(\"Hello World!\"), \"HHeelllloo  WWoorrlldd!!\")\nTest.assertEquals(doubleChar(\"1234!_ \"), \"11223344!!__  \")\nTest.assertEquals(doubleChar(\"##^&%%*&%%$#@@!\"), \"####^^&&%%%%**&&%%%%$$##@@@@!!\")\nTest.assertEquals(doubleChar(\"scandal\"), \"ssccaannddaall\")\nTest.assertEquals(doubleChar(\"economics\"), \"eeccoonnoommiiccss\")\nTest.assertEquals(doubleChar(\" \"), \"  \")\nTest.assertEquals(doubleChar(\"_______\"), \"______________\")\nTest.assertEquals(doubleChar(\"equip gallon read\"), \"eeqquuiipp  ggaalllloonn  rreeaadd\")\nTest.assertEquals(doubleChar(\"baby increase\"), \"bbaabbyy  iinnccrreeaassee\")",
    "new_tests": "const doubleChar = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(doubleChar('String')).toEqual('SSttrriinngg');\n        expect(doubleChar('Hello World!')).toEqual('HHeelllloo  WWoorrlldd!!');\n        expect(doubleChar('1234!_ ')).toEqual('11223344!!__  ');\n        expect(doubleChar('##^&%%*&%%$#@@!')).toEqual('####^^&&%%%%**&&%%%%$$##@@@@!!');\n        expect(doubleChar('scandal')).toEqual('ssccaannddaall');\n        expect(doubleChar('economics')).toEqual('eeccoonnoommiiccss');\n        expect(doubleChar(' ')).toEqual('  ');\n        expect(doubleChar('_______')).toEqual('______________');\n        expect(doubleChar('equip gallon read')).toEqual('eeqquuiipp  ggaalllloonn  rreeaadd');\n        expect(doubleChar('baby increase')).toEqual('bbaabbyy  iinnccrreeaassee');\n    });\n});\n"
  },
  {
    "original_code": "function getAbsSum(arr) {\n  \n}",
    "new_code": "function getAbsSum(arr) {\n  // Your code here.\n}\n\nmodule.exports = getAbsSum;\n",
    "original_tests": "Test.assertEquals(getAbsSum([2, -1, -3, 4, 8]), 18);\nTest.assertEquals(getAbsSum([-1]), 1);\nTest.assertEquals(getAbsSum([-1, -3, -5, -4, -10, 0]), 23);\nTest.assertEquals(getAbsSum([8, 9, 10, 32, 101, -10]), 170);\nTest.assertEquals(getAbsSum([500]), 500);",
    "new_tests": "const getAbsSum = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(getAbsSum([2, -1, -3, 4, 8])).toEqual(18);\n        expect(getAbsSum([-1])).toEqual(1);\n        expect(getAbsSum([-1, -3, -5, -4, -10, 0])).toEqual(23);\n        expect(getAbsSum([8, 9, 10, 32, 101, -10])).toEqual(170);\n        expect(getAbsSum([500])).toEqual(500);\n    });\n});\n"
  },
  {
    "original_code": "function countVowels(str) {\n  \n}",
    "new_code": "function countVowels(str) {\n  // Your code here.\n}\n\nmodule.exports = countVowels;\n",
    "original_tests": "Test.assertEquals(countVowels(\"Celebration\"), 5)\nTest.assertEquals(countVowels(\"Palm\"), 1)\nTest.assertEquals(countVowels(\"Prediction\"), 4)\nTest.assertEquals(countVowels(\"Suite\"), 3)\nTest.assertEquals(countVowels(\"Quote\"), 3)\nTest.assertEquals(countVowels(\"Portrait\"), 3)\nTest.assertEquals(countVowels(\"Steam\"), 2)\nTest.assertEquals(countVowels(\"Tape\"), 2)\nTest.assertEquals(countVowels(\"Nightmare\"), 3)\nTest.assertEquals(countVowels(\"Convention\"), 4)",
    "new_tests": "const countVowels = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(countVowels('Celebration')).toEqual(5);\n        expect(countVowels('Palm')).toEqual(1);\n        expect(countVowels('Prediction')).toEqual(4);\n        expect(countVowels('Suite')).toEqual(3);\n        expect(countVowels('Quote')).toEqual(3);\n        expect(countVowels('Portrait')).toEqual(3);\n        expect(countVowels('Steam')).toEqual(2);\n        expect(countVowels('Tape')).toEqual(2);\n        expect(countVowels('Nightmare')).toEqual(3);\n        expect(countVowels('Convention')).toEqual(4);\n    });\n});\n"
  },
  {
    "original_code": "function verifySubstrs(mainStr, head, body, tail) {\n  \n}",
    "new_code": "function verifySubstrs(mainStr, head, body, tail) {\n  // Your code here.\n}\n\nmodule.exports = verifySubstrs;\n",
    "original_tests": "Test.assertEquals(\n  verifySubstrs(\"Onomatopeia\", \"on\", \"mato\", \"ia\"),\n\t\"Incomplete.\"\n);\n\nTest.assertEquals(\n\tverifySubstrs(\"Baby\", \"B\", \"ab\", \"y\"),\n  \"My head, body, and tail.\"\n);\n\nTest.assertEquals(\n\tverifySubstrs(\"Centipede\", \"Cent\", \"tip\", \"pede\"),\n  \"My head, body, and tail.\"\n);\n\nTest.assertEquals(\n\tverifySubstrs(\"Hey, you, stop that.\", \"Hey\", \", y ou, st \", \".\"),\n  \"Incomplete.\"\n);\n\nTest.assertEquals(\n\tverifySubstrs(\"apple\", \"AP\", \"PPL\", \"LE\"),\n  \"Incomplete.\"\n);",
    "new_tests": "const verifySubstrs = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(verifySubstrs('Onomatopeia', 'on', 'mato', 'ia')).toEqual('Incomplete.');\n        expect(verifySubstrs('Baby', 'B', 'ab', 'y')).toEqual('My head, body, and tail.');\n        expect(verifySubstrs('Centipede', 'Cent', 'tip', 'pede')).toEqual('My head, body, and tail.');\n        expect(verifySubstrs('Hey, you, stop that.', 'Hey', ', y ou, st ', '.')).toEqual('Incomplete.');\n        expect(verifySubstrs('apple', 'AP', 'PPL', 'LE')).toEqual('Incomplete.');\n    });\n});\n"
  },
  {
    "original_code": "function myPi(n) {\n  \n}",
    "new_code": "function myPi(n) {\n  // Your code here.\n}\n\nmodule.exports = myPi;\n",
    "original_tests": "Test.assertEquals(myPi(0), 3);\nTest.assertEquals(myPi( 1), 3.1);\nTest.assertEquals(myPi( 2), 3.14);\nTest.assertEquals(myPi( 3), 3.142);\nTest.assertNotEquals(myPi(4), 3.1415, \"Don't forget to round up!\");\nTest.assertEquals(myPi( 5), 3.14159);\nTest.assertEquals(myPi( 6), 3.141593);\nTest.assertEquals(myPi( 7), 3.1415927);\nTest.assertEquals(myPi( 8), 3.14159265);\nTest.assertEquals(myPi( 9), 3.141592654);\nTest.assertEquals(myPi(10), 3.1415926536);\nTest.assertEquals(myPi(11), 3.14159265359);\nTest.assertEquals(myPi(12), 3.141592653590);\nTest.assertEquals(myPi(13), 3.1415926535898);\nTest.assertEquals(myPi(14), 3.14159265358979);\nTest.assertEquals(myPi(15), 3.141592653589793);",
    "new_tests": "const myPi = require('./code');\n\ndescribe('Tests', () => {\n    test('Don\\'t forget to round up!', () => {\n        expect(myPi(4)).not.toEqual(3.1415);\n    });\n    \n    test('the tests', () => {\n        expect(myPi(0)).toEqual(3);\n        expect(myPi(1)).toEqual(3.1);\n        expect(myPi(2)).toEqual(3.14);\n        expect(myPi(3)).toEqual(3.142);\n        expect(myPi(5)).toEqual(3.14159);\n        expect(myPi(6)).toEqual(3.141593);\n        expect(myPi(7)).toEqual(3.1415927);\n        expect(myPi(8)).toEqual(3.14159265);\n        expect(myPi(9)).toEqual(3.141592654);\n        expect(myPi(10)).toEqual(3.1415926536);\n        expect(myPi(11)).toEqual(3.14159265359);\n        expect(myPi(12)).toEqual(3.14159265359);\n        expect(myPi(13)).toEqual(3.1415926535898);\n        expect(myPi(14)).toEqual(3.14159265358979);\n        expect(myPi(15)).toEqual(3.141592653589793);\n    });\n});\n"
  },
  {
    "original_code": "function stretchTruth(num, str, arr) {\n  \n}",
    "new_code": "function stretchTruth(num, str, arr) {\n  // Your code here.\n}\n\nmodule.exports = stretchTruth;\n",
    "original_tests": "Test.assertEquals(stretchTruth(1, '1', []), 1);\nTest.assertEquals(stretchTruth(1, '1', [1,'1']), 3);\nTest.assertEquals(stretchTruth(1, '1', [1,1,'1']), 4);\nTest.assertEquals(stretchTruth(1, '1', [1,'1','1']), 4);\nTest.assertEquals(stretchTruth(1, '1', [1,'1','1','1','1','1','1']), 8);\nTest.assertEquals(stretchTruth(1, 'Sometimes We Stretch the Truth', ['1','Sometimes We Stretch the Truth']), 2);\nTest.assertEquals(stretchTruth(1, '1', [2,3]), 1);\nTest.assertEquals(stretchTruth(1, '1', [1,3]), 2);\nTest.assertEquals(stretchTruth(1, '1', ['1',3]), 2);\nTest.assertEquals(stretchTruth(1, '-1',['-1','-2',-1,'s',1,1]),4);\nTest.assertEquals(stretchTruth(1, '-1',['-1','-2',-1,'s',1,1,1,1,1,1,1,1,1,1,1,'-1']), 14);",
    "new_tests": "const stretchTruth = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(stretchTruth(1, '1', [])).toEqual(1);\n        expect(stretchTruth(1, '1', [1, '1'])).toEqual(3);\n        expect(stretchTruth(1, '1', [1, 1, '1'])).toEqual(4);\n        expect(stretchTruth(1, '1', [1, '1', '1'])).toEqual(4);\n        expect(stretchTruth(1, '1', [1, '1', '1', '1', '1', '1', '1'])).toEqual(8);\n        expect(stretchTruth(1, 'Sometimes We Stretch the Truth', ['1', 'Sometimes We Stretch the Truth'])).toEqual(2);\n        expect(stretchTruth(1, '1', [2, 3])).toEqual(1);\n        expect(stretchTruth(1, '1', [1, 3])).toEqual(2);\n        expect(stretchTruth(1, '1', ['1', 3])).toEqual(2);\n        expect(stretchTruth(1, '-1', ['-1', '-2', -1, 's', 1, 1])).toEqual(4);\n        expect(stretchTruth(1, '-1', ['-1', '-2', -1, 's', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, '-1'])).toEqual(14);\n    });\n});\n"
  },
  {
    "original_code": "function factorial(int) {\n  \n}",
    "new_code": "function factorial(int) {\n  // Your code here.\n}\n\nmodule.exports = factorial;\n",
    "original_tests": "Test.assertEquals(factorial(2), 2);\nTest.assertEquals(factorial(6), 720);\nTest.assertEquals(factorial(3), 6);\nTest.assertEquals(factorial(12), 479001600);\nTest.assertEquals(factorial(5), 120);",
    "new_tests": "const factorial = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(factorial(2)).toEqual(2);\n        expect(factorial(6)).toEqual(720);\n        expect(factorial(3)).toEqual(6);\n        expect(factorial(12)).toEqual(479001600);\n        expect(factorial(5)).toEqual(120);\n    });\n});\n"
  },
  {
    "original_code": "function percentDiff(num1, num2) {\n  \n}",
    "new_code": "function percentDiff(num1, num2) {\n  // Your code here.\n}\n\nmodule.exports = percentDiff;\n",
    "original_tests": "Test.assertEquals(percentDiff(60, 100), 50.0);\nTest.assertEquals(percentDiff(100, 60), 50.0);\nTest.assertEquals(percentDiff(5439, 4538), 18.1);\nTest.assertEquals(percentDiff(4538, 5439), 18.1);\nTest.assertEquals(percentDiff(87, 26), 108.0);\nTest.assertEquals(percentDiff(26, 87), 108.0);\nTest.assertEquals(percentDiff(465, 112), 122.4);\nTest.assertEquals(percentDiff(10438, 7345), 34.8);\nTest.assertEquals(percentDiff(10, 5), 66.7);\nTest.assertEquals(percentDiff(3, 100), 188.3);",
    "new_tests": "const percentDiff = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(percentDiff(60, 100)).toEqual(50);\n        expect(percentDiff(100, 60)).toEqual(50);\n        expect(percentDiff(5439, 4538)).toEqual(18.1);\n        expect(percentDiff(4538, 5439)).toEqual(18.1);\n        expect(percentDiff(87, 26)).toEqual(108);\n        expect(percentDiff(26, 87)).toEqual(108);\n        expect(percentDiff(465, 112)).toEqual(122.4);\n        expect(percentDiff(10438, 7345)).toEqual(34.8);\n        expect(percentDiff(10, 5)).toEqual(66.7);\n        expect(percentDiff(3, 100)).toEqual(188.3);\n    });\n});\n"
  },
  {
    "original_code": "function factorial(x) {\n  \n}",
    "new_code": "function factorial(x) {\n  // Your code here.\n}\n\nmodule.exports = factorial;\n",
    "original_tests": "Test.assertEquals(factorial(0), 1);\nTest.assertSimilar(factorial(5), 120);\nTest.assertEquals(factorial(10), 3628800);",
    "new_tests": "const factorial = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(factorial(0)).toEqual(1);\n        expect(factorial(5)).toEqual(120);\n        expect(factorial(10)).toEqual(3628800);\n    });\n});\n"
  },
  {
    "original_code": "function silenceTrump(str) {\n  \n}",
    "new_code": "function silenceTrump(str) {\n  // Your code here.\n}\n\nmodule.exports = silenceTrump;\n",
    "original_tests": "Test.assertEquals(silenceTrump(\"If Obama resigns from office NOW, thereby doing a great service to the country\u2014I will give him free lifetime golf at any one of my courses!\"), \"f bm rsgns frm ffc NW, thrby dng  grt srvc t th cntry\u2014 wll gv hm fr lftm glf t ny n f my crss!\")\nTest.assertEquals(silenceTrump(\"This election is a total sham and a travesty. We are not a democracy!\"), \"Ths lctn s  ttl shm nd  trvsty. W r nt  dmcrcy!\")\nTest.assertEquals(silenceTrump(\"I have never seen a thin person drinking Diet Coke.\"), \" hv nvr sn  thn prsn drnkng Dt Ck.\")\nTest.assertEquals(silenceTrump(\"Everybody wants me to talk about Robert Pattinson and not Brian Williams\u2014I guess people just don\u2019t care about Brian!\"), \"vrybdy wnts m t tlk bt Rbrt Pttnsn nd nt Brn Wllms\u2014 gss ppl jst dn\u2019t cr bt Brn!\")\nTest.assertEquals(silenceTrump(\"Katy, what the hell were you thinking when you married loser Russell Brand. There is a guy who has got nothing going, a waste!\"), \"Kty, wht th hll wr y thnkng whn y mrrd lsr Rssll Brnd. Thr s  gy wh hs gt nthng gng,  wst!\")\nTest.assertEquals(silenceTrump(\"Windmills are the greatest threat in the US to both bald and golden eagles. Media claims fictional \u2018global warming\u2019 is worse.\"), \"Wndmlls r th grtst thrt n th S t bth bld nd gldn gls. Md clms fctnl \u2018glbl wrmng\u2019 s wrs.\")\nTest.assertEquals(silenceTrump(\"Sorry losers and haters, but my I.Q. is one of the highest -and you all know it! Please don\u2019t feel so stupid or insecure,it\u2019s not your fault\"), \"Srry lsrs nd htrs, bt my .Q. s n f th hghst -nd y ll knw t! Pls dn\u2019t fl s stpd r nscr,t\u2019s nt yr flt\")\nTest.assertEquals(silenceTrump(\"Happy Thanksgiving to all--even the haters and losers!\"), \"Hppy Thnksgvng t ll--vn th htrs nd lsrs!\")\nTest.assertEquals(silenceTrump(\"Watch Kasich squirm --- if he is not truthful in his negative ads I will sue him just for fun!\"), \"Wtch Ksch sqrm --- f h s nt trthfl n hs ngtv ds  wll s hm jst fr fn!\")\nTest.assertEquals(silenceTrump(\"Obama is, without question, the WORST EVER president. I predict he will now do something really bad and totally stupid to show manhood!\"), \"bm s, wtht qstn, th WRST VR prsdnt.  prdct h wll nw d smthng rlly bd nd ttlly stpd t shw mnhd!\")",
    "new_tests": "const silenceTrump = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(silenceTrump('If Obama resigns from office NOW, thereby doing a great service to the country\u2014I will give him free lifetime golf at any one of my courses!')).toEqual('f bm rsgns frm ffc NW, thrby dng  grt srvc t th cntry\u2014 wll gv hm fr lftm glf t ny n f my crss!');\n        expect(silenceTrump('This election is a total sham and a travesty. We are not a democracy!')).toEqual('Ths lctn s  ttl shm nd  trvsty. W r nt  dmcrcy!');\n        expect(silenceTrump('I have never seen a thin person drinking Diet Coke.')).toEqual(' hv nvr sn  thn prsn drnkng Dt Ck.');\n        expect(silenceTrump('Everybody wants me to talk about Robert Pattinson and not Brian Williams\u2014I guess people just don\u2019t care about Brian!')).toEqual('vrybdy wnts m t tlk bt Rbrt Pttnsn nd nt Brn Wllms\u2014 gss ppl jst dn\u2019t cr bt Brn!');\n        expect(silenceTrump('Katy, what the hell were you thinking when you married loser Russell Brand. There is a guy who has got nothing going, a waste!')).toEqual('Kty, wht th hll wr y thnkng whn y mrrd lsr Rssll Brnd. Thr s  gy wh hs gt nthng gng,  wst!');\n        expect(silenceTrump('Windmills are the greatest threat in the US to both bald and golden eagles. Media claims fictional \u2018global warming\u2019 is worse.')).toEqual('Wndmlls r th grtst thrt n th S t bth bld nd gldn gls. Md clms fctnl \u2018glbl wrmng\u2019 s wrs.');\n        expect(silenceTrump('Sorry losers and haters, but my I.Q. is one of the highest -and you all know it! Please don\u2019t feel so stupid or insecure,it\u2019s not your fault')).toEqual('Srry lsrs nd htrs, bt my .Q. s n f th hghst -nd y ll knw t! Pls dn\u2019t fl s stpd r nscr,t\u2019s nt yr flt');\n        expect(silenceTrump('Happy Thanksgiving to all--even the haters and losers!')).toEqual('Hppy Thnksgvng t ll--vn th htrs nd lsrs!');\n        expect(silenceTrump('Watch Kasich squirm --- if he is not truthful in his negative ads I will sue him just for fun!')).toEqual('Wtch Ksch sqrm --- f h s nt trthfl n hs ngtv ds  wll s hm jst fr fn!');\n        expect(silenceTrump('Obama is, without question, the WORST EVER president. I predict he will now do something really bad and totally stupid to show manhood!')).toEqual('bm s, wtht qstn, th WRST VR prsdnt.  prdct h wll nw d smthng rlly bd nd ttlly stpd t shw mnhd!');\n    });\n});\n"
  },
  {
    "original_code": "function minMaxLengthAverage(arr) {\n  \n}",
    "new_code": "function minMaxLengthAverage(arr) {\n  // Your code here.\n}\n\nmodule.exports = minMaxLengthAverage;\n",
    "original_tests": "Test.assertSimilar(minMaxLengthAverage([6, 9, 15, -2, 92, 11]), [-2, 92, 6, 21.833333333333332]);\nTest.assertSimilar(minMaxLengthAverage([30, 43, 20, 92, 3, 74]), [3, 92, 6, 43.666666666666664]);\nTest.assertSimilar(minMaxLengthAverage([4.54, 8.32, 5.20]), [4.54, 8.32, 3, 6.02]);\nTest.assertSimilar(minMaxLengthAverage([0, 0, 0, 0, 0]), [0, 0, 5, 0]);\nTest.assertSimilar(minMaxLengthAverage([3]), [3, 3, 1, 3]);\nTest.assertSimilar(minMaxLengthAverage([0.345, 0.452, 0.543, 0.652, 0.8167]), [ 0.345, 0.8167, 5, 0.56174 ]);\nTest.assertSimilar(minMaxLengthAverage([17, 31, 9876, 5438, 2]), [2, 9876, 5, 3072.8]);\nTest.assertSimilar(minMaxLengthAverage([20, 40, 60, 98]), [20, 98, 4, 54.5]);\nTest.assertSimilar(minMaxLengthAverage([2, 3, 4, 5, 6, 7]), [2, 7, 6, 4.5]);\nTest.assertSimilar(minMaxLengthAverage([4532, 6543, 8769, 4528, 8745]), [4528, 8769, 5, 6623.4]);",
    "new_tests": "const minMaxLengthAverage = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(minMaxLengthAverage([6, 9, 15, -2, 92, 11])).toEqual([-2, 92, 6, 21.833333333333332]);\n        expect(minMaxLengthAverage([30, 43, 20, 92, 3, 74])).toEqual([3, 92, 6, 43.666666666666664]);\n        expect(minMaxLengthAverage([4.54, 8.32, 5.2])).toEqual([4.54, 8.32, 3, 6.02]);\n        expect(minMaxLengthAverage([0, 0, 0, 0, 0])).toEqual([0, 0, 5, 0]);\n        expect(minMaxLengthAverage([3])).toEqual([3, 3, 1, 3]);\n        expect(minMaxLengthAverage([0.345, 0.452, 0.543, 0.652, 0.8167])).toEqual([0.345, 0.8167, 5, 0.56174]);\n        expect(minMaxLengthAverage([17, 31, 9876, 5438, 2])).toEqual([2, 9876, 5, 3072.8]);\n        expect(minMaxLengthAverage([20, 40, 60, 98])).toEqual([20, 98, 4, 54.5]);\n        expect(minMaxLengthAverage([2, 3, 4, 5, 6, 7])).toEqual([2, 7, 6, 4.5]);\n        expect(minMaxLengthAverage([4532, 6543, 8769, 4528, 8745])).toEqual([4528, 8769, 5, 6623.4]);\n    });\n});\n"
  },
  {
    "original_code": "function findLargestNums(arr) {\n  \n}",
    "new_code": "function findLargestNums(arr) {\n  // Your code here.\n}\n\nmodule.exports = findLargestNums;\n",
    "original_tests": "Test.assertSimilar(findLargestNums([[4, 2, 7, 1], [20, 70, 40, 90], [1, 2, 0]]), [7, 90, 2])\nTest.assertSimilar(findLargestNums([[0.4321, 0.7634, 0.652], [1.324, 9.32, 2.5423, 6.4314], [9, 3, 6, 3]]), [0.7634, 9.32, 9])\nTest.assertSimilar(findLargestNums([[-34, -54, -74], [-32, -2, -65], [-54, 7, -43]]), [-34, -2, 7])\nTest.assertSimilar(findLargestNums([[0.34, -5, 1.34], [-6.432, -1.762, -1.99], [32, 65, -6]]), [1.34, -1.762, 65])\nTest.assertSimilar(findLargestNums([[0, 0, 0, 0], [3, 3, 3, 3], [-2, -2]]), [ 0, 3, -2 ])",
    "new_tests": "const findLargestNums = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(findLargestNums([[4, 2, 7, 1], [20, 70, 40, 90], [1, 2, 0]])).toEqual([7, 90, 2]);\n        expect(findLargestNums([[0.4321, 0.7634, 0.652], [1.324, 9.32, 2.5423, 6.4314], [9, 3, 6, 3]])).toEqual([0.7634, 9.32, 9]);\n        expect(findLargestNums([[-34, -54, -74], [-32, -2, -65], [-54, 7, -43]])).toEqual([-34, -2, 7]);\n        expect(findLargestNums([[0.34, -5, 1.34], [-6.432, -1.762, -1.99], [32, 65, -6]])).toEqual([1.34, -1.762, 65]);\n        expect(findLargestNums([[0, 0, 0, 0], [3, 3, 3, 3], [-2, -2]])).toEqual([0, 3, -2]);\n    });\n});\n"
  },
  {
    "original_code": "function mean(arr) {\n  \n}",
    "new_code": "function mean(arr) {\n  // Your code here.\n}\n\nmodule.exports = mean;\n",
    "original_tests": "Test.assertEquals((mean([1, 0, 4, 5, 2, 4, 1, 2, 3, 3, 3])), 2.55);\nTest.assertEquals((mean([324, 543, 654, 9876])), 2849.25);\nTest.assertEquals((mean([0, 0, 0, 0])), 0.00);\nTest.assertEquals((mean([30, 40, 20, 100, 30])), 44.00);\nTest.assertEquals((mean([1, 1, 1, 0])), 0.75);\nTest.assertEquals((mean([1, 1, 0, 1, 2, 1, 1, 1, 0, 0])), 0.80);\nTest.assertEquals((mean([10000])), 10000.00);",
    "new_tests": "const mean = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(mean([1, 0, 4, 5, 2, 4, 1, 2, 3, 3, 3])).toEqual(2.55);\n        expect(mean([324, 543, 654, 9876])).toEqual(2849.25);\n        expect(mean([0, 0, 0, 0])).toEqual(0);\n        expect(mean([30, 40, 20, 100, 30])).toEqual(44);\n        expect(mean([1, 1, 1, 0])).toEqual(0.75);\n        expect(mean([1, 1, 0, 1, 2, 1, 1, 1, 0, 0])).toEqual(0.8);\n        expect(mean([10000])).toEqual(10000);\n    });\n});\n"
  },
  {
    "original_code": "function isAvgWhole(arr) {\n  \n}",
    "new_code": "function isAvgWhole(arr) {\n  // Your code here.\n}\n\nmodule.exports = isAvgWhole;\n",
    "original_tests": "Test.assertEquals(isAvgWhole([3, 5, 9]), false);\nTest.assertEquals(isAvgWhole([1, 1, 1, 1]), true);\nTest.assertEquals(isAvgWhole([1, 2, 3, 4, 5]), true);\nTest.assertEquals(isAvgWhole([5, 2, 4]), false);\nTest.assertEquals(isAvgWhole([11, 22]), false);\nTest.assertEquals(isAvgWhole([4, 1, 7, 9, 2, 5, 7, 2, 4]), false);",
    "new_tests": "const isAvgWhole = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isAvgWhole([3, 5, 9])).toEqual(false);\n        expect(isAvgWhole([1, 1, 1, 1])).toEqual(true);\n        expect(isAvgWhole([1, 2, 3, 4, 5])).toEqual(true);\n        expect(isAvgWhole([5, 2, 4])).toEqual(false);\n        expect(isAvgWhole([11, 22])).toEqual(false);\n        expect(isAvgWhole([4, 1, 7, 9, 2, 5, 7, 2, 4])).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function formatPhoneNumber(numbers) {\n  \n}",
    "new_code": "function formatPhoneNumber(numbers) {\n  // Your code here.\n}\n\nmodule.exports = formatPhoneNumber;\n",
    "original_tests": "Test.assertSimilar(formatPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]), \"(123) 456-7890\")\nTest.assertSimilar(formatPhoneNumber([5, 1, 9, 5, 5, 5, 4, 4, 6, 8]), \"(519) 555-4468\")\nTest.assertSimilar(formatPhoneNumber([3, 4, 5, 5, 0, 1, 2, 5, 2, 7]), \"(345) 501-2527\")\nTest.assertSimilar(formatPhoneNumber([6, 6, 2, 5, 8, 8, 7, 0, 4, 3]), \"(662) 588-7043\")\nTest.assertSimilar(formatPhoneNumber([5, 1, 0, 2, 6, 6, 3, 5, 8, 3]), \"(510) 266-3583\")\nTest.assertSimilar(formatPhoneNumber([4, 9, 7, 8, 8, 9, 1, 0, 1, 5]), \"(497) 889-1015\")\nTest.assertSimilar(formatPhoneNumber([6, 1, 9, 4, 7, 2, 8, 0, 7, 4]), \"(619) 472-8074\")\nTest.assertSimilar(formatPhoneNumber([7, 7, 3, 7, 8, 3, 6, 0, 8, 7]), \"(773) 783-6087\")\nTest.assertSimilar(formatPhoneNumber([9, 5, 3, 1, 3, 7, 4, 0, 0, 1]), \"(953) 137-4001\")\nTest.assertSimilar(formatPhoneNumber([2, 2, 6, 4, 0, 4, 4, 2, 9, 2]), \"(226) 404-4292\")",
    "new_tests": "const formatPhoneNumber = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(formatPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])).toEqual('(123) 456-7890');\n        expect(formatPhoneNumber([5, 1, 9, 5, 5, 5, 4, 4, 6, 8])).toEqual('(519) 555-4468');\n        expect(formatPhoneNumber([3, 4, 5, 5, 0, 1, 2, 5, 2, 7])).toEqual('(345) 501-2527');\n        expect(formatPhoneNumber([6, 6, 2, 5, 8, 8, 7, 0, 4, 3])).toEqual('(662) 588-7043');\n        expect(formatPhoneNumber([5, 1, 0, 2, 6, 6, 3, 5, 8, 3])).toEqual('(510) 266-3583');\n        expect(formatPhoneNumber([4, 9, 7, 8, 8, 9, 1, 0, 1, 5])).toEqual('(497) 889-1015');\n        expect(formatPhoneNumber([6, 1, 9, 4, 7, 2, 8, 0, 7, 4])).toEqual('(619) 472-8074');\n        expect(formatPhoneNumber([7, 7, 3, 7, 8, 3, 6, 0, 8, 7])).toEqual('(773) 783-6087');\n        expect(formatPhoneNumber([9, 5, 3, 1, 3, 7, 4, 0, 0, 1])).toEqual('(953) 137-4001');\n        expect(formatPhoneNumber([2, 2, 6, 4, 0, 4, 4, 2, 9, 2])).toEqual('(226) 404-4292');\n    });\n});\n"
  },
  {
    "original_code": "function sortNumsAscending(arr) {\n  \n}",
    "new_code": "function sortNumsAscending(arr) {\n  // Your code here.\n}\n\nmodule.exports = sortNumsAscending;\n",
    "original_tests": "Test.assertSimilar(sortNumsAscending([1, 2, 10, 50, 5]), [1, 2, 5, 10, 50])\nTest.assertSimilar(sortNumsAscending([80, 29, 4, -95, -24, 85]), [-95, -24, 4, 29, 80, 85])\nTest.assertSimilar(sortNumsAscending(null), [])\nTest.assertSimilar(sortNumsAscending([]), [])\nTest.assertSimilar(sortNumsAscending([47, 51, -17, -16, 91, 47, -85, -8, -16, -27]), [-85, -27, -17, -16, -16, -8, 47, 47, 51, 91])\nTest.assertSimilar(sortNumsAscending([-51, -73, 65, 69, -76, 74, -14]), [-76, -73, -51, -14, 65, 69, 74])\nTest.assertSimilar(sortNumsAscending([45, 98, 35, 65, 97, 21, 33]), [21, 33, 35, 45, 65, 97, 98])\nTest.assertSimilar(sortNumsAscending([-23, -69, -54, -2, -32]), [-69, -54, -32, -23, -2])\nTest.assertSimilar(sortNumsAscending([-21, -9, -96]), [-96, -21, -9])\nTest.assertSimilar(sortNumsAscending([0]), [0])",
    "new_tests": "const sortNumsAscending = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(sortNumsAscending([1, 2, 10, 50, 5])).toEqual([1, 2, 5, 10, 50]);\n        expect(sortNumsAscending([80, 29, 4, -95, -24, 85])).toEqual([-95, -24, 4, 29, 80, 85]);\n        expect(sortNumsAscending(undefined)).toEqual([]);\n        expect(sortNumsAscending([])).toEqual([]);\n        expect(sortNumsAscending([47, 51, -17, -16, 91, 47, -85, -8, -16, -27])).toEqual([-85, -27, -17, -16, -16, -8, 47, 47, 51, 91]);\n        expect(sortNumsAscending([-51, -73, 65, 69, -76, 74, -14])).toEqual([-76, -73, -51, -14, 65, 69, 74]);\n        expect(sortNumsAscending([45, 98, 35, 65, 97, 21, 33])).toEqual([21, 33, 35, 45, 65, 97, 98]);\n        expect(sortNumsAscending([-23, -69, -54, -2, -32])).toEqual([-69, -54, -32, -23, -2]);\n        expect(sortNumsAscending([-21, -9, -96])).toEqual([-96, -21, -9]);\n        expect(sortNumsAscending([0])).toEqual([0]);\n    });\n});\n"
  },
  {
    "original_code": "function sortByLength(arr) {\n  \n}",
    "new_code": "function sortByLength(arr) {\n  // Your code here.\n}\n\nmodule.exports = sortByLength;\n",
    "original_tests": "Test.assertSimilar(sortByLength([\"Google\", \"Apple\", \"Microsoft\"]), [\"Apple\", \"Google\", \"Microsoft\"]);\nTest.assertSimilar(sortByLength([\"Leonardo\", \"Michelangelo\", \"Raphael\", \"Donatello\"]), [\"Raphael\", \"Leonardo\", \"Donatello\", \"Michelangelo\"]);\nTest.assertSimilar(sortByLength([\"Turing\", \"Einstein\", \"Jung\"]), [\"Jung\", \"Turing\", \"Einstein\"]);\nTest.assertSimilar(sortByLength([\"Tatooine\", \"Hoth\", \"Yavin\", \"Dantooine\"]), [\"Hoth\", \"Yavin\", \"Tatooine\", \"Dantooine\"]);\nTest.assertSimilar(sortByLength([\"Mario\", \"Bowser\", \"Link\"]), [\"Link\", \"Mario\", \"Bowser\"]);",
    "new_tests": "const sortByLength = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(sortByLength(['Google', 'Apple', 'Microsoft'])).toEqual(['Apple', 'Google', 'Microsoft']);\n        expect(sortByLength(['Leonardo', 'Michelangelo', 'Raphael', 'Donatello'])).toEqual(['Raphael', 'Leonardo', 'Donatello', 'Michelangelo']);\n        expect(sortByLength(['Turing', 'Einstein', 'Jung'])).toEqual(['Jung', 'Turing', 'Einstein']);\n        expect(sortByLength(['Tatooine', 'Hoth', 'Yavin', 'Dantooine'])).toEqual(['Hoth', 'Yavin', 'Tatooine', 'Dantooine']);\n        expect(sortByLength(['Mario', 'Bowser', 'Link'])).toEqual(['Link', 'Mario', 'Bowser']);\n    });\n});\n"
  },
  {
    "original_code": "function highLow(str) {\n  \n}",
    "new_code": "function highLow(str) {\n  // Your code here.\n}\n\nmodule.exports = highLow;\n",
    "original_tests": "Test.assertEquals(highLow(\"4 5 29 54 4 0 -214 542 -64 1 -3 6 -6\"), \"542 -214\")\nTest.assertEquals(highLow(\"1 -1\"), \"1 -1\")\nTest.assertEquals(highLow(\"1 1\"), \"1 1\")\nTest.assertEquals(highLow(\"-1 -1\"), \"-1 -1\")\nTest.assertEquals(highLow(\"1 -1 0\"), \"1 -1\")\nTest.assertEquals(highLow(\"1 1 0\"), \"1 0\")\nTest.assertEquals(highLow(\"-1 -1 0\"), \"0 -1\")\nTest.assertEquals(highLow(\"42\"), \"42 42\")",
    "new_tests": "const highLow = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(highLow('4 5 29 54 4 0 -214 542 -64 1 -3 6 -6')).toEqual('542 -214');\n        expect(highLow('1 -1')).toEqual('1 -1');\n        expect(highLow('1 1')).toEqual('1 1');\n        expect(highLow('-1 -1')).toEqual('-1 -1');\n        expect(highLow('1 -1 0')).toEqual('1 -1');\n        expect(highLow('1 1 0')).toEqual('1 0');\n        expect(highLow('-1 -1 0')).toEqual('0 -1');\n        expect(highLow('42')).toEqual('42 42');\n    });\n});\n"
  },
  {
    "original_code": "function sortDecending(num) {\n  \n}",
    "new_code": "function sortDecending(num) {\n  // Your code here.\n}\n\nmodule.exports = sortDecending;\n",
    "original_tests": "Test.assertEquals(sortDecending(123), 321)\nTest.assertEquals(sortDecending(670276097), 977766200)\nTest.assertEquals(sortDecending(2619805), 9865210)\nTest.assertEquals(sortDecending(81294), 98421)\nTest.assertEquals(sortDecending(0000000), 0000000)\nTest.assertEquals(sortDecending(321), 321)\nTest.assertEquals(sortDecending(628904), 986420)\nTest.assertEquals(sortDecending(289327560), 987653220)\nTest.assertEquals(sortDecending(6456), 6654)\nTest.assertEquals(sortDecending(444111888555333), 888555444333111)",
    "new_tests": "const sortDecending = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(sortDecending(123)).toEqual(321);\n        expect(sortDecending(670276097)).toEqual(977766200);\n        expect(sortDecending(2619805)).toEqual(9865210);\n        expect(sortDecending(81294)).toEqual(98421);\n        expect(sortDecending(0)).toEqual(0);\n        expect(sortDecending(321)).toEqual(321);\n        expect(sortDecending(628904)).toEqual(986420);\n        expect(sortDecending(289327560)).toEqual(987653220);\n        expect(sortDecending(6456)).toEqual(6654);\n        expect(sortDecending(444111888555333)).toEqual(888555444333111);\n    });\n});\n"
  },
  {
    "original_code": "function isSymmetrical(num) {\n  \n}",
    "new_code": "function isSymmetrical(num) {\n  // Your code here.\n}\n\nmodule.exports = isSymmetrical;\n",
    "original_tests": "Test.assertEquals(isSymmetrical(23), false);\nTest.assertEquals(isSymmetrical(9562), false);\nTest.assertEquals(isSymmetrical(10019), false);\nTest.assertEquals(isSymmetrical(1), true);\nTest.assertEquals(isSymmetrical(3223), true);\nTest.assertEquals(isSymmetrical(95559), true);\nTest.assertEquals(isSymmetrical(66566), true);",
    "new_tests": "const isSymmetrical = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isSymmetrical(23)).toEqual(false);\n        expect(isSymmetrical(9562)).toEqual(false);\n        expect(isSymmetrical(10019)).toEqual(false);\n        expect(isSymmetrical(1)).toEqual(true);\n        expect(isSymmetrical(3223)).toEqual(true);\n        expect(isSymmetrical(95559)).toEqual(true);\n        expect(isSymmetrical(66566)).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function removeDups(arr) {\n  \n}",
    "new_code": "function removeDups(arr) {\n  // Your code here.\n}\n\nmodule.exports = removeDups;\n",
    "original_tests": "Test.assertSimilar(removeDups(['John', 'Taylor', 'John']), ['John', 'Taylor'])\nTest.assertSimilar(removeDups(['John', 'Taylor', 'John', 'john']), ['John', 'Taylor', 'john'])\nTest.assertSimilar(removeDups(['javascript', 'python', 'python', 'ruby', 'javascript', 'c', 'ruby']), ['javascript', 'python', 'ruby', 'c'])\nTest.assertSimilar(removeDups([1, 2, 2, 2, 3, 2, 5, 2, 6, 6, 3, 7, 1, 2, 5]), [1, 2, 3, 5, 6, 7])\nTest.assertSimilar(removeDups(['#', '#', '%', '&', '#', '$', '&']), ['#', '%', '&', '$'])\nTest.assertSimilar(removeDups([3, 'Apple', 3, 'Orange', 'Apple']), [3, 'Apple', 'Orange'])",
    "new_tests": "const removeDups = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(removeDups(['John', 'Taylor', 'John'])).toEqual(['John', 'Taylor']);\n        expect(removeDups(['John', 'Taylor', 'John', 'john'])).toEqual(['John', 'Taylor', 'john']);\n        expect(removeDups(['javascript', 'python', 'python', 'ruby', 'javascript', 'c', 'ruby'])).toEqual(['javascript', 'python', 'ruby', 'c']);\n        expect(removeDups([1, 2, 2, 2, 3, 2, 5, 2, 6, 6, 3, 7, 1, 2, 5])).toEqual([1, 2, 3, 5, 6, 7]);\n        expect(removeDups(['#', '#', '%', '&', '#', '$', '&'])).toEqual(['#', '%', '&', '$']);\n        expect(removeDups([3, 'Apple', 3, 'Orange', 'Apple'])).toEqual([3, 'Apple', 'Orange']);\n    });\n});\n"
  },
  {
    "original_code": "function missingNums(arr) {\n  \n}",
    "new_code": "function missingNums(arr) {\n  // Your code here.\n}\n\nmodule.exports = missingNums;\n",
    "original_tests": "Test.assertEquals(missingNums([1, 2, 3, 4, 6, 7, 8, 9, 10]), 5)\nTest.assertEquals(missingNums([7, 2, 3, 6, 5, 9, 1, 4, 8]), 10)\nTest.assertEquals(missingNums([7, 2, 3, 9, 4, 5, 6, 8, 10]), 1)\nTest.assertEquals(missingNums([10, 5, 1, 2, 4, 6, 8, 3, 9]), 7)\nTest.assertEquals(missingNums([1, 7, 2, 4, 8, 10, 5, 6, 9]), 3)",
    "new_tests": "const missingNums = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(missingNums([1, 2, 3, 4, 6, 7, 8, 9, 10])).toEqual(5);\n        expect(missingNums([7, 2, 3, 6, 5, 9, 1, 4, 8])).toEqual(10);\n        expect(missingNums([7, 2, 3, 9, 4, 5, 6, 8, 10])).toEqual(1);\n        expect(missingNums([10, 5, 1, 2, 4, 6, 8, 3, 9])).toEqual(7);\n        expect(missingNums([1, 7, 2, 4, 8, 10, 5, 6, 9])).toEqual(3);\n    });\n});\n"
  },
  {
    "original_code": "function XO(str) {\n  \n}",
    "new_code": "function XO(str) {\n  // Your code here.\n}\n\nmodule.exports = XO;\n",
    "original_tests": "Test.assertEquals(XO(\"ooxx\"), true);\nTest.assertEquals(XO(\"xooxx\"), false);\nTest.assertEquals(XO(\"ooxXm\"), true);\nTest.assertEquals(XO(\"zpzpzpp\"), true);\nTest.assertEquals(XO(\"zzoo\"), false);\nTest.assertEquals(XO(\"Xo\"), true);\nTest.assertEquals(XO(\"x\"), false);\nTest.assertEquals(XO(\"o\"), false);\nTest.assertEquals(XO(\"xxxoo\"), false);\nTest.assertEquals(XO(\"\"), true);",
    "new_tests": "const XO = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(XO('ooxx')).toEqual(true);\n        expect(XO('xooxx')).toEqual(false);\n        expect(XO('ooxXm')).toEqual(true);\n        expect(XO('zpzpzpp')).toEqual(true);\n        expect(XO('zzoo')).toEqual(false);\n        expect(XO('Xo')).toEqual(true);\n        expect(XO('x')).toEqual(false);\n        expect(XO('o')).toEqual(false);\n        expect(XO('xxxoo')).toEqual(false);\n        expect(XO('')).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function equal(a, b, c) {\n  \n}",
    "new_code": "function equal(a, b, c) {\n  // Your code here.\n}\n\nmodule.exports = equal;\n",
    "original_tests": "Test.assertEquals(equal(2,3,4), 0, \"All values are differents\");\nTest.assertEquals(equal(7,3,7), 2, \"Two values are equal\");\nTest.assertEquals(equal(4,4,4), 3, \"All 3 values are equal\");\nTest.assertEquals(equal(7,3,4), 0, \"All values are differents\");\nTest.assertEquals(equal(3,3,6), 2, \"Two values are equal\");\nTest.assertEquals(equal(1,1,1), 3, \"All 3 values are equal\");\nTest.assertEquals(equal(1,7,6), 0, \"All values are differents\");\nTest.assertEquals(equal(\"a\",\"toto\",\"a\"), 2, \"Two values are equal\");\nTest.assertEquals(equal(7, 7, 7), 3, \"All 3 values are equal\");",
    "new_tests": "const equal = require('./code');\n\ndescribe('Tests', () => {\n    test('All values are differents', () => {\n        expect(equal(2, 3, 4)).toEqual(0);\n    });\n\ntest('Two values are equal', () => {\n        expect(equal(7, 3, 7)).toEqual(2);\n    });\n\ntest('All 3 values are equal', () => {\n        expect(equal(4, 4, 4)).toEqual(3);\n    });\n\ntest('All values are differents', () => {\n        expect(equal(7, 3, 4)).toEqual(0);\n    });\n\ntest('Two values are equal', () => {\n        expect(equal(3, 3, 6)).toEqual(2);\n    });\n\ntest('All 3 values are equal', () => {\n        expect(equal(1, 1, 1)).toEqual(3);\n    });\n\ntest('All values are differents', () => {\n        expect(equal(1, 7, 6)).toEqual(0);\n    });\n\ntest('Two values are equal', () => {\n        expect(equal('a', 'toto', 'a')).toEqual(2);\n    });\n\ntest('All 3 values are equal', () => {\n        expect(equal(7, 7, 7)).toEqual(3);\n    });\n    \n    test('the tests', () => {\n        \n    });\n});\n"
  },
  {
    "original_code": "function hackerSpeak(str) {\n  \n}",
    "new_code": "function hackerSpeak(str) {\n  // Your code here.\n}\n\nmodule.exports = hackerSpeak;\n",
    "original_tests": "// JavaScript\nTest.assertEquals(hackerSpeak(\"javascript is cool\"), \"j4v45cr1pt 15 c00l\");\nTest.assertEquals(hackerSpeak(\"become a coder\"), \"b3c0m3 4 c0d3r\");\nTest.assertEquals(hackerSpeak(\"hi there\"), \"h1 th3r3\");\nTest.assertEquals(hackerSpeak(\"programming is fun\"), \"pr0gr4mm1ng 15 fun\");\nTest.assertEquals(hackerSpeak(\"keep on practicing\"), \"k33p 0n pr4ct1c1ng\");\n\n\n// More info here: https://edabit.com/help/creating-challenges",
    "new_tests": "const hackerSpeak = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(hackerSpeak('javascript is cool')).toEqual('j4v45cr1pt 15 c00l');\n        expect(hackerSpeak('become a coder')).toEqual('b3c0m3 4 c0d3r');\n        expect(hackerSpeak('hi there')).toEqual('h1 th3r3');\n        expect(hackerSpeak('programming is fun')).toEqual('pr0gr4mm1ng 15 fun');\n        expect(hackerSpeak('keep on practicing')).toEqual('k33p 0n pr4ct1c1ng');\n    });\n});\n"
  },
  {
    "original_code": "function capMe(arr) {\n  \n}",
    "new_code": "function capMe(arr) {\n  // Your code here.\n}\n\nmodule.exports = capMe;\n",
    "original_tests": "Test.assertSimilar(capMe(['mavis', 'senaida', 'letty']), ['Mavis', 'Senaida', 'Letty'])\nTest.assertSimilar(capMe(['samuel', 'MABELLE', 'letitia', 'meridith']), ['Samuel', 'Mabelle', 'Letitia', 'Meridith'])\nTest.assertSimilar(capMe(['Slyvia', 'Kristal', 'Sharilyn', 'Calista']), ['Slyvia', 'Kristal', 'Sharilyn', 'Calista'])\nTest.assertSimilar(capMe(['krisTopher', 'olIva', 'herminiA']), ['Kristopher', 'Oliva', 'Herminia'])\nTest.assertSimilar(capMe(['luke', 'marsha', 'stanford']), ['Luke', 'Marsha', 'Stanford'])\nTest.assertSimilar(capMe(['kara']), ['Kara'])\nTest.assertSimilar(capMe(['mARIANN', 'jOI', 'gEORGEANN']), ['Mariann', 'Joi', 'Georgeann'])",
    "new_tests": "const capMe = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(capMe(['mavis', 'senaida', 'letty'])).toEqual(['Mavis', 'Senaida', 'Letty']);\n        expect(capMe(['samuel', 'MABELLE', 'letitia', 'meridith'])).toEqual(['Samuel', 'Mabelle', 'Letitia', 'Meridith']);\n        expect(capMe(['Slyvia', 'Kristal', 'Sharilyn', 'Calista'])).toEqual(['Slyvia', 'Kristal', 'Sharilyn', 'Calista']);\n        expect(capMe(['krisTopher', 'olIva', 'herminiA'])).toEqual(['Kristopher', 'Oliva', 'Herminia']);\n        expect(capMe(['luke', 'marsha', 'stanford'])).toEqual(['Luke', 'Marsha', 'Stanford']);\n        expect(capMe(['kara'])).toEqual(['Kara']);\n        expect(capMe(['mARIANN', 'jOI', 'gEORGEANN'])).toEqual(['Mariann', 'Joi', 'Georgeann']);\n    });\n});\n"
  },
  {
    "original_code": "function formatNum(num) {\n  \n}",
    "new_code": "function formatNum(num) {\n  // Your code here.\n}\n\nmodule.exports = formatNum;\n",
    "original_tests": "Test.assertEquals(formatNum(1000), \"1,000\");\nTest.assertEquals(formatNum(1000000), \"1,000,000\");\nTest.assertEquals(formatNum(20), \"20\");\nTest.assertEquals(formatNum(0), \"0\");\nTest.assertEquals(formatNum(12948), \"12,948\");",
    "new_tests": "const formatNum = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(formatNum(1000)).toEqual('1,000');\n        expect(formatNum(1000000)).toEqual('1,000,000');\n        expect(formatNum(20)).toEqual('20');\n        expect(formatNum(0)).toEqual('0');\n        expect(formatNum(12948)).toEqual('12,948');\n    });\n});\n"
  },
  {
    "original_code": "function getMiddle(str) {\n  \n}",
    "new_code": "function getMiddle(str) {\n  // Your code here.\n}\n\nmodule.exports = getMiddle;\n",
    "original_tests": "Test.assertEquals(getMiddle(\"test\"), \"es\")\nTest.assertEquals(getMiddle(\"testing\"), \"t\")\nTest.assertEquals(getMiddle(\"middle\"), \"dd\")\nTest.assertEquals(getMiddle(\"A\"), \"A\")\nTest.assertEquals(getMiddle(\"inhabitant\"), \"bi\")\nTest.assertEquals(getMiddle(\"brown\"), \"o\")\nTest.assertEquals(getMiddle(\"pawn\"), \"aw\")\nTest.assertEquals(getMiddle(\"cabinet\"), \"i\")\nTest.assertEquals(getMiddle(\"fresh\"), \"e\")\nTest.assertEquals(getMiddle(\"shorts\"), \"or\")",
    "new_tests": "const getMiddle = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(getMiddle('test')).toEqual('es');\n        expect(getMiddle('testing')).toEqual('t');\n        expect(getMiddle('middle')).toEqual('dd');\n        expect(getMiddle('A')).toEqual('A');\n        expect(getMiddle('inhabitant')).toEqual('bi');\n        expect(getMiddle('brown')).toEqual('o');\n        expect(getMiddle('pawn')).toEqual('aw');\n        expect(getMiddle('cabinet')).toEqual('i');\n        expect(getMiddle('fresh')).toEqual('e');\n        expect(getMiddle('shorts')).toEqual('or');\n    });\n});\n"
  },
  {
    "original_code": "function truncate(txt, txt_length, txt_suffix = null){\n  \n}",
    "new_code": "function truncate(txt, txt_length, txt_suffix) {\n  // Your code here.\n}\n\nmodule.exports = truncate;\n",
    "original_tests": "Test.assertEquals(truncate(\"CatDogDuck\", 9, \"Rat\"), \"CatDogRat\")\nTest.assertEquals(truncate(\"DogCat\", 3), \"Dog\")",
    "new_tests": "const truncate = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(truncate('CatDogDuck', 9, 'Rat')).toEqual('CatDogRat');\n        expect(truncate('DogCat', 3)).toEqual('Dog');\n    });\n});\n"
  },
  {
    "original_code": "function alternatingCaps(str) {\n  \n}",
    "new_code": "function alternatingCaps(str) {\n  // Your code here.\n}\n\nmodule.exports = alternatingCaps;\n",
    "original_tests": "Test.assertEquals(\n  alternatingCaps('alternating caps'),\n  'AlTeRnAtInG CaPs'\n);\nTest.assertEquals(\n  alternatingCaps(\"Hello, what's your name?\"),\n  \"HeLlO, wHaT'S YoUr nAmE?\"\n);\nTest.assertEquals(\n  alternatingCaps('Lorem ipsum dolor sit amet, consectetur adipisicing elit.'),\n  'LoReM IpSuM DoLoR SiT AmEt, CoNsEcTeTuR AdIpIsIcInG ElIt.'\n);\nTest.assertEquals(\n  alternatingCaps('OMG!!! This website is awesome!!'),\n  'OmG!!! tHiS WeBsItE Is aWeSoMe!!'\n);\nTest.assertEquals(\n  alternatingCaps('The quick brown fox jumps over the lazy dog'),\n  'ThE QuIcK BrOwN FoX JuMpS OvEr tHe lAzY DoG'\n);\nTest.assertEquals(\n  alternatingCaps('The intent is to provide players with a sense of pride and accomplishment for unlocking different heroes.'),\n  'ThE InTeNt iS To pRoViDe pLaYeRs wItH A SeNsE Of pRiDe aNd aCcOmPlIsHmEnT FoR UnLoCkInG DiFfErEnT HeRoEs.'\n);",
    "new_tests": "const alternatingCaps = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(alternatingCaps('alternating caps')).toEqual('AlTeRnAtInG CaPs');\n        expect(alternatingCaps('Hello, what\\'s your name?')).toEqual('HeLlO, wHaT\\'S YoUr nAmE?');\n        expect(alternatingCaps('Lorem ipsum dolor sit amet, consectetur adipisicing elit.')).toEqual('LoReM IpSuM DoLoR SiT AmEt, CoNsEcTeTuR AdIpIsIcInG ElIt.');\n        expect(alternatingCaps('OMG!!! This website is awesome!!')).toEqual('OmG!!! tHiS WeBsItE Is aWeSoMe!!');\n        expect(alternatingCaps('The quick brown fox jumps over the lazy dog')).toEqual('ThE QuIcK BrOwN FoX JuMpS OvEr tHe lAzY DoG');\n        expect(alternatingCaps('The intent is to provide players with a sense of pride and accomplishment for unlocking different heroes.')).toEqual('ThE InTeNt iS To pRoViDe pLaYeRs wItH A SeNsE Of pRiDe aNd aCcOmPlIsHmEnT FoR UnLoCkInG DiFfErEnT HeRoEs.');\n    });\n});\n"
  },
  {
    "original_code": "function makeTitle(str) {\n  \n}",
    "new_code": "function makeTitle(str) {\n  // Your code here.\n}\n\nmodule.exports = makeTitle;\n",
    "original_tests": "Test.assertSimilar(makeTitle(\"I am a title\"), \"I Am A Title\");\nTest.assertSimilar(makeTitle(\"I AM A TITLE\"), \"I AM A TITLE\");\nTest.assertSimilar(makeTitle(\"i aM a tITLE\"), \"I AM A TITLE\");\nTest.assertSimilar(makeTitle(\"the first letter of every word is capitalized\"), \"The First Letter Of Every Word Is Capitalized\");\nTest.assertSimilar(makeTitle(\"I Like Pizza\"), \"I Like Pizza\");\nTest.assertSimilar(makeTitle(\"Don't count your ChiCKens BeFore They HatCh\"), \"Don't Count Your ChiCKens BeFore They HatCh\");\nTest.assertSimilar(makeTitle(\"All generalizations are false, including this one\"), \"All Generalizations Are False, Including This One\");\nTest.assertSimilar(makeTitle(\"Me and my wife lived happily for twenty years and then we met.\"), \"Me And My Wife Lived Happily For Twenty Years And Then We Met.\");\nTest.assertSimilar(makeTitle(\"There are no stupid questions, just stupid people.\"), \"There Are No Stupid Questions, Just Stupid People.\");\nTest.assertSimilar(makeTitle(\"1f you c4n r34d 7h15, you r34lly n33d 2 g37 l41d\"), \"1f You C4n R34d 7h15, You R34lly N33d 2 G37 L41d\");\nTest.assertSimilar(makeTitle(\"PIZZA PIZZA PIZZA\"), \"PIZZA PIZZA PIZZA\");",
    "new_tests": "const makeTitle = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(makeTitle('I am a title')).toEqual('I Am A Title');\n        expect(makeTitle('I AM A TITLE')).toEqual('I AM A TITLE');\n        expect(makeTitle('i aM a tITLE')).toEqual('I AM A TITLE');\n        expect(makeTitle('the first letter of every word is capitalized')).toEqual('The First Letter Of Every Word Is Capitalized');\n        expect(makeTitle('I Like Pizza')).toEqual('I Like Pizza');\n        expect(makeTitle('Don\\'t count your ChiCKens BeFore They HatCh')).toEqual('Don\\'t Count Your ChiCKens BeFore They HatCh');\n        expect(makeTitle('All generalizations are false, including this one')).toEqual('All Generalizations Are False, Including This One');\n        expect(makeTitle('Me and my wife lived happily for twenty years and then we met.')).toEqual('Me And My Wife Lived Happily For Twenty Years And Then We Met.');\n        expect(makeTitle('There are no stupid questions, just stupid people.')).toEqual('There Are No Stupid Questions, Just Stupid People.');\n        expect(makeTitle('1f you c4n r34d 7h15, you r34lly n33d 2 g37 l41d')).toEqual('1f You C4n R34d 7h15, You R34lly N33d 2 G37 L41d');\n        expect(makeTitle('PIZZA PIZZA PIZZA')).toEqual('PIZZA PIZZA PIZZA');\n    });\n});\n"
  },
  {
    "original_code": "function removeSpecialCharacters(str) {\n  \n}",
    "new_code": "function removeSpecialCharacters(str) {\n  // Your code here.\n}\n\nmodule.exports = removeSpecialCharacters;\n",
    "original_tests": "Test.assertEquals(removeSpecialCharacters(\"The quick brown fox!\"), \"The quick brown fox\")\nTest.assertEquals(removeSpecialCharacters(\"%fd76$fd(-)6GvKlO.\"), \"fd76fd-6GvKlO\")\nTest.assertEquals(removeSpecialCharacters(\"D0n$c sed 0di0 du1\"), \"D0nc sed 0di0 du1\")\nTest.assertEquals(removeSpecialCharacters(\"cat_pic.jpeg\"), \"cat_picjpeg\")\nTest.assertEquals(removeSpecialCharacters(\"519-555-8093\"), \"519-555-8093\")\nTest.assertEquals(removeSpecialCharacters(\"h-d+=rf[]_{}<>.,`~!@#$%^&*(|)\"), \"h-drf_\")\nTest.assertEquals(removeSpecialCharacters(\"Etiam#!!!!!,,, [`po%rta ~sem!] {male*su-ada} (ma*gna) mo^llis... eui$smod???\"), \"Etiam porta sem malesu-ada magna mollis euismod\")",
    "new_tests": "const removeSpecialCharacters = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(removeSpecialCharacters('The quick brown fox!')).toEqual('The quick brown fox');\n        expect(removeSpecialCharacters('%fd76$fd(-)6GvKlO.')).toEqual('fd76fd-6GvKlO');\n        expect(removeSpecialCharacters('D0n$c sed 0di0 du1')).toEqual('D0nc sed 0di0 du1');\n        expect(removeSpecialCharacters('cat_pic.jpeg')).toEqual('cat_picjpeg');\n        expect(removeSpecialCharacters('519-555-8093')).toEqual('519-555-8093');\n        expect(removeSpecialCharacters('h-d+=rf[]_{}<>.,`~!@#$%^&*(|)')).toEqual('h-drf_');\n        expect(removeSpecialCharacters('Etiam#!!!!!,,, [`po%rta ~sem!] {male*su-ada} (ma*gna) mo^llis... eui$smod???')).toEqual('Etiam porta sem malesu-ada magna mollis euismod');\n    });\n});\n"
  },
  {
    "original_code": "function sumTwoSmallestNums(arr) {\n  \n}",
    "new_code": "function sumTwoSmallestNums(arr) {\n  // Your code here.\n}\n\nmodule.exports = sumTwoSmallestNums;\n",
    "original_tests": "Test.assertEquals(sumTwoSmallestNums([19, 5, 42, 2, 77]), 7);\nTest.assertEquals(sumTwoSmallestNums([10, 343445353, 3453445, 3453545353453]), 3453455);\nTest.assertEquals(sumTwoSmallestNums([2, 9, 6, -1]), 8);\nTest.assertEquals(sumTwoSmallestNums([879, 953, 694, -847, 342, 221, -91, -723, 791, -587]), 563);\nTest.assertEquals(sumTwoSmallestNums([3683, 2902, 3951, -475, 1617, -2385]), 4519);\nTest.assertEquals(sumTwoSmallestNums([280, 134, 108]), 242);\nTest.assertEquals(sumTwoSmallestNums([280, 134, 108, 1]), 109);\nTest.assertEquals(sumTwoSmallestNums([321, 406, -176]), 727);\nTest.assertEquals(sumTwoSmallestNums([1, 1, 1, 1]), 2);\nTest.assertEquals(sumTwoSmallestNums([-1, -1, 1, 1]), 2);",
    "new_tests": "const sumTwoSmallestNums = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(sumTwoSmallestNums([19, 5, 42, 2, 77])).toEqual(7);\n        expect(sumTwoSmallestNums([10, 343445353, 3453445, 3453545353453])).toEqual(3453455);\n        expect(sumTwoSmallestNums([2, 9, 6, -1])).toEqual(8);\n        expect(sumTwoSmallestNums([879, 953, 694, -847, 342, 221, -91, -723, 791, -587])).toEqual(563);\n        expect(sumTwoSmallestNums([3683, 2902, 3951, -475, 1617, -2385])).toEqual(4519);\n        expect(sumTwoSmallestNums([280, 134, 108])).toEqual(242);\n        expect(sumTwoSmallestNums([280, 134, 108, 1])).toEqual(109);\n        expect(sumTwoSmallestNums([321, 406, -176])).toEqual(727);\n        expect(sumTwoSmallestNums([1, 1, 1, 1])).toEqual(2);\n        expect(sumTwoSmallestNums([-1, -1, 1, 1])).toEqual(2);\n    });\n});\n"
  },
  {
    "original_code": "function uniqueSort(arr) {\n  \n}",
    "new_code": "function uniqueSort(arr) {\n  // Your code here.\n}\n\nmodule.exports = uniqueSort;\n",
    "original_tests": "Test.assertSimilar(\n  uniqueSort([1, 5, 8, 2, 3, 4, 4, 4, 10]),\n  [1, 2, 3, 4, 5, 8, 10]\n);\n\nTest.assertSimilar(\n\tuniqueSort([1, 2, 5, 4, 7, 7, 7]),\n  [1, 2, 4, 5, 7]\n);\n\nTest.assertSimilar(\n\tuniqueSort([7, 6, 5, 4, 3, 2, 1, 0, 1]),\n  [0, 1, 2, 3, 4, 5, 6, 7]\n);\n\nTest.assertSimilar(\n\tuniqueSort([3, 6, 5, 4, 3, 27, 1, 100, 1]),\n  [1, 3, 4, 5, 6, 27, 100]\n);\n\nTest.assertSimilar(\n\tuniqueSort([-9, -3.1414, -87, 8, -4.323827, -3.1415, -3.1415]),\n  [-87, -9, -4.323827, -3.1415, -3.1414, 8]\n);",
    "new_tests": "const uniqueSort = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(uniqueSort([1, 5, 8, 2, 3, 4, 4, 4, 10])).toEqual([1, 2, 3, 4, 5, 8, 10]);\n        expect(uniqueSort([1, 2, 5, 4, 7, 7, 7])).toEqual([1, 2, 4, 5, 7]);\n        expect(uniqueSort([7, 6, 5, 4, 3, 2, 1, 0, 1])).toEqual([0, 1, 2, 3, 4, 5, 6, 7]);\n        expect(uniqueSort([3, 6, 5, 4, 3, 27, 1, 100, 1])).toEqual([1, 3, 4, 5, 6, 27, 100]);\n        expect(uniqueSort([-9, -3.1414, -87, 8, -4.323827, -3.1415, -3.1415])).toEqual([-87, -9, -4.323827, -3.1415, -3.1414, 8]);\n    });\n});\n"
  },
  {
    "original_code": "function reverse(str) {\n  \n}",
    "new_code": "function reverse(str) {\n  // Your code here.\n}\n\nmodule.exports = reverse;\n",
    "original_tests": "Test.assertEquals(reverse(\"Reverse\"), \"esreveR\");\nTest.assertEquals(reverse(\"This is a typical sentence.\"), \"This is a lacipyt .ecnetnes\");\nTest.assertEquals(reverse(\"The dog is big.\"), \"The dog is big.\");\nTest.assertEquals(reverse(\"Reverse the order of every word greater than or equal to five characters.\"), \"esreveR the redro of yreve word retaerg than or lauqe to five .sretcarahc\");\nTest.assertEquals(reverse(\"Lets all be unique together until we realise we are all the same.\"), \"Lets all be euqinu rehtegot litnu we esilaer we are all the .emas\");\nTest.assertEquals(reverse(\"The old apple revels in its authority.\"), \"The old elppa slever in its .ytirohtua\");\nTest.assertEquals(reverse(\"The shooter says goodbye to his love.\"), \"The retoohs says eybdoog to his .evol\");\nTest.assertEquals(reverse(\"Please wait outside of the house.\"), \"esaelP wait edistuo of the .esuoh\");\nTest.assertEquals(reverse(\"Two seats were vacant.\"), \"Two staes were .tnacav\");\nTest.assertEquals(reverse(\"Sixty-Four comes asking for bread.\"), \"ruoF-ytxiS semoc gniksa for .daerb\");",
    "new_tests": "const reverse = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(reverse('Reverse')).toEqual('esreveR');\n        expect(reverse('This is a typical sentence.')).toEqual('This is a lacipyt .ecnetnes');\n        expect(reverse('The dog is big.')).toEqual('The dog is big.');\n        expect(reverse('Reverse the order of every word greater than or equal to five characters.')).toEqual('esreveR the redro of yreve word retaerg than or lauqe to five .sretcarahc');\n        expect(reverse('Lets all be unique together until we realise we are all the same.')).toEqual('Lets all be euqinu rehtegot litnu we esilaer we are all the .emas');\n        expect(reverse('The old apple revels in its authority.')).toEqual('The old elppa slever in its .ytirohtua');\n        expect(reverse('The shooter says goodbye to his love.')).toEqual('The retoohs says eybdoog to his .evol');\n        expect(reverse('Please wait outside of the house.')).toEqual('esaelP wait edistuo of the .esuoh');\n        expect(reverse('Two seats were vacant.')).toEqual('Two staes were .tnacav');\n        expect(reverse('Sixty-Four comes asking for bread.')).toEqual('ruoF-ytxiS semoc gniksa for .daerb');\n    });\n});\n"
  },
  {
    "original_code": "function validateEmail(str) {\n  \n}",
    "new_code": "function validateEmail(str) {\n  // Your code here.\n}\n\nmodule.exports = validateEmail;\n",
    "original_tests": "Test.assertEquals(validateEmail('@edabit.com'), false)\nTest.assertEquals(validateEmail('@edabit'), false)\nTest.assertEquals(validateEmail('matt@edabit.com'), true)\nTest.assertEquals(validateEmail(''), false, \"Don't forget about empty strings!\")\nTest.assertEquals(validateEmail('hello.gmail@com'), false)\nTest.assertEquals(validateEmail('bill.gates@microsoft.com'), true)\nTest.assertEquals(validateEmail('hello@email'), false)\nTest.assertEquals(validateEmail('%^%$#%^%'), false)\nTest.assertEquals(validateEmail('www.email.com'), false)\nTest.assertEquals(validateEmail('email'), false)",
    "new_tests": "const validateEmail = require('./code');\n\ndescribe('Tests', () => {\n    test('Don\\'t forget about empty strings!', () => {\n        expect(validateEmail('')).toEqual(false);\n    });\n    \n    test('the tests', () => {\n        expect(validateEmail('@edabit.com')).toEqual(false);\n        expect(validateEmail('@edabit')).toEqual(false);\n        expect(validateEmail('matt@edabit.com')).toEqual(true);\n        expect(validateEmail('hello.gmail@com')).toEqual(false);\n        expect(validateEmail('bill.gates@microsoft.com')).toEqual(true);\n        expect(validateEmail('hello@email')).toEqual(false);\n        expect(validateEmail('%^%$#%^%')).toEqual(false);\n        expect(validateEmail('www.email.com')).toEqual(false);\n        expect(validateEmail('email')).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function maskify(str) {\n  \n}",
    "new_code": "function maskify(str) {\n  // Your code here.\n}\n\nmodule.exports = maskify;\n",
    "original_tests": "Test.assertEquals(maskify(\"4556364607935616\"), \"############5616\")\nTest.assertEquals(maskify(\"64607935616\"), \"#######5616\")\nTest.assertEquals(maskify(\"1\"), \"1\")\nTest.assertEquals(maskify(\"\"), \"\")\nTest.assertEquals(maskify(\"tBy>L/cMe+?<j:6n;C~H\"), \"################;C~H\")\nTest.assertEquals(maskify(\"12\"), \"12\")\nTest.assertEquals(maskify(\"8Ikhlf6yoxPOwi5cB014eWbRumj7vJ\"), \"##########################j7vJ\")\nTest.assertEquals(maskify(\"123\"), \"123\")\nTest.assertEquals(maskify(\")E$aCU=e\\\"_\"), \"######=e\\\"_\")\nTest.assertEquals(maskify(\"2673951408\"), \"######1408\")\nTest.assertEquals(maskify(\"1234\"), \"1234\")",
    "new_tests": "const maskify = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(maskify('4556364607935616')).toEqual('############5616');\n        expect(maskify('64607935616')).toEqual('#######5616');\n        expect(maskify('1')).toEqual('1');\n        expect(maskify('')).toEqual('');\n        expect(maskify('tBy>L/cMe+?<j:6n;C~H')).toEqual('################;C~H');\n        expect(maskify('12')).toEqual('12');\n        expect(maskify('8Ikhlf6yoxPOwi5cB014eWbRumj7vJ')).toEqual('##########################j7vJ');\n        expect(maskify('123')).toEqual('123');\n        expect(maskify(')E$aCU=e\"_')).toEqual('######=e\"_');\n        expect(maskify('2673951408')).toEqual('######1408');\n        expect(maskify('1234')).toEqual('1234');\n    });\n});\n"
  },
  {
    "original_code": "function matrix(x, y, z) {\n  \n}",
    "new_code": "function matrix(x, y, z) {\n  // Your code here.\n}\n\nmodule.exports = matrix;\n",
    "original_tests": "Test.assertSimilar(matrix(3, 4, 0), [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);\nTest.assertSimilar(matrix(2, 3, \"#\"), [['#', '#', '#'], ['#', '#', '#']]);\nTest.assertSimilar(matrix(2, 3, -4), [[-4, -4, -4], [-4, -4, -4]]);\nTest.assertSimilar(matrix(1, 2, 0), [[0, 0]]);",
    "new_tests": "const matrix = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(matrix(3, 4, 0)).toEqual([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);\n        expect(matrix(2, 3, '#')).toEqual([['#', '#', '#'], ['#', '#', '#']]);\n        expect(matrix(2, 3, -4)).toEqual([[-4, -4, -4], [-4, -4, -4]]);\n        expect(matrix(1, 2, 0)).toEqual([[0, 0]]);\n    });\n});\n"
  },
  {
    "original_code": "function countOnes(i) {\n  \n}",
    "new_code": "function countOnes(i) {\n  // Your code here.\n}\n\nmodule.exports = countOnes;\n",
    "original_tests": "Test.assertEquals(countOnes(12), 2)\nTest.assertEquals(countOnes(0), 0)\nTest.assertEquals(countOnes(100), 3)\nTest.assertEquals(countOnes(101), 4)\nTest.assertEquals(countOnes(999), 8)\nTest.assertEquals(countOnes(1e9), 13)\nTest.assertEquals(countOnes(123456789), 16)\nTest.assertEquals(countOnes(1234567890), 12)",
    "new_tests": "const countOnes = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(countOnes(12)).toEqual(2);\n        expect(countOnes(0)).toEqual(0);\n        expect(countOnes(100)).toEqual(3);\n        expect(countOnes(101)).toEqual(4);\n        expect(countOnes(999)).toEqual(8);\n        expect(countOnes(1000000000)).toEqual(13);\n        expect(countOnes(123456789)).toEqual(16);\n        expect(countOnes(1234567890)).toEqual(12);\n    });\n});\n"
  },
  {
    "original_code": "function validatePIN(pin) {\n  \n}",
    "new_code": "function validatePIN(pin) {\n  // Your code here.\n}\n\nmodule.exports = validatePIN;\n",
    "original_tests": "Test.assertEquals(validatePIN(\"1234\"), true)\nTest.assertEquals(validatePIN(\"12345\"), false)\nTest.assertEquals(validatePIN(\"a234\"), false)\nTest.assertEquals(validatePIN(\"\"), false)\nTest.assertEquals(validatePIN(\"%234\"), false)\nTest.assertEquals(validatePIN(\"`234\"), false)\nTest.assertEquals(validatePIN(\"@234\"), false)\nTest.assertEquals(validatePIN(\"#234\"), false)\nTest.assertEquals(validatePIN(\"$234\"), false)\nTest.assertEquals(validatePIN(\"*234\"), false)\nTest.assertEquals(validatePIN(\"5678\"), true)\nTest.assertEquals(validatePIN(\"^234\"), false)\nTest.assertEquals(validatePIN(\"(234\"), false)\nTest.assertEquals(validatePIN(\")234\"), false)\nTest.assertEquals(validatePIN(\"123456\"), true)\nTest.assertEquals(validatePIN(\"-234\"), false)\nTest.assertEquals(validatePIN(\"_234\"), false)\nTest.assertEquals(validatePIN(\"+234\"), false)\nTest.assertEquals(validatePIN(\"=234\"), false)\nTest.assertEquals(validatePIN(\"?234\"), false)",
    "new_tests": "const validatePIN = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(validatePIN('1234')).toEqual(true);\n        expect(validatePIN('12345')).toEqual(false);\n        expect(validatePIN('a234')).toEqual(false);\n        expect(validatePIN('')).toEqual(false);\n        expect(validatePIN('%234')).toEqual(false);\n        expect(validatePIN('`234')).toEqual(false);\n        expect(validatePIN('@234')).toEqual(false);\n        expect(validatePIN('#234')).toEqual(false);\n        expect(validatePIN('$234')).toEqual(false);\n        expect(validatePIN('*234')).toEqual(false);\n        expect(validatePIN('5678')).toEqual(true);\n        expect(validatePIN('^234')).toEqual(false);\n        expect(validatePIN('(234')).toEqual(false);\n        expect(validatePIN(')234')).toEqual(false);\n        expect(validatePIN('123456')).toEqual(true);\n        expect(validatePIN('-234')).toEqual(false);\n        expect(validatePIN('_234')).toEqual(false);\n        expect(validatePIN('+234')).toEqual(false);\n        expect(validatePIN('=234')).toEqual(false);\n        expect(validatePIN('?234')).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function isAnagram(s1, s2) {\n  \n}",
    "new_code": "function isAnagram(s1, s2) {\n  // Your code here.\n}\n\nmodule.exports = isAnagram;\n",
    "original_tests": "Test.assertEquals(isAnagram('cristian', 'Cristina'), true);\nTest.assertEquals(isAnagram('Dave Barry', 'Ray Adverb'), true);\nTest.assertEquals(isAnagram('Nope', 'Note'), false);\nTest.assertEquals(isAnagram('Apple', 'Appeal'), false);",
    "new_tests": "const isAnagram = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isAnagram('cristian', 'Cristina')).toEqual(true);\n        expect(isAnagram('Dave Barry', 'Ray Adverb')).toEqual(true);\n        expect(isAnagram('Nope', 'Note')).toEqual(false);\n        expect(isAnagram('Apple', 'Appeal')).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function isValidPhoneNumber(str) {\n  \n}",
    "new_code": "function isValidPhoneNumber(str) {\n  // Your code here.\n}\n\nmodule.exports = isValidPhoneNumber;\n",
    "original_tests": "Test.assertEquals(isValidPhoneNumber(\"(123) 456-7890\"), true);\nTest.assertEquals(isValidPhoneNumber(\"(1111)555 2345\"), false);\nTest.assertEquals(isValidPhoneNumber(\"(098) 123 4567\"), false);\nTest.assertEquals(isValidPhoneNumber(\"(123)456-7890\"), false);\nTest.assertEquals(isValidPhoneNumber(\"abc(123)456-7890\"), false);\nTest.assertEquals(isValidPhoneNumber(\"(123)456-7890abc\"), false);\nTest.assertEquals(isValidPhoneNumber(\"abc(123)456-7890abc\"), false);\nTest.assertEquals(isValidPhoneNumber(\"abc(123) 456-7890\"), false);\nTest.assertEquals(isValidPhoneNumber(\"(123) 456-7890abc\"), false);\nTest.assertEquals(isValidPhoneNumber(\"abc(123) 456-7890abc\"), false);\nTest.assertEquals(isValidPhoneNumber(\"(123)-456-7890\"), false);\nTest.assertEquals(isValidPhoneNumber(\"(123)_456-7890\"), false);\nTest.assertEquals(isValidPhoneNumber(\"-123) 456-7890\"), false);\nTest.assertEquals(isValidPhoneNumber(\"(519) 505-6498\"), true);",
    "new_tests": "const isValidPhoneNumber = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isValidPhoneNumber('(123) 456-7890')).toEqual(true);\n        expect(isValidPhoneNumber('(1111)555 2345')).toEqual(false);\n        expect(isValidPhoneNumber('(098) 123 4567')).toEqual(false);\n        expect(isValidPhoneNumber('(123)456-7890')).toEqual(false);\n        expect(isValidPhoneNumber('abc(123)456-7890')).toEqual(false);\n        expect(isValidPhoneNumber('(123)456-7890abc')).toEqual(false);\n        expect(isValidPhoneNumber('abc(123)456-7890abc')).toEqual(false);\n        expect(isValidPhoneNumber('abc(123) 456-7890')).toEqual(false);\n        expect(isValidPhoneNumber('(123) 456-7890abc')).toEqual(false);\n        expect(isValidPhoneNumber('abc(123) 456-7890abc')).toEqual(false);\n        expect(isValidPhoneNumber('(123)-456-7890')).toEqual(false);\n        expect(isValidPhoneNumber('(123)_456-7890')).toEqual(false);\n        expect(isValidPhoneNumber('-123) 456-7890')).toEqual(false);\n        expect(isValidPhoneNumber('(519) 505-6498')).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function uniqueInOrder(sequence) {\n  \n}",
    "new_code": "function uniqueInOrder(sequence) {\n  // Your code here.\n}\n\nmodule.exports = uniqueInOrder;\n",
    "original_tests": "Test.assertSimilar(uniqueInOrder(\"AAAABBBCCDAABBB\"), [\"A\", \"B\", \"C\", \"D\", \"A\", \"B\"])\nTest.assertSimilar(uniqueInOrder(\"ABBCcAD\"), [\"A\", \"B\", \"C\", \"c\", \"A\", \"D\"])\nTest.assertSimilar(uniqueInOrder([1, 2, 2, 3, 3]), [1, 2, 3])\nTest.assertSimilar(uniqueInOrder(\"12333355555522211133\"), [\"1\", \"2\", \"3\", \"5\", \"2\", \"1\", \"3\"])\nTest.assertSimilar(uniqueInOrder(\"uuUfffFgGggYtt76%5$$$\"), [\"u\", \"U\", \"f\", \"F\", \"g\", \"G\", \"g\", \"Y\", \"t\", \"7\", \"6\", \"%\", \"5\", \"$\"])\nTest.assertSimilar(uniqueInOrder([\"1\", \"2\", \"2\", \"3\", \"3\"]), [\"1\", \"2\", \"3\"])\nTest.assertSimilar(uniqueInOrder([3, 7, 3, 8, 4]), [3, 7, 3, 8, 4])\nTest.assertSimilar(uniqueInOrder(\"ABC\"), [\"A\", \"B\", \"C\"])\nTest.assertSimilar(uniqueInOrder(\"$$$%%%$$$%%%\"), [\"$\", \"%\", \"$\", \"%\"])\nTest.assertSimilar(uniqueInOrder([1, 1, 1, \"A\", \"B\", \"B\"]), [1, \"A\", \"B\"])",
    "new_tests": "const uniqueInOrder = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(uniqueInOrder('AAAABBBCCDAABBB')).toEqual(['A', 'B', 'C', 'D', 'A', 'B']);\n        expect(uniqueInOrder('ABBCcAD')).toEqual(['A', 'B', 'C', 'c', 'A', 'D']);\n        expect(uniqueInOrder([1, 2, 2, 3, 3])).toEqual([1, 2, 3]);\n        expect(uniqueInOrder('12333355555522211133')).toEqual(['1', '2', '3', '5', '2', '1', '3']);\n        expect(uniqueInOrder('uuUfffFgGggYtt76%5$$$')).toEqual(['u', 'U', 'f', 'F', 'g', 'G', 'g', 'Y', 't', '7', '6', '%', '5', '$']);\n        expect(uniqueInOrder(['1', '2', '2', '3', '3'])).toEqual(['1', '2', '3']);\n        expect(uniqueInOrder([3, 7, 3, 8, 4])).toEqual([3, 7, 3, 8, 4]);\n        expect(uniqueInOrder('ABC')).toEqual(['A', 'B', 'C']);\n        expect(uniqueInOrder('$$$%%%$$$%%%')).toEqual(['$', '%', '$', '%']);\n        expect(uniqueInOrder([1, 1, 1, 'A', 'B', 'B'])).toEqual([1, 'A', 'B']);\n    });\n});\n"
  },
  {
    "original_code": "function wurstIsBetter(str) {\n  \n}",
    "new_code": "function wurstIsBetter(str) {\n  // Your code here.\n}\n\nmodule.exports = wurstIsBetter;\n",
    "original_tests": "Test.assertEquals(wurstIsBetter(\"Sausage fests are like salami fests\"), \"Wurst fests are like Wurst fests\")\nTest.assertEquals(wurstIsBetter(\"Add the kielbasa and the reserved potatoes and stir through\"), \"Add the Wurst and the reserved potatoes and stir through\")\nTest.assertEquals(wurstIsBetter(\"Salami sandwiches, salami and cheese, salami on crackers\u2014 I couldn't get enough of the salty, spicy sausage\"), \"Wurst sandwiches, Wurst and cheese, Wurst on crackers\u2014 I couldn't get enough of the salty, spicy Wurst\")\nTest.assertEquals(wurstIsBetter(\"sich die Wurst vom Brot nehmen lassen\"), \"sich die Wurst vom Brot nehmen lassen\")\nTest.assertEquals(wurstIsBetter(\"Bratwurst and Rostbratwurst is a sausage made from finely minced pork and beef and usually grilled and served with sweet German mustard and a piece of bread or hard roll. It can be sliced and made into Currywurst by slathering it in a catchup-curry sauce.\"), \"Bratwurst and Rostbratwurst is a Wurst made from finely minced pork and beef and usually grilled and served with sweet German mustard and a piece of bread or hard roll. It can be sliced and made into Currywurst by slathering it in a catchup-curry sauce.\")\nTest.assertEquals(wurstIsBetter(\"Il n\u2019arr\u00eate pas de faire l\u2019andouille\"), \"Il n\u2019arr\u00eate pas de faire l\u2019Wurst\")\nTest.assertEquals(wurstIsBetter(\"Naem is a common way of preserving pork meat in several Southeast Asian countries, including Thailand, Laos, Cambodia and Vietnam\"), \"Wurst is a common way of preserving pork meat in several Southeast Asian countries, including Thailand, Laos, Cambodia and Vietnam\")\nTest.assertEquals(wurstIsBetter(\"The chipper group over at Orangatang recently dropped another wheel sensation; the Moronga\"), \"The chipper group over at Orangatang recently dropped another wheel sensation; the Wurst\")",
    "new_tests": "const wurstIsBetter = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(wurstIsBetter('Sausage fests are like salami fests')).toEqual('Wurst fests are like Wurst fests');\n        expect(wurstIsBetter('Add the kielbasa and the reserved potatoes and stir through')).toEqual('Add the Wurst and the reserved potatoes and stir through');\n        expect(wurstIsBetter('Salami sandwiches, salami and cheese, salami on crackers\u2014 I couldn\\'t get enough of the salty, spicy sausage')).toEqual('Wurst sandwiches, Wurst and cheese, Wurst on crackers\u2014 I couldn\\'t get enough of the salty, spicy Wurst');\n        expect(wurstIsBetter('sich die Wurst vom Brot nehmen lassen')).toEqual('sich die Wurst vom Brot nehmen lassen');\n        expect(wurstIsBetter('Bratwurst and Rostbratwurst is a sausage made from finely minced pork and beef and usually grilled and served with sweet German mustard and a piece of bread or hard roll. It can be sliced and made into Currywurst by slathering it in a catchup-curry sauce.')).toEqual('Bratwurst and Rostbratwurst is a Wurst made from finely minced pork and beef and usually grilled and served with sweet German mustard and a piece of bread or hard roll. It can be sliced and made into Currywurst by slathering it in a catchup-curry sauce.');\n        expect(wurstIsBetter('Il n\u2019arr\u00eate pas de faire l\u2019andouille')).toEqual('Il n\u2019arr\u00eate pas de faire l\u2019Wurst');\n        expect(wurstIsBetter('Naem is a common way of preserving pork meat in several Southeast Asian countries, including Thailand, Laos, Cambodia and Vietnam')).toEqual('Wurst is a common way of preserving pork meat in several Southeast Asian countries, including Thailand, Laos, Cambodia and Vietnam');\n        expect(wurstIsBetter('The chipper group over at Orangatang recently dropped another wheel sensation; the Moronga')).toEqual('The chipper group over at Orangatang recently dropped another wheel sensation; the Wurst');\n    });\n});\n"
  },
  {
    "original_code": "function removeSmallest(arr) {\n  \n}",
    "new_code": "function removeSmallest(arr) {\n  // Your code here.\n}\n\nmodule.exports = removeSmallest;\n",
    "original_tests": "Test.assertSimilar(removeSmallest([1, 2, 3, 4, 5]), [2, 3, 4, 5])\nTest.assertSimilar(removeSmallest([5, 3, 2, 1, 4]), [5, 3, 2, 4])\nTest.assertSimilar(removeSmallest([2, 2, 1, 2, 1]), [2, 2, 2, 1])\nTest.assertSimilar(removeSmallest([3, 1, 6, 7, 3, 7, 6]), [3, 6, 7, 3, 7, 6])\nTest.assertSimilar(removeSmallest([4, 4, 4, 1]), [4, 4, 4])\nTest.assertSimilar(removeSmallest([5, 4, 5, 3, 1, 1]), [5, 4, 5, 3, 1])\nTest.assertSimilar(removeSmallest([1, 5, 3]), [5, 3])\nTest.assertSimilar(removeSmallest([]), [])\nTest.assertSimilar(removeSmallest([6, 2, 5, 4, 8, 6, 3, 2, 7]), [6, 5, 4, 8, 6, 3, 2, 7])\nTest.assertSimilar(removeSmallest([3]), [])",
    "new_tests": "const removeSmallest = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(removeSmallest([1, 2, 3, 4, 5])).toEqual([2, 3, 4, 5]);\n        expect(removeSmallest([5, 3, 2, 1, 4])).toEqual([5, 3, 2, 4]);\n        expect(removeSmallest([2, 2, 1, 2, 1])).toEqual([2, 2, 2, 1]);\n        expect(removeSmallest([3, 1, 6, 7, 3, 7, 6])).toEqual([3, 6, 7, 3, 7, 6]);\n        expect(removeSmallest([4, 4, 4, 1])).toEqual([4, 4, 4]);\n        expect(removeSmallest([5, 4, 5, 3, 1, 1])).toEqual([5, 4, 5, 3, 1]);\n        expect(removeSmallest([1, 5, 3])).toEqual([5, 3]);\n        expect(removeSmallest([])).toEqual([]);\n        expect(removeSmallest([6, 2, 5, 4, 8, 6, 3, 2, 7])).toEqual([6, 5, 4, 8, 6, 3, 2, 7]);\n        expect(removeSmallest([3])).toEqual([]);\n    });\n});\n"
  },
  {
    "original_code": "function keysAndValues(obj) {\n  \n}",
    "new_code": "function keysAndValues(obj) {\n  // Your code here.\n}\n\nmodule.exports = keysAndValues;\n",
    "original_tests": "Test.assertSimilar(keysAndValues({a: 1, b: 2, c: 3}), [[\"a\", \"b\", \"c\"], [1, 2, 3]])\nTest.assertSimilar(keysAndValues({a: \"Apple\", b: \"Microsoft\", c: \"Google\"}), [[\"a\", \"b\", \"c\"], [\"Apple\", \"Microsoft\", \"Google\"]])\nTest.assertSimilar(keysAndValues({key1: true, key2: false, key3: undefined}), [[\"key1\", \"key2\", \"key3\"], [true, false, undefined]])\nTest.assertSimilar(keysAndValues({1: null, 2: null, 3: null}), [[\"1\", \"2\", \"3\"], [null, null, null]])\nTest.assertSimilar(keysAndValues({key1: \"cat\", key2: \"dog\", key3: null}), [[\"key1\", \"key2\", \"key3\"], [\"cat\", \"dog\", null]])",
    "new_tests": "const keysAndValues = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(keysAndValues({a: 1, b: 2, c: 3})).toEqual([['a', 'b', 'c'], [1, 2, 3]]);\n        expect(keysAndValues({a: 'Apple', b: 'Microsoft', c: 'Google'})).toEqual([['a', 'b', 'c'], ['Apple', 'Microsoft', 'Google']]);\n        expect(keysAndValues({key1: true, key2: false, key3: undefined})).toEqual([['key1', 'key2', 'key3'], [true, false, undefined]]);\n        expect(keysAndValues({1: undefined, 2: undefined, 3: undefined})).toEqual([['1', '2', '3'], [undefined, undefined, undefined]]);\n        expect(keysAndValues({key1: 'cat', key2: 'dog', key3: undefined})).toEqual([['key1', 'key2', 'key3'], ['cat', 'dog', undefined]]);\n    });\n});\n"
  },
  {
    "original_code": "function countPosSumNeg(arr) {\n  \n}",
    "new_code": "function countPosSumNeg(arr) {\n  // Your code here.\n}\n\nmodule.exports = countPosSumNeg;\n",
    "original_tests": "Test.assertSimilar(countPosSumNeg([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]), [10, -65])\nTest.assertSimilar(countPosSumNeg([92, 6, 73, -77, 81, -90, 99, 8, -85, 34]), [7, -252])\nTest.assertSimilar(countPosSumNeg([91, -4, 80, -73, -28]), [2, -105])\nTest.assertSimilar(countPosSumNeg([]), [])\nTest.assertSimilar(countPosSumNeg([69, 100, 28, 47, 53, -61, -24]), [5, -85])\nTest.assertSimilar(countPosSumNeg([5, 7, 9, -3, -7, 61, -24]), [4, -34])\nTest.assertSimilar(countPosSumNeg(null), [])\nTest.assertSimilar(countPosSumNeg([98, 51, -19, -97]), [2, -116])\nTest.assertSimilar(countPosSumNeg([-42, 3, -51, -64, 69, 77, -20, -5, 68, -76]), [4, -258])\nTest.assertSimilar(countPosSumNeg(null, null, null), [])",
    "new_tests": "const countPosSumNeg = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(countPosSumNeg([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15])).toEqual([10, -65]);\n        expect(countPosSumNeg([92, 6, 73, -77, 81, -90, 99, 8, -85, 34])).toEqual([7, -252]);\n        expect(countPosSumNeg([91, -4, 80, -73, -28])).toEqual([2, -105]);\n        expect(countPosSumNeg([])).toEqual([]);\n        expect(countPosSumNeg([69, 100, 28, 47, 53, -61, -24])).toEqual([5, -85]);\n        expect(countPosSumNeg([5, 7, 9, -3, -7, 61, -24])).toEqual([4, -34]);\n        expect(countPosSumNeg(undefined)).toEqual([]);\n        expect(countPosSumNeg([98, 51, -19, -97])).toEqual([2, -116]);\n        expect(countPosSumNeg([-42, 3, -51, -64, 69, 77, -20, -5, 68, -76])).toEqual([4, -258]);\n        expect(countPosSumNeg(undefined, undefined, undefined)).toEqual([]);\n    });\n});\n"
  },
  {
    "original_code": "function isIsogram(str) {\n  \n}",
    "new_code": "function isIsogram(str) {\n  // Your code here.\n}\n\nmodule.exports = isIsogram;\n",
    "original_tests": "Test.assertEquals(isIsogram(\"Algorism\"), true)\nTest.assertEquals(isIsogram(\"PasSword\"), false)\nTest.assertEquals(isIsogram(\"Dermatoglyphics\"), true)\nTest.assertEquals(isIsogram(\"Cat\"), true)\nTest.assertEquals(isIsogram(\"Filmography\"), true)\nTest.assertEquals(isIsogram(\"Consecutive\"), false)\nTest.assertEquals(isIsogram(\"Bankruptcies\"), true)\nTest.assertEquals(isIsogram(\"Unforgivable\"), true)\nTest.assertEquals(isIsogram(\"Unpredictably\"), true)\nTest.assertEquals(isIsogram(\"Moose\"), false)",
    "new_tests": "const isIsogram = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isIsogram('Algorism')).toEqual(true);\n        expect(isIsogram('PasSword')).toEqual(false);\n        expect(isIsogram('Dermatoglyphics')).toEqual(true);\n        expect(isIsogram('Cat')).toEqual(true);\n        expect(isIsogram('Filmography')).toEqual(true);\n        expect(isIsogram('Consecutive')).toEqual(false);\n        expect(isIsogram('Bankruptcies')).toEqual(true);\n        expect(isIsogram('Unforgivable')).toEqual(true);\n        expect(isIsogram('Unpredictably')).toEqual(true);\n        expect(isIsogram('Moose')).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function Magic(str) {\n  \n}",
    "new_code": "function Magic(str) {\n  // Your code here.\n}\n\nmodule.exports = Magic;\n",
    "original_tests": "Test.assertEquals(Magic('1 1 2011'),true,'magic date');\nTest.assertEquals(Magic('4 1 2001'),false,'is not a magic date');\nTest.assertEquals(Magic('2 4 2008'),true, 'magic date');\nTest.assertEquals(Magic('3 3 2009'),true, 'magic date');\nTest.assertEquals(Magic('5 2 2010'),true, 'magic date');\nTest.assertEquals(Magic('1 2 2011'),false, 'is not a magic date');\nTest.assertEquals(Magic('9 2 2011'),false, 'is not a magic date');\nTest.assertEquals(Magic('1 4 2011'),false, 'is not a magic date');",
    "new_tests": "const Magic = require('./code');\n\ndescribe('Tests', () => {\n    test('magic date', () => {\n        expect(Magic('1 1 2011')).toEqual(true);\n    });\n\ntest('is not a magic date', () => {\n        expect(Magic('4 1 2001')).toEqual(false);\n    });\n\ntest('magic date', () => {\n        expect(Magic('2 4 2008')).toEqual(true);\n    });\n\ntest('magic date', () => {\n        expect(Magic('3 3 2009')).toEqual(true);\n    });\n\ntest('magic date', () => {\n        expect(Magic('5 2 2010')).toEqual(true);\n    });\n\ntest('is not a magic date', () => {\n        expect(Magic('1 2 2011')).toEqual(false);\n    });\n\ntest('is not a magic date', () => {\n        expect(Magic('9 2 2011')).toEqual(false);\n    });\n\ntest('is not a magic date', () => {\n        expect(Magic('1 4 2011')).toEqual(false);\n    });\n    \n    test('the tests', () => {\n        \n    });\n});\n"
  },
  {
    "original_code": "function flipEndChars(str) {\n  \n}",
    "new_code": "function flipEndChars(str) {\n  // Your code here.\n}\n\nmodule.exports = flipEndChars;\n",
    "original_tests": "Test.assertEquals(flipEndChars(\"Cat, dog, and mouse.\"), \".at, dog, and mouseC\");\nTest.assertEquals(flipEndChars(\"Anna, Banana\"), \"anna, BananA\");\nTest.assertEquals(flipEndChars(\"[]\"), \"][\");\nTest.assertEquals(flipEndChars(\"\"), \"Incompatible.\");\nTest.assertEquals(flipEndChars([1, 2, 3]), \"Incompatible.\");\nTest.assertEquals(flipEndChars(\"dfdkf49824fdfdfjhd\"), \"Two's a pair.\");\nTest.assertEquals(flipEndChars(\"#343473847#\"), \"Two's a pair.\");",
    "new_tests": "const flipEndChars = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(flipEndChars('Cat, dog, and mouse.')).toEqual('.at, dog, and mouseC');\n        expect(flipEndChars('Anna, Banana')).toEqual('anna, BananA');\n        expect(flipEndChars('[]')).toEqual('][');\n        expect(flipEndChars('')).toEqual('Incompatible.');\n        expect(flipEndChars([1, 2, 3])).toEqual('Incompatible.');\n        expect(flipEndChars('dfdkf49824fdfdfjhd')).toEqual('Two\\'s a pair.');\n        expect(flipEndChars('#343473847#')).toEqual('Two\\'s a pair.');\n    });\n});\n"
  },
  {
    "original_code": "function days(month, year) {\n  \n}",
    "new_code": "function days(month, year) {\n  // Your code here.\n}\n\nmodule.exports = days;\n",
    "original_tests": "Test.assertEquals(days(1, 2018), 31, 'Should show the correct day amount for January');\nTest.assertEquals(days(2, 2018), 28, 'Should show the correct day amount for February on a non-leap year');\nTest.assertEquals(days(3, 2018), 31, 'Should show the correct day amount for March');\nTest.assertEquals(days(4, 2018), 30, 'Should show the correct day amount for April');\nTest.assertEquals(days(5, 2018), 31, 'Should show the correct day amount for May');\nTest.assertEquals(days(6, 2018), 30, 'Should show the correct day amount for June');\nTest.assertEquals(days(7, 2018), 31, 'Should show the correct day amount for July');\nTest.assertEquals(days(8, 2018), 31, 'Should show the correct day amount for August');\nTest.assertEquals(days(9, 2018), 30, 'Should show the correct day amount for September');\nTest.assertEquals(days(10, 2018), 31, 'Should show the correct day amount for October');\nTest.assertEquals(days(11, 2018), 30, 'Should show the correct day amount for November');\nTest.assertEquals(days(12, 2018), 31, 'Should show the correct day amount for December');\nTest.assertEquals(days(2, 2004), 29, 'Should show the correct day amount for February on a leap year that is divisible by 4 but not 100');\nTest.assertEquals(days(2, 1800), 28, 'Should show the correct day amount for February on a leap year that is divisible by 100 but not 400 ');\nTest.assertEquals(days(2, 1600), 29, 'Should show the correct day amount for February on a leap year that is divisible by 100 and 400');",
    "new_tests": "const days = require('./code');\n\ndescribe('Tests', () => {\n    test('Should show the correct day amount for January', () => {\n        expect(days(1, 2018)).toEqual(31);\n    });\n\ntest('Should show the correct day amount for February on a non-leap year', () => {\n        expect(days(2, 2018)).toEqual(28);\n    });\n\ntest('Should show the correct day amount for March', () => {\n        expect(days(3, 2018)).toEqual(31);\n    });\n\ntest('Should show the correct day amount for April', () => {\n        expect(days(4, 2018)).toEqual(30);\n    });\n\ntest('Should show the correct day amount for May', () => {\n        expect(days(5, 2018)).toEqual(31);\n    });\n\ntest('Should show the correct day amount for June', () => {\n        expect(days(6, 2018)).toEqual(30);\n    });\n\ntest('Should show the correct day amount for July', () => {\n        expect(days(7, 2018)).toEqual(31);\n    });\n\ntest('Should show the correct day amount for August', () => {\n        expect(days(8, 2018)).toEqual(31);\n    });\n\ntest('Should show the correct day amount for September', () => {\n        expect(days(9, 2018)).toEqual(30);\n    });\n\ntest('Should show the correct day amount for October', () => {\n        expect(days(10, 2018)).toEqual(31);\n    });\n\ntest('Should show the correct day amount for November', () => {\n        expect(days(11, 2018)).toEqual(30);\n    });\n\ntest('Should show the correct day amount for December', () => {\n        expect(days(12, 2018)).toEqual(31);\n    });\n\ntest('Should show the correct day amount for February on a leap year that is divisible by 4 but not 100', () => {\n        expect(days(2, 2004)).toEqual(29);\n    });\n\ntest('Should show the correct day amount for February on a leap year that is divisible by 100 but not 400 ', () => {\n        expect(days(2, 1800)).toEqual(28);\n    });\n\ntest('Should show the correct day amount for February on a leap year that is divisible by 100 and 400', () => {\n        expect(days(2, 1600)).toEqual(29);\n    });\n    \n    test('the tests', () => {\n        \n    });\n});\n"
  },
  {
    "original_code": "function isPrime(num) {\n  \n}",
    "new_code": "function isPrime(num) {\n  // Your code here.\n}\n\nmodule.exports = isPrime;\n",
    "original_tests": "Test.assertEquals(isPrime(1), false)\nTest.assertEquals(isPrime(2), true)\nTest.assertEquals(isPrime(3), true)\nTest.assertEquals(isPrime(4), false)\nTest.assertEquals(isPrime(5), true)\nTest.assertEquals(isPrime(6), false)\nTest.assertEquals(isPrime(7), true)\nTest.assertEquals(isPrime(8), false)\nTest.assertEquals(isPrime(9), false)\nTest.assertEquals(isPrime(10), false)\nTest.assertEquals(isPrime(11), true)\nTest.assertEquals(isPrime(102), false)\nTest.assertEquals(isPrime(103), true)",
    "new_tests": "const isPrime = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isPrime(1)).toEqual(false);\n        expect(isPrime(2)).toEqual(true);\n        expect(isPrime(3)).toEqual(true);\n        expect(isPrime(4)).toEqual(false);\n        expect(isPrime(5)).toEqual(true);\n        expect(isPrime(6)).toEqual(false);\n        expect(isPrime(7)).toEqual(true);\n        expect(isPrime(8)).toEqual(false);\n        expect(isPrime(9)).toEqual(false);\n        expect(isPrime(10)).toEqual(false);\n        expect(isPrime(11)).toEqual(true);\n        expect(isPrime(102)).toEqual(false);\n        expect(isPrime(103)).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function indexOfCaps(str) {\n  \n}",
    "new_code": "function indexOfCaps(str) {\n  // Your code here.\n}\n\nmodule.exports = indexOfCaps;\n",
    "original_tests": "Test.assertSimilar(indexOfCaps(\"eDaBiT\"), [1, 3, 5])\nTest.assertSimilar(indexOfCaps(\"eQuINoX\"), [1, 3, 4, 6])\nTest.assertSimilar(indexOfCaps(\"determine\"), [])\nTest.assertSimilar(indexOfCaps(\"STRIKE\"), [0, 1, 2, 3, 4, 5])\nTest.assertSimilar(indexOfCaps(\"sUn\"), [1])\nTest.assertSimilar(indexOfCaps(\"SpiDer\"), [0, 3])\nTest.assertSimilar(indexOfCaps(\"accOmpAnY\"), [3, 6, 8])\nTest.assertSimilar(indexOfCaps(\"@xCE#8S#i*$en\"), [2, 3, 6])\nTest.assertSimilar(indexOfCaps(\"1854036297\"), [])\nTest.assertSimilar(indexOfCaps(\"Fo?.arg~{86tUx=|OqZ!\"), [0, 12, 16, 18])",
    "new_tests": "const indexOfCaps = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(indexOfCaps('eDaBiT')).toEqual([1, 3, 5]);\n        expect(indexOfCaps('eQuINoX')).toEqual([1, 3, 4, 6]);\n        expect(indexOfCaps('determine')).toEqual([]);\n        expect(indexOfCaps('STRIKE')).toEqual([0, 1, 2, 3, 4, 5]);\n        expect(indexOfCaps('sUn')).toEqual([1]);\n        expect(indexOfCaps('SpiDer')).toEqual([0, 3]);\n        expect(indexOfCaps('accOmpAnY')).toEqual([3, 6, 8]);\n        expect(indexOfCaps('@xCE#8S#i*$en')).toEqual([2, 3, 6]);\n        expect(indexOfCaps('1854036297')).toEqual([]);\n        expect(indexOfCaps('Fo?.arg~{86tUx=|OqZ!')).toEqual([0, 12, 16, 18]);\n    });\n});\n"
  },
  {
    "original_code": "function counterpartCharCode(char) {\n  \n}",
    "new_code": "function counterpartCharCode(char) {\n  // Your code here.\n}\n\nmodule.exports = counterpartCharCode;\n",
    "original_tests": "// Normal letters\nTest.assertEquals(counterpartCharCode('a'), 65);\nTest.assertEquals(counterpartCharCode('A'), 97);\nTest.assertEquals(counterpartCharCode('l'), 76);\nTest.assertEquals(counterpartCharCode('L'), 108);\nTest.assertEquals(counterpartCharCode('z'), 90);\nTest.assertEquals(counterpartCharCode('Z'), 122);\n\n// Accented / weird letters\nTest.assertEquals(counterpartCharCode('\u00e8'), 200);\nTest.assertEquals(counterpartCharCode('\u00c8'), 232);\nTest.assertEquals(counterpartCharCode('\u0152'), 339);\nTest.assertEquals(counterpartCharCode('\u0153'), 338);\nTest.assertEquals(counterpartCharCode('\u023a'), 11365);\nTest.assertEquals(counterpartCharCode('\u2c65'), 570);\n\n// These don't have a counterpart, you should return the input's char code\nTest.assertEquals(counterpartCharCode('5'), 53);\nTest.assertEquals(counterpartCharCode('$'), 36);",
    "new_tests": "const counterpartCharCode = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(counterpartCharCode('a')).toEqual(65);\n        expect(counterpartCharCode('A')).toEqual(97);\n        expect(counterpartCharCode('l')).toEqual(76);\n        expect(counterpartCharCode('L')).toEqual(108);\n        expect(counterpartCharCode('z')).toEqual(90);\n        expect(counterpartCharCode('Z')).toEqual(122);\n        expect(counterpartCharCode('\u00e8')).toEqual(200);\n        expect(counterpartCharCode('\u00c8')).toEqual(232);\n        expect(counterpartCharCode('\u0152')).toEqual(339);\n        expect(counterpartCharCode('\u0153')).toEqual(338);\n        expect(counterpartCharCode('\u023a')).toEqual(11365);\n        expect(counterpartCharCode('\u2c65')).toEqual(570);\n        expect(counterpartCharCode('5')).toEqual(53);\n        expect(counterpartCharCode('$')).toEqual(36);\n    });\n});\n"
  },
  {
    "original_code": "function isCircleCollision(c1,c2) {\n  \n}",
    "new_code": "function isCircleCollision(c1, c2) {\n  // Your code here.\n}\n\nmodule.exports = isCircleCollision;\n",
    "original_tests": "Test.assertEquals(isCircleCollision([10,0,0],[10,10,10]), true);\nTest.assertEquals(isCircleCollision([10,0,0],[5,0,0]), true);\nTest.assertEquals(isCircleCollision([1,0,0],[1,0,0]), true);\nTest.assertEquals(isCircleCollision([5,0,0],[5,10,10]), false);\nTest.assertEquals(isCircleCollision([1,0,0],[1,10,10]), false);",
    "new_tests": "const isCircleCollision = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isCircleCollision([10, 0, 0], [10, 10, 10])).toEqual(true);\n        expect(isCircleCollision([10, 0, 0], [5, 0, 0])).toEqual(true);\n        expect(isCircleCollision([1, 0, 0], [1, 0, 0])).toEqual(true);\n        expect(isCircleCollision([5, 0, 0], [5, 10, 10])).toEqual(false);\n        expect(isCircleCollision([1, 0, 0], [1, 10, 10])).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function isPalindrome(str) {\n  \n}",
    "new_code": "function isPalindrome(str) {\n  // Your code here.\n}\n\nmodule.exports = isPalindrome;\n",
    "original_tests": "Test.assertEquals(isPalindrome('A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!'), true);\nTest.assertEquals(isPalindrome('Neuquen'), true);\nTest.assertEquals(isPalindrome('Not a palindrome'), false);",
    "new_tests": "const isPalindrome = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isPalindrome('A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!')).toEqual(true);\n        expect(isPalindrome('Neuquen')).toEqual(true);\n        expect(isPalindrome('Not a palindrome')).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function shortestDistance(str) {\n  \n}",
    "new_code": "function shortestDistance(str) {\n  // Your code here.\n}\n\nmodule.exports = shortestDistance;\n",
    "original_tests": "Test.assertEquals(shortestDistance('1,1,2,1'), 1);\nTest.assertEquals(shortestDistance('1,1,3,1'), 2);\nTest.assertEquals(shortestDistance('-5,1,3,1'), 8);\nTest.assertEquals(shortestDistance('-5,2,3,1'), 8.06);\nTest.assertEquals(shortestDistance('18174,773931,851747,490653'), 880392.17);\nTest.assertEquals(shortestDistance('737017,82252,882429,883228'), 814068.3);\nTest.assertEquals(shortestDistance('700230,523734,877217,172766'), 393068.61);\nTest.assertEquals(shortestDistance('354972,19774,976623,664356'), 895508.75);\nTest.assertEquals(shortestDistance('587568,609626,654834,18784'), 594658.71);\nTest.assertEquals(shortestDistance('66662,790481,873587,545905'), 843175.77);\nTest.assertEquals(shortestDistance('332500,825806,905569,98242'), 926151.96);\nTest.assertEquals(shortestDistance('699436,718399,148249,268862'), 711259.88);\nTest.assertEquals(shortestDistance('569116,693885,298926,707866'), 270551.48);\nTest.assertEquals(shortestDistance('31746,315604,33219,558330'), 242730.47);\nTest.assertEquals(shortestDistance('269374,778748,642370,575892'), 424589.89);\nTest.assertEquals(shortestDistance('31569,18273,773659,944231'), 1186632.12);\nTest.assertEquals(shortestDistance('939517,332491,433853,846748'), 721218.65);\nTest.assertEquals(shortestDistance('683331,360682,350306,419799'), 338231.39);\nTest.assertEquals(shortestDistance('432164,634064,426613,762549'), 128604.86);\nTest.assertEquals(shortestDistance('104921,837065,896870,361030'), 924008.95);\nTest.assertEquals(shortestDistance('922238,809131,213159,45327'), 1042204.19);\nTest.assertEquals(shortestDistance('758369,659880,695294,282443'), 382671.07);\nTest.assertEquals(shortestDistance('919543,155658,842376,916848'), 765091.47);\nTest.assertEquals(shortestDistance('584808,222082,926167,794435'), 666418.73);\nTest.assertEquals(shortestDistance('875800,489178,754311,314534'), 212744.22);\nTest.assertEquals(shortestDistance('696995,146484,394853,798083'), 718241.63);\nTest.assertEquals(shortestDistance('914890,520597,870213,598643'), 89928.93);\nTest.assertEquals(shortestDistance('793324,200650,498595,277727'), 304640.85);\nTest.assertEquals(shortestDistance('119956,978240,414949,858765'), 318268.98);\nTest.assertEquals(shortestDistance('894439,634194,904845,129983'), 504318.37);\nTest.assertEquals(shortestDistance('520277,802110,458152,477708'), 330297.1);\nTest.assertEquals(shortestDistance('338422,61534,693630,455807'), 530682.51);\nTest.assertEquals(shortestDistance('326475,507361,443150,995403'), 501794.83);\nTest.assertEquals(shortestDistance('605200,40283,99999,20835'), 505575.19);\nTest.assertEquals(shortestDistance('385263,547922,697516,153863'), 502776.72);\nTest.assertEquals(shortestDistance('490542,851632,523684,755368'), 101809.38);\nTest.assertEquals(shortestDistance('319016,40735,318348,512483'), 471748.47);\nTest.assertEquals(shortestDistance('676510,654662,413220,936024'), 385339.07);\nTest.assertEquals(shortestDistance('62095,384260,65760,834546'), 450300.91);\nTest.assertEquals(shortestDistance('360834,491279,297678,138687'), 358203.57);\nTest.assertEquals(shortestDistance('973288,619071,778859,969590'), 400831.89);\nTest.assertEquals(shortestDistance('668988,184022,15875,100158'), 658475.33);\nTest.assertEquals(shortestDistance('457183,48000,68279,402987'), 526556.83);\nTest.assertEquals(shortestDistance('833743,981199,628205,209429'), 798670.65);\nTest.assertEquals(shortestDistance('369614,533996,563940,20842'), 548716.34);\nTest.assertEquals(shortestDistance('94270,984126,249933,818517'), 227282.45);\nTest.assertEquals(shortestDistance('347817,705519,187676,298918'), 437000.59);\nTest.assertEquals(shortestDistance('589257,639901,207017,470775'), 417984.48);\nTest.assertEquals(shortestDistance('720501,533661,423905,831220'), 420131.58);\nTest.assertEquals(shortestDistance('376448,538260,703368,713873'), 371101.89);\nTest.assertEquals(shortestDistance('103436,743951,777056,34017'), 978657.34);\nTest.assertEquals(shortestDistance('479976,493641,625960,287062'), 252954.96);\nTest.assertEquals(shortestDistance('443616,635525,725621,880480'), 373536.84);\nTest.assertEquals(shortestDistance('689926,343623,270015,491008'), 445025.38);\nTest.assertEquals(shortestDistance('683509,749535,792876,353399'), 410956.05);\nTest.assertEquals(shortestDistance('44356,112187,505140,884072'), 898959.59);\nTest.assertEquals(shortestDistance('167547,492387,436442,568397'), 279431.64);\nTest.assertEquals(shortestDistance('98978,191728,59917,949388'), 758666.22);\nTest.assertEquals(shortestDistance('256606,80618,960041,844954'), 1038763.84);\nTest.assertEquals(shortestDistance('273825,411965,770632,230618'), 528870.43);\nTest.assertEquals(shortestDistance('357906,953475,165513,78958'), 895430.09);\nTest.assertEquals(shortestDistance('46709,133109,372387,443731'), 450057.98);\nTest.assertEquals(shortestDistance('771129,297256,493434,908906'), 671736.73);\nTest.assertEquals(shortestDistance('696147,790948,180486,716733'), 520974.22);\nTest.assertEquals(shortestDistance('140229,70416,59694,29963'), 90123.98);\nTest.assertEquals(shortestDistance('854663,153471,705769,351962'), 248129.2);\nTest.assertEquals(shortestDistance('334178,435118,351850,224841'), 211018.28);\nTest.assertEquals(shortestDistance('61590,111883,316978,65479'), 259569.57);\nTest.assertEquals(shortestDistance('491029,158927,682582,471767'), 366826.14);\nTest.assertEquals(shortestDistance('681131,448805,403903,854937'), 491730.18);\nTest.assertEquals(shortestDistance('418689,20793,201298,919092'), 924229.38);\nTest.assertEquals(shortestDistance('377349,272057,449274,452167'), 193940.24);\nTest.assertEquals(shortestDistance('95939,294031,442783,196559'), 360279.82);\nTest.assertEquals(shortestDistance('392396,11336,239723,824573'), 827443.93);\nTest.assertEquals(shortestDistance('476661,823224,779910,625416'), 362060.71);\nTest.assertEquals(shortestDistance('930729,595958,850113,823036'), 240963.39);\nTest.assertEquals(shortestDistance('368089,974540,854645,815427'), 511911.8);\nTest.assertEquals(shortestDistance('185861,46236,194344,204368'), 158359.37);\nTest.assertEquals(shortestDistance('65208,922882,143684,894190'), 83556.65);\nTest.assertEquals(shortestDistance('69862,784498,159427,117479'), 673005.38);\nTest.assertEquals(shortestDistance('69071,110740,126307,480093'), 373761.42);\nTest.assertEquals(shortestDistance('20435,815574,373952,581528'), 423971.46);\nTest.assertEquals(shortestDistance('88510,970855,934609,766627'), 870397.95);\nTest.assertEquals(shortestDistance('770717,575471,428348,489533'), 352989.9);\nTest.assertEquals(shortestDistance('497446,352002,282973,801128'), 497707.58);\nTest.assertEquals(shortestDistance('108554,657709,898186,642708'), 789774.48);\nTest.assertEquals(shortestDistance('876822,674367,912196,161644'), 513941.82);\nTest.assertEquals(shortestDistance('791517,917962,411937,677946'), 449097.6);\nTest.assertEquals(shortestDistance('641509,756447,653036,503197'), 253512.2);\nTest.assertEquals(shortestDistance('879535,989950,929002,506286'), 486187.05);\nTest.assertEquals(shortestDistance('219179,707345,82894,965391'), 291824.16);\nTest.assertEquals(shortestDistance('904255,356305,194710,365532'), 709604.99);\nTest.assertEquals(shortestDistance('425045,87601,125964,241256'), 336242.92);\nTest.assertEquals(shortestDistance('663537,896650,517508,761193'), 199180.99);\nTest.assertEquals(shortestDistance('683031,93644,848163,146098'), 173262.8);\nTest.assertEquals(shortestDistance('206390,776660,310668,605279'), 200612.43);\nTest.assertEquals(shortestDistance('813873,740564,393366,672006'), 426059.08);\nTest.assertEquals(shortestDistance('482520,519180,907438,931168'), 591852.53);\nTest.assertEquals(shortestDistance('559979,206898,280694,592637'), 476229.66);\nTest.assertEquals(shortestDistance('722282,852855,978535,314749'), 596006.43);\nTest.assertEquals(shortestDistance('712795,775343,317925,12070'), 859364.88);\nTest.assertEquals(shortestDistance('424606,669079,951575,221656'), 691291.3);\nTest.assertEquals(shortestDistance('438429,826928,212985,262503'), 607783.33);\nTest.assertEquals(shortestDistance('545333,975453,551904,607297'), 368214.64);\nTest.assertEquals(shortestDistance('703334,797170,541269,750164'), 168744.27);\nTest.assertEquals(shortestDistance('114506,127974,932704,402481'), 863019.15);\nTest.assertEquals(shortestDistance('289328,106639,974313,47820'), 687505.73);\nTest.assertEquals(shortestDistance('213243,196798,944932,814588'), 957618.54);\nTest.assertEquals(shortestDistance('794028,165117,112200,993216'), 1072677.67);\nTest.assertEquals(shortestDistance('838370,850414,850281,699623'), 151260.69);\nTest.assertEquals(shortestDistance('986040,955399,221428,793074'), 781652.68);\nTest.assertEquals(shortestDistance('660578,950161,892089,497077'), 508804.93);\nTest.assertEquals(shortestDistance('365854,843310,42636,644030'), 379713.57);\nTest.assertEquals(shortestDistance('295819,811002,735554,197231'), 755037.56);\nTest.assertEquals(shortestDistance('361038,299921,119925,989125'), 730162.74);\nTest.assertEquals(shortestDistance('470025,931939,233662,120483'), 845179.45);\nTest.assertEquals(shortestDistance('661762,457131,644616,902272'), 445471.09);\nTest.assertEquals(shortestDistance('288742,718803,195961,803288'), 125483.18);\nTest.assertEquals(shortestDistance('578168,61932,776679,661796'), 631857.13);\nTest.assertEquals(shortestDistance('887152,874897,963989,399706'), 481363.08);\nTest.assertEquals(shortestDistance('670430,449104,237269,295525'), 459581.29);\nTest.assertEquals(shortestDistance('191074,491169,135526,579536'), 104375.8);\nTest.assertEquals(shortestDistance('720029,636519,221941,531532'), 509032.34);\nTest.assertEquals(shortestDistance('826770,27476,132993,510022'), 845090.04);\nTest.assertEquals(shortestDistance('470058,242059,32271,931907'), 817035.94);\nTest.assertEquals(shortestDistance('159160,111446,417224,347310'), 349612.43);\nTest.assertEquals(shortestDistance('189266,761987,505012,168406'), 672334.69);\nTest.assertEquals(shortestDistance('140220,526312,90768,617989'), 104164.16);\nTest.assertEquals(shortestDistance('4115,522284,491584,908407'), 621865.74);\nTest.assertEquals(shortestDistance('613647,615955,390024,425512'), 293727.39);\nTest.assertEquals(shortestDistance('981094,353784,886542,3247'), 363065.1);\nTest.assertEquals(shortestDistance('55566,243947,712750,627546'), 760946.12);\nTest.assertEquals(shortestDistance('183757,435586,10021,236721'), 264067.2);\nTest.assertEquals(shortestDistance('671670,864401,20600,232511'), 907291.09);\nTest.assertEquals(shortestDistance('783088,642898,786828,597251'), 45799.96);\nTest.assertEquals(shortestDistance('366483,461603,634831,755384'), 397891.85);\nTest.assertEquals(shortestDistance('907558,303663,78345,916718'), 1031227.73);\nTest.assertEquals(shortestDistance('695592,522425,40063,732080'), 688239.41);\nTest.assertEquals(shortestDistance('226658,434877,742369,62748'), 635954.27);\nTest.assertEquals(shortestDistance('122045,877101,806832,387515'), 841800.27);\nTest.assertEquals(shortestDistance('56753,406100,212236,791583'), 415658.64);\nTest.assertEquals(shortestDistance('533771,474720,795901,651904'), 316395.81);\nTest.assertEquals(shortestDistance('469977,582462,692119,919582'), 403728.82);\nTest.assertEquals(shortestDistance('692398,906861,782884,722277'), 205569.86);\nTest.assertEquals(shortestDistance('910013,396885,717869,424441'), 194109.89);\nTest.assertEquals(shortestDistance('854773,732913,32576,189852'), 985354.33);\nTest.assertEquals(shortestDistance('296855,811279,179385,79171'), 741472.4);\nTest.assertEquals(shortestDistance('159830,827860,78520,196250'), 636822.2);\nTest.assertEquals(shortestDistance('231612,548996,793451,152810'), 687478.3);\nTest.assertEquals(shortestDistance('675873,34443,867973,682501'), 675930.16);\nTest.assertEquals(shortestDistance('794609,340064,525998,263750'), 279241.29);\nTest.assertEquals(shortestDistance('66452,495305,297822,176681'), 393768.12);\nTest.assertEquals(shortestDistance('968867,737052,711759,636913'), 275920.9);\nTest.assertEquals(shortestDistance('396255,874456,722354,660991'), 389753.59);\nTest.assertEquals(shortestDistance('725756,112155,607896,558810'), 461943.36);\nTest.assertEquals(shortestDistance('931532,145007,803085,606950'), 479468.42);\nTest.assertEquals(shortestDistance('871362,290966,310334,610239'), 645513.49);\nTest.assertEquals(shortestDistance('489577,619032,670261,516242'), 207876.15);\nTest.assertEquals(shortestDistance('236453,185212,943182,305965'), 716970.83);\nTest.assertEquals(shortestDistance('956753,435303,411632,803840'), 658009.44);\nTest.assertEquals(shortestDistance('193813,443290,198706,94534'), 348790.32);\nTest.assertEquals(shortestDistance('834020,383183,797257,856721'), 474962.9);\nTest.assertEquals(shortestDistance('862017,196675,941021,196409'), 79004.45);\nTest.assertEquals(shortestDistance('398348,619495,773604,811140'), 421360.74);\nTest.assertEquals(shortestDistance('405935,449111,393793,535401'), 87140.07);\nTest.assertEquals(shortestDistance('331747,175784,318792,270641'), 95737.57);\nTest.assertEquals(shortestDistance('717340,548577,230243,954094'), 633804.01);\nTest.assertEquals(shortestDistance('513639,534120,183652,888189'), 484000.29);\nTest.assertEquals(shortestDistance('282083,916154,3777,569729'), 444369.79);\nTest.assertEquals(shortestDistance('565992,703330,59229,352751'), 616209.68);\nTest.assertEquals(shortestDistance('44884,668578,932420,983962'), 941906.16);\nTest.assertEquals(shortestDistance('697511,667658,341618,550196'), 374776.13);\nTest.assertEquals(shortestDistance('717768,517371,120971,460675'), 599484.02);\nTest.assertEquals(shortestDistance('566888,668783,685393,795821'), 173729.93);\nTest.assertEquals(shortestDistance('941122,477341,742102,415072'), 208533.9);\nTest.assertEquals(shortestDistance('753220,275687,794577,934926'), 660534.98);\nTest.assertEquals(shortestDistance('584003,626254,965634,891750'), 464898.21);\nTest.assertEquals(shortestDistance('498205,447935,295659,605252'), 256463.49);\nTest.assertEquals(shortestDistance('715516,395666,591609,159070'), 267077.91);\nTest.assertEquals(shortestDistance('66135,993230,525444,148550'), 961482.74);\nTest.assertEquals(shortestDistance('878721,683651,593086,924221'), 373445.15);\nTest.assertEquals(shortestDistance('879104,20655,366048,502087'), 703564.66);\nTest.assertEquals(shortestDistance('512595,645925,954937,436572'), 489382.39);\nTest.assertEquals(shortestDistance('1571,448586,811401,608207'), 825411.11);\nTest.assertEquals(shortestDistance('912271,167025,656427,2426'), 304218.64);\nTest.assertEquals(shortestDistance('620678,849883,504780,850218'), 115898.48);\nTest.assertEquals(shortestDistance('172976,509386,128958,365857'), 150127.14);\nTest.assertEquals(shortestDistance('414115,657484,501127,76183'), 587777.12);\nTest.assertEquals(shortestDistance('908486,336929,322785,568412'), 629785.71);\nTest.assertEquals(shortestDistance('8973,498887,92957,294990'), 220515.98);\nTest.assertEquals(shortestDistance('189513,682768,813614,697435'), 624273.32);\nTest.assertEquals(shortestDistance('91066,359474,340002,69423'), 382228.62);\nTest.assertEquals(shortestDistance('783560,613606,961562,969903'), 398286.66);\nTest.assertEquals(shortestDistance('939190,352186,984363,67030'), 288711.87);\nTest.assertEquals(shortestDistance('717607,427025,861326,35039'), 417502.31);\nTest.assertEquals(shortestDistance('682254,844466,625869,99241'), 747355.05);\nTest.assertEquals(shortestDistance('654595,449571,63460,75840'), 699367.89);\nTest.assertEquals(shortestDistance('136879,692900,891393,289508'), 855579.62);\nTest.assertEquals(shortestDistance('487253,949273,141591,551074'), 527299.4);\nTest.assertEquals(shortestDistance('437744,652384,123059,568835'), 325587.29);\nTest.assertEquals(shortestDistance('355217,164297,978511,199998'), 624315.6);\nTest.assertEquals(shortestDistance('258839,892916,901754,172722'), 965411.36);\nTest.assertEquals(shortestDistance('329167,554752,578622,516394'), 252386.87);\nTest.assertEquals(shortestDistance('670704,188868,895234,826451'), 675962.87);\nTest.assertEquals(shortestDistance('783738,811578,637011,511106'), 334383.37);\nTest.assertEquals(shortestDistance('783663,762770,68949,330563'), 835235.89);\nTest.assertEquals(shortestDistance('111997,198869,705056,47716'), 612018.14);\nTest.assertEquals(shortestDistance('189886,81603,595108,608358'), 664586.86);\nTest.assertEquals(shortestDistance('740009,102961,134771,171519'), 609108.56);\nTest.assertEquals(shortestDistance('905303,923489,183031,551477'), 812446.78);\nTest.assertEquals(shortestDistance('159939,251171,391346,918289'), 706113.04);\nTest.assertEquals(shortestDistance('496574,765448,184913,100022'), 734795.44);\nTest.assertEquals(shortestDistance('260854,763252,957527,403793'), 783941.35);\nTest.assertEquals(shortestDistance('560283,175217,892839,196432'), 333232.01);\nTest.assertEquals(shortestDistance('268792,227226,480783,801639'), 612283.01);\nTest.assertEquals(shortestDistance('265777,833678,535506,759994'), 279612.35);\nTest.assertEquals(shortestDistance('977106,453611,196373,344911'), 788263.73);\nTest.assertEquals(shortestDistance('75023,914918,435537,111272'), 880804.88);\nTest.assertEquals(shortestDistance('93640,215647,905863,676918'), 934064.85);\nTest.assertEquals(shortestDistance('190391,35984,342417,329318'), 330388.77);\nTest.assertEquals(shortestDistance('890977,594165,338385,967612'), 666948.71);\nTest.assertEquals(shortestDistance('136177,939588,367039,778456'), 281532.92);\nTest.assertEquals(shortestDistance('359399,388517,853529,773638'), 626484.35);\nTest.assertEquals(shortestDistance('275455,354887,977449,62630'), 760401.03);\nTest.assertEquals(shortestDistance('2051,871314,980454,662933'), 1000347.48);\nTest.assertEquals(shortestDistance('312989,393703,284789,945848'), 552864.67);\nTest.assertEquals(shortestDistance('401173,872732,868525,991186'), 482129.9);\nTest.assertEquals(shortestDistance('71815,554820,169905,87354'), 477646.43);\nTest.assertEquals(shortestDistance('409861,254977,18947,34018'), 449039.68);\nTest.assertEquals(shortestDistance('122489,321452,457839,579539'), 423164.89);\nTest.assertEquals(shortestDistance('857268,522627,330130,603476'), 533302.01);\nTest.assertEquals(shortestDistance('826391,896756,494421,797889'), 346379.51);\nTest.assertEquals(shortestDistance('181113,989523,436790,920471'), 264837.51);\nTest.assertEquals(shortestDistance('760167,744232,867621,176034'), 578269.25);\nTest.assertEquals(shortestDistance('96125,616706,162207,474713'), 156616.87);\nTest.assertEquals(shortestDistance('859743,341617,328894,160307'), 560958.09);\nTest.assertEquals(shortestDistance('390939,648083,583402,663194'), 193055.3);\nTest.assertEquals(shortestDistance('576733,445640,259911,577430'), 343139.6);\nTest.assertEquals(shortestDistance('110700,200973,722159,938044'), 957682.5);\nTest.assertEquals(shortestDistance('835116,582247,311073,61472'), 738801.51);\nTest.assertEquals(shortestDistance('328631,346225,594626,839428'), 560359.29);\nTest.assertEquals(shortestDistance('6268,16097,448970,568458'), 707875.51);\nTest.assertEquals(shortestDistance('541803,551747,728566,445611'), 214814.5);\nTest.assertEquals(shortestDistance('218249,887032,858030,539409'), 728121.88);\nTest.assertEquals(shortestDistance('262122,607653,602370,206664'), 525890.56);\nTest.assertEquals(shortestDistance('435522,897696,699863,31248'), 905874.33);\nTest.assertEquals(shortestDistance('879638,185429,148403,621904'), 851595.59);\nTest.assertEquals(shortestDistance('349007,565475,270741,946541'), 389020.39);\nTest.assertEquals(shortestDistance('119173,82175,684800,570813'), 747463.04);\nTest.assertEquals(shortestDistance('306796,887129,820264,297982'), 781500.85);\nTest.assertEquals(shortestDistance('654168,569865,656277,1765'), 568103.91);\nTest.assertEquals(shortestDistance('384453,934986,483057,919829'), 99762.13);\nTest.assertEquals(shortestDistance('157543,984971,761224,432267'), 818481.8);\nTest.assertEquals(shortestDistance('205870,32510,966066,729109'), 1031090.75);\nTest.assertEquals(shortestDistance('333459,434863,264616,757761'), 330155.23);\nTest.assertEquals(shortestDistance('515980,184292,881485,343273'), 398583.57);\nTest.assertEquals(shortestDistance('744286,15175,583775,547461'), 555960.58);\nTest.assertEquals(shortestDistance('938558,209345,684442,653061'), 511330.45);\nTest.assertEquals(shortestDistance('844481,175088,928878,162821'), 85283.84);\nTest.assertEquals(shortestDistance('40533,442617,849851,12707'), 916415.97);\nTest.assertEquals(shortestDistance('178906,92185,446614,232948'), 302459.58);\nTest.assertEquals(shortestDistance('653402,613320,143037,562504'), 512888.58);\nTest.assertEquals(shortestDistance('871374,675790,890711,370416'), 305985.62);\nTest.assertEquals(shortestDistance('900960,993066,803140,588702'), 416027.64);\nTest.assertEquals(shortestDistance('921794,662363,103471,811928'), 831878.73);\nTest.assertEquals(shortestDistance('624369,167821,971226,949411'), 855098.07);\nTest.assertEquals(shortestDistance('332381,819753,885542,660398'), 575657.11);\nTest.assertEquals(shortestDistance('91300,895062,853013,707268'), 784521.05);\nTest.assertEquals(shortestDistance('365791,990675,107676,311105'), 726937.92);\nTest.assertEquals(shortestDistance('193073,67347,918462,512104'), 850880.71);\nTest.assertEquals(shortestDistance('247722,255901,730198,420488'), 509776.39);\nTest.assertEquals(shortestDistance('491354,552070,964232,370556'), 506518.44);\nTest.assertEquals(shortestDistance('91905,18186,742354,157532'), 665207.64);\nTest.assertEquals(shortestDistance('496714,522406,874291,98750'), 567493.43);\nTest.assertEquals(shortestDistance('253773,184237,235467,843121'), 659138.25);\nTest.assertEquals(shortestDistance('26797,379081,828913,157227'), 832231.5);\nTest.assertEquals(shortestDistance('316821,145413,882607,605485'), 729232.5);\nTest.assertEquals(shortestDistance('104792,882998,571670,580025'), 556567.79);\nTest.assertEquals(shortestDistance('157537,286667,732371,278851'), 574887.13);\nTest.assertEquals(shortestDistance('480361,414879,889928,348557'), 414902.08);\nTest.assertEquals(shortestDistance('673500,980899,329032,498805'), 592513.99);\nTest.assertEquals(shortestDistance('622968,776214,885911,472248'), 401913.36);\nTest.assertEquals(shortestDistance('126521,904378,837627,369059'), 890077.62);\nTest.assertEquals(shortestDistance('503760,273092,895480,426767'), 420785.65);\nTest.assertEquals(shortestDistance('455562,336785,442392,523287'), 186966.43);\nTest.assertEquals(shortestDistance('388776,95216,206886,917821'), 842474.31);\nTest.assertEquals(shortestDistance('91739,731973,989090,497591'), 927455.52);\nTest.assertEquals(shortestDistance('853311,542953,349700,393902'), 525204.95);\nTest.assertEquals(shortestDistance('816831,693843,123424,592220'), 700814.17);\nTest.assertEquals(shortestDistance('993735,708984,575302,251194'), 620207.92);\nTest.assertEquals(shortestDistance('707341,477951,250026,740755'), 527449.48);\nTest.assertEquals(shortestDistance('64116,601995,487001,851594'), 491051.3);\nTest.assertEquals(shortestDistance('194874,4328,899877,861363'), 1109746.92);\nTest.assertEquals(shortestDistance('132942,586121,423008,715731'), 317705.9);\nTest.assertEquals(shortestDistance('613588,213361,89366,895123'), 860004.73);\nTest.assertEquals(shortestDistance('889034,826299,82991,903238'), 809706.69);\nTest.assertEquals(shortestDistance('882041,526943,230453,353756'), 674211.14);\nTest.assertEquals(shortestDistance('651791,451574,399791,36285'), 485766.36);\nTest.assertEquals(shortestDistance('221010,47601,215956,444501'), 396932.18);\nTest.assertEquals(shortestDistance('931012,720447,886159,648793'), 84534.53);\nTest.assertEquals(shortestDistance('790364,924330,664953,392737'), 546185.9);\nTest.assertEquals(shortestDistance('721850,661427,317189,733001'), 410942.04);\nTest.assertEquals(shortestDistance('303784,714317,310469,187432'), 526927.41);\nTest.assertEquals(shortestDistance('95731,252962,152658,291979'), 69014.56);\nTest.assertEquals(shortestDistance('253216,52184,110893,299081'), 284980.64);\nTest.assertEquals(shortestDistance('760357,376036,672731,408389'), 93407.88);\nTest.assertEquals(shortestDistance('777261,995722,246945,1076'), 1127189.3);\nTest.assertEquals(shortestDistance('323105,698132,843362,906579'), 560461.86);\nTest.assertEquals(shortestDistance('702978,403605,964125,682539'), 382101.99);\nTest.assertEquals(shortestDistance('444634,260351,234757,847777'), 623792.96);\nTest.assertEquals(shortestDistance('744593,805753,116213,255126'), 835494.77);\nTest.assertEquals(shortestDistance('802626,205324,937102,753240'), 564177.04);\nTest.assertEquals(shortestDistance('748428,681374,351952,996250'), 506300.42);\nTest.assertEquals(shortestDistance('372478,428915,698204,68780'), 485586.91);\nTest.assertEquals(shortestDistance('862792,169060,58267,249481'), 808534.48);\nTest.assertEquals(shortestDistance('173090,767385,911810,278440'), 885874.96);\nTest.assertEquals(shortestDistance('97001,776716,634757,803105'), 538403.1);\nTest.assertEquals(shortestDistance('287472,356291,697377,739714'), 561280.06);\nTest.assertEquals(shortestDistance('840047,651237,379184,987690'), 570609.61);\nTest.assertEquals(shortestDistance('234716,103515,719890,498243'), 625463.03);\nTest.assertEquals(shortestDistance('971040,965296,266739,275432'), 985876.38);\nTest.assertEquals(shortestDistance('762191,996124,499919,997525'), 262275.74);\nTest.assertEquals(shortestDistance('869704,665141,293945,206117'), 736343.3);\nTest.assertEquals(shortestDistance('163131,703673,489526,278923'), 535673.65);\nTest.assertEquals(shortestDistance('945005,668575,851122,26404'), 648997.39);\nTest.assertEquals(shortestDistance('344756,879442,469289,188425'), 702148.82);\nTest.assertEquals(shortestDistance('245695,72181,80878,735401'), 683392.58);\nTest.assertEquals(shortestDistance('492109,717710,935257,980502'), 515208.49);\nTest.assertEquals(shortestDistance('706569,587487,481753,785237'), 299411.58);\nTest.assertEquals(shortestDistance('401695,554220,120152,767290'), 353079.72);\nTest.assertEquals(shortestDistance('89096,494048,762979,155611'), 754094.09);\nTest.assertEquals(shortestDistance('183841,943339,509056,539661'), 518382.8);\nTest.assertEquals(shortestDistance('104049,262329,535147,384307'), 448022.45);\nTest.assertEquals(shortestDistance('519556,689704,841358,18651'), 744223.53);\nTest.assertEquals(shortestDistance('55210,364793,325157,539446'), 321519.91);\nTest.assertEquals(shortestDistance('188236,21759,424119,86853'), 244699.85);\nTest.assertEquals(shortestDistance('214928,804240,404284,212605'), 621198.57);\nTest.assertEquals(shortestDistance('744014,157527,90548,212748'), 655795.07);\nTest.assertEquals(shortestDistance('892818,279679,255445,485966'), 669924.37);\nTest.assertEquals(shortestDistance('684327,334661,487300,678782'), 396533.61);\nTest.assertEquals(shortestDistance('327,133327,45091,765914'), 634168.85);\nTest.assertEquals(shortestDistance('398094,660946,394164,656864'), 5666.36);\nTest.assertEquals(shortestDistance('984080,304779,149707,546980'), 868815.07);\nTest.assertEquals(shortestDistance('144116,376327,531990,372174'), 387896.23);\nTest.assertEquals(shortestDistance('411996,54982,810103,97750'), 400397.66);\nTest.assertEquals(shortestDistance('711649,58608,375658,591328'), 629825.81);\nTest.assertEquals(shortestDistance('891007,404291,690395,937262'), 569476.3);\nTest.assertEquals(shortestDistance('517827,357762,447329,616057'), 267742.93);\nTest.assertEquals(shortestDistance('538232,497573,358003,612280'), 213635.64);\nTest.assertEquals(shortestDistance('816090,22990,124024,707168'), 973167.45);\nTest.assertEquals(shortestDistance('447333,736496,955301,783802'), 510166);\nTest.assertEquals(shortestDistance('807285,12420,554086,588956'), 629685.23);\nTest.assertEquals(shortestDistance('291464,218684,114567,440922'), 284046.26);\nTest.assertEquals(shortestDistance('794942,42216,833907,104308'), 73305.44);\nTest.assertEquals(shortestDistance('175092,762004,171733,525333'), 236694.84);\nTest.assertEquals(shortestDistance('501921,789372,451854,85407'), 705743.17);\nTest.assertEquals(shortestDistance('282910,113617,745331,249114'), 481863.69);\nTest.assertEquals(shortestDistance('937009,559202,782490,102498'), 482135.53);\nTest.assertEquals(shortestDistance('247253,162819,334181,824026'), 666896.67);\nTest.assertEquals(shortestDistance('401217,512687,308315,523854'), 93570.74);\nTest.assertEquals(shortestDistance('525686,263137,689045,59200'), 261297.65);\nTest.assertEquals(shortestDistance('122182,695322,142605,19101'), 676529.33);\nTest.assertEquals(shortestDistance('102625,84745,204701,466015'), 394697.76);\nTest.assertEquals(shortestDistance('282608,308363,239079,19411'), 292212.31);\nTest.assertEquals(shortestDistance('935256,149437,333464,728217'), 834949.04);\nTest.assertEquals(shortestDistance('520077,751197,776161,614961'), 290067.69);\nTest.assertEquals(shortestDistance('163861,829986,934572,724007'), 777963.36);\nTest.assertEquals(shortestDistance('673028,290120,402372,154208'), 302864.23);\nTest.assertEquals(shortestDistance('805346,810547,965990,340490'), 496749.51);\nTest.assertEquals(shortestDistance('398994,874430,611890,70166'), 831964.72);\nTest.assertEquals(shortestDistance('834804,82294,446430,226649'), 414334.08);\nTest.assertEquals(shortestDistance('529177,864883,778900,359346'), 563852.14);\nTest.assertEquals(shortestDistance('26510,62481,126380,277657'), 237222.95);\nTest.assertEquals(shortestDistance('109983,212644,906800,665327'), 916427.43);\nTest.assertEquals(shortestDistance('408963,240908,581128,675983'), 467900.68);\nTest.assertEquals(shortestDistance('489480,317327,158988,844426'), 622140.11);\nTest.assertEquals(shortestDistance('893121,339734,220787,799829'), 814690.38);\nTest.assertEquals(shortestDistance('54453,861454,601169,436844'), 692236.98);\nTest.assertEquals(shortestDistance('323877,636389,777579,883580'), 516670.97);\nTest.assertEquals(shortestDistance('926734,280947,249868,302287'), 677202.32);\nTest.assertEquals(shortestDistance('790648,224496,911223,757068'), 546050.61);\nTest.assertEquals(shortestDistance('333014,914637,116975,881753'), 218527.36);\nTest.assertEquals(shortestDistance('349939,917528,372173,835942'), 84561.38);\nTest.assertEquals(shortestDistance('162342,244654,517257,353135'), 371123.68);\nTest.assertEquals(shortestDistance('381846,724661,296174,700680'), 88965.05);\nTest.assertEquals(shortestDistance('669710,21703,740782,683309'), 665412.45);\nTest.assertEquals(shortestDistance('631228,992250,714784,881166'), 139000.94);\nTest.assertEquals(shortestDistance('152630,998979,974520,696399'), 875818.38);\nTest.assertEquals(shortestDistance('148637,810495,609823,165396'), 792997.63);\nTest.assertEquals(shortestDistance('517356,763100,284323,82'), 797810.03);\nTest.assertEquals(shortestDistance('766138,858130,339081,921707'), 431763.5);\nTest.assertEquals(shortestDistance('969407,895781,18114,637923'), 985621.18);\nTest.assertEquals(shortestDistance('506034,524757,255535,893919'), 446128.16);\nTest.assertEquals(shortestDistance('539421,545132,882556,641418'), 356388.3);\nTest.assertEquals(shortestDistance('369407,399300,290362,75517'), 333291.98);\nTest.assertEquals(shortestDistance('853635,712244,252801,114082'), 847820.31);\nTest.assertEquals(shortestDistance('469277,690538,253529,710891'), 216705.89);\nTest.assertEquals(shortestDistance('858962,232650,181822,689709'), 816958.69);\nTest.assertEquals(shortestDistance('215218,686345,35360,915210'), 291080.9);\nTest.assertEquals(shortestDistance('194785,313996,366565,576746'), 313920.26);\nTest.assertEquals(shortestDistance('670205,24397,984637,837882'), 872138.37);\nTest.assertEquals(shortestDistance('614358,936461,176654,413993'), 681584.63);\nTest.assertEquals(shortestDistance('764759,179722,189634,264245'), 581302.76);\nTest.assertEquals(shortestDistance('19541,543695,617642,797820'), 649849.46);\nTest.assertEquals(shortestDistance('521227,338076,595939,612517'), 284428.81);\nTest.assertEquals(shortestDistance('574426,400372,645665,480578'), 107275.34);\nTest.assertEquals(shortestDistance('155188,606775,491209,543979'), 341838.34);\nTest.assertEquals(shortestDistance('872972,491083,722332,812676'), 355125.99);\nTest.assertEquals(shortestDistance('697498,951095,922975,384810'), 609523.24);\nTest.assertEquals(shortestDistance('686801,28265,568162,95173'), 136205.33);\nTest.assertEquals(shortestDistance('844297,906632,401355,965383'), 446821.32);\nTest.assertEquals(shortestDistance('490631,644935,920281,776571'), 449363.06);\nTest.assertEquals(shortestDistance('151488,307112,687152,285037'), 536118.67);\nTest.assertEquals(shortestDistance('622971,848999,338783,140179'), 763667.87);\nTest.assertEquals(shortestDistance('338516,32250,317938,468229'), 436464.37);\nTest.assertEquals(shortestDistance('420138,366931,542278,802759'), 452619.29);\nTest.assertEquals(shortestDistance('901133,178855,285161,141257'), 617118.4);\nTest.assertEquals(shortestDistance('861527,529296,88033,792901'), 817178.42);\nTest.assertEquals(shortestDistance('551039,902531,649403,622237'), 297052.53);\nTest.assertEquals(shortestDistance('253670,923534,758590,786555'), 523170.58);\nTest.assertEquals(shortestDistance('351121,978721,701456,523085'), 574751.06);\nTest.assertEquals(shortestDistance('108659,43746,547581,404409'), 568093.59);\nTest.assertEquals(shortestDistance('235599,799129,458922,74538'), 758225.09);\nTest.assertEquals(shortestDistance('555377,367289,917471,562545'), 411384.21);\nTest.assertEquals(shortestDistance('281406,26261,567219,188781'), 328788.41);\nTest.assertEquals(shortestDistance('364171,24302,779550,239028'), 467597.02);\nTest.assertEquals(shortestDistance('300269,482459,766009,723979'), 524638.6);\nTest.assertEquals(shortestDistance('301114,818479,959065,323934'), 823088.25);\nTest.assertEquals(shortestDistance('874085,761482,385348,478241'), 564879.92);\nTest.assertEquals(shortestDistance('91118,86335,707213,982694'), 1087672.98);\nTest.assertEquals(shortestDistance('656555,124755,903029,661701'), 590813.37);\nTest.assertEquals(shortestDistance('555679,51383,990212,734128'), 809295.78);\nTest.assertEquals(shortestDistance('817024,586389,106240,963663'), 804704.65);\nTest.assertEquals(shortestDistance('825529,511063,819620,191862'), 319255.69);\nTest.assertEquals(shortestDistance('799847,945550,197476,936585'), 602437.71);\nTest.assertEquals(shortestDistance('53798,470272,176578,354189'), 168968.02);\nTest.assertEquals(shortestDistance('765016,130879,179752,561593'), 726669.46);\nTest.assertEquals(shortestDistance('853013,304484,90074,896336'), 965590.34);\nTest.assertEquals(shortestDistance('346189,402739,754838,98116'), 509695.18);\nTest.assertEquals(shortestDistance('748762,353337,480833,952858'), 656666.87);\nTest.assertEquals(shortestDistance('783684,911999,554346,30390'), 910950.24);\nTest.assertEquals(shortestDistance('997195,981819,89183,623813'), 976040);\nTest.assertEquals(shortestDistance('717802,756892,773587,395953'), 365224.49);\nTest.assertEquals(shortestDistance('628870,168352,197208,78663'), 440881.16);\nTest.assertEquals(shortestDistance('598866,821777,284207,304340'), 605599.98);\nTest.assertEquals(shortestDistance('533376,808002,259216,734984'), 283717);\nTest.assertEquals(shortestDistance('502455,946451,342508,360282'), 607599.49);\nTest.assertEquals(shortestDistance('134164,460513,178590,72379'), 390668.24);\nTest.assertEquals(shortestDistance('696662,191899,886188,267629'), 204095.9);\nTest.assertEquals(shortestDistance('213161,483293,37122,907056'), 458873.41);\nTest.assertEquals(shortestDistance('79174,375386,861140,891558'), 936965.51);\nTest.assertEquals(shortestDistance('534413,359166,375673,702654'), 378394.49);\nTest.assertEquals(shortestDistance('952500,44433,52354,587642'), 1051350.96);\nTest.assertEquals(shortestDistance('31448,834858,132138,593951'), 261102.77);\nTest.assertEquals(shortestDistance('10363,324372,931213,931737'), 1103112.4);\nTest.assertEquals(shortestDistance('788841,547357,116259,623138'), 676837.73);\nTest.assertEquals(shortestDistance('811230,614290,392382,370615'), 484573.17);\nTest.assertEquals(shortestDistance('855994,226355,556991,702217'), 562003.06);\nTest.assertEquals(shortestDistance('86701,361615,452363,971643'), 711226.31);\nTest.assertEquals(shortestDistance('39128,696379,784669,881838'), 768261.95);\nTest.assertEquals(shortestDistance('528337,688414,932917,108560'), 707047.13);\nTest.assertEquals(shortestDistance('283504,659282,643382,639487'), 360422);\nTest.assertEquals(shortestDistance('992856,512392,488400,713355'), 543011.96);\nTest.assertEquals(shortestDistance('327841,670587,833429,263734'), 648959.62);\nTest.assertEquals(shortestDistance('488578,122288,304355,825848'), 727279.03);\nTest.assertEquals(shortestDistance('664682,596020,461739,963199'), 419531.02);\nTest.assertEquals(shortestDistance('885165,987180,432885,793951'), 491827.86);\nTest.assertEquals(shortestDistance('378350,684191,763072,905541'), 443854.53);\nTest.assertEquals(shortestDistance('142141,391751,208070,650112'), 266640.28);\nTest.assertEquals(shortestDistance('527599,263676,302742,165053'), 245534.45);\nTest.assertEquals(shortestDistance('374157,918264,772671,216715'), 806836.05);\nTest.assertEquals(shortestDistance('534875,76576,828740,745294'), 730438.5);\nTest.assertEquals(shortestDistance('979129,123734,823870,4343'), 195855.99);\nTest.assertEquals(shortestDistance('860775,957529,452133,784494'), 443767.28);\nTest.assertEquals(shortestDistance('716604,439573,668168,204881'), 239638.02);\nTest.assertEquals(shortestDistance('370895,76559,206938,856847'), 797327.57);\nTest.assertEquals(shortestDistance('120790,250449,807211,168566'), 691287.65);\nTest.assertEquals(shortestDistance('807742,680909,844217,851979'), 174915.32);\nTest.assertEquals(shortestDistance('305113,792482,883930,632877'), 600418.92);\nTest.assertEquals(shortestDistance('628398,228847,846725,863751'), 671393.9);\nTest.assertEquals(shortestDistance('174171,296318,100374,253825'), 85156.63);\nTest.assertEquals(shortestDistance('218902,834129,786324,55988'), 963053.03);\nTest.assertEquals(shortestDistance('35773,284123,673322,678343'), 749585.31);\nTest.assertEquals(shortestDistance('195069,997741,193870,48455'), 949286.76);\nTest.assertEquals(shortestDistance('686804,869744,235059,826575'), 453802.94);\nTest.assertEquals(shortestDistance('761378,834199,107046,114584'), 972623.32);\nTest.assertEquals(shortestDistance('97177,805268,148832,934714'), 139371.83);\nTest.assertEquals(shortestDistance('787434,288845,781561,607375'), 318584.14);\nTest.assertEquals(shortestDistance('61925,265915,474891,245388'), 413475.85);\nTest.assertEquals(shortestDistance('226788,588405,33996,736102'), 242864.49);\nTest.assertEquals(shortestDistance('142900,637569,266744,59539'), 591148.05);\nTest.assertEquals(shortestDistance('567199,1463,594057,648987'), 648080.77);\nTest.assertEquals(shortestDistance('356461,879242,937715,539543'), 673239.65);\nTest.assertEquals(shortestDistance('946946,930844,398922,723394'), 585974.24);\nTest.assertEquals(shortestDistance('565125,888225,877371,566490'), 448342.47);\nTest.assertEquals(shortestDistance('676813,361689,646809,482681'), 124656.75);\nTest.assertEquals(shortestDistance('210083,94036,41381,678908'), 608716.37);\nTest.assertEquals(shortestDistance('36402,328575,568836,864441'), 755406.07);\nTest.assertEquals(shortestDistance('325936,416380,555554,186537'), 324888.03);\nTest.assertEquals(shortestDistance('639109,217099,748533,526178'), 327877.17);\nTest.assertEquals(shortestDistance('168207,12442,875306,613758'), 928207.91);\nTest.assertEquals(shortestDistance('266402,102065,360628,944040'), 847231.04);\nTest.assertEquals(shortestDistance('145546,488229,154362,415037'), 73721.03);\nTest.assertEquals(shortestDistance('201628,497651,956989,280566'), 785936.47);\nTest.assertEquals(shortestDistance('509414,900164,326222,679521'), 286779.78);\nTest.assertEquals(shortestDistance('758584,196389,84717,842439'), 933529.5);\nTest.assertEquals(shortestDistance('34222,527826,887036,50329'), 977391.99);\nTest.assertEquals(shortestDistance('46918,985837,630763,653764'), 671675.12);\nTest.assertEquals(shortestDistance('546036,924624,62507,783499'), 503702.85);\nTest.assertEquals(shortestDistance('989807,546065,895493,488558'), 110463.5);\nTest.assertEquals(shortestDistance('361752,704979,225909,97172'), 622802.27);\nTest.assertEquals(shortestDistance('204024,779623,761429,678097'), 566575.56);\nTest.assertEquals(shortestDistance('15111,962690,902468,882274'), 890993.37);\nTest.assertEquals(shortestDistance('281421,955229,550570,745945'), 340941.31);\nTest.assertEquals(shortestDistance('270911,444639,949033,205498'), 719053.45);\nTest.assertEquals(shortestDistance('344839,939184,323520,585205'), 354620.41);\nTest.assertEquals(shortestDistance('246780,335739,939169,201664'), 705250.76);\nTest.assertEquals(shortestDistance('845289,523723,907207,671445'), 160173.74);\nTest.assertEquals(shortestDistance('171998,928024,788768,25294'), 1093309.97);\nTest.assertEquals(shortestDistance('250324,740274,985040,837888'), 741172.11);\nTest.assertEquals(shortestDistance('250406,249669,828802,187978'), 581676.64);\nTest.assertEquals(shortestDistance('590736,908389,97750,154257'), 900971.85);\nTest.assertEquals(shortestDistance('323422,136488,216161,23322'), 155921.34);\nTest.assertEquals(shortestDistance('907272,507917,55067,348520'), 866983.72);\nTest.assertEquals(shortestDistance('993936,986396,982641,569801'), 416748.09);\nTest.assertEquals(shortestDistance('147319,163673,965789,31711'), 829039.87);\nTest.assertEquals(shortestDistance('474253,256212,760371,74729'), 338820.88);\nTest.assertEquals(shortestDistance('615969,412514,570959,704633'), 295566.25);\nTest.assertEquals(shortestDistance('820244,461124,648005,603754'), 223628.24);\nTest.assertEquals(shortestDistance('329869,522268,776714,638313'), 461667.52);\nTest.assertEquals(shortestDistance('958881,585868,494078,280196'), 556306.75);\nTest.assertEquals(shortestDistance('502094,743621,8327,431572'), 584106.52);\nTest.assertEquals(shortestDistance('155696,615601,47564,289494'), 343567.03);\nTest.assertEquals(shortestDistance('419178,268925,31733,800501'), 657789.23);\nTest.assertEquals(shortestDistance('172485,747983,673527,597115'), 523263.07);\nTest.assertEquals(shortestDistance('454147,49089,914602,235450'), 496738.59);\nTest.assertEquals(shortestDistance('922480,743319,203468,165654'), 922320.5);\nTest.assertEquals(shortestDistance('649894,934785,761341,878930'), 124660.4);\nTest.assertEquals(shortestDistance('659548,918605,763039,576780'), 357148.03);\nTest.assertEquals(shortestDistance('377642,711470,823550,687018'), 446577.93);\nTest.assertEquals(shortestDistance('335008,59915,807759,549184'), 680351.13);\nTest.assertEquals(shortestDistance('448731,595129,419070,545977'), 57408.14);\nTest.assertEquals(shortestDistance('187968,204863,946567,551488'), 834039.17);\nTest.assertEquals(shortestDistance('544117,417716,20913,873403'), 693824.95);\nTest.assertEquals(shortestDistance('156354,570556,392301,760660'), 303002.5);\nTest.assertEquals(shortestDistance('270493,873739,688290,235838'), 762543.13);\nTest.assertEquals(shortestDistance('828418,300274,995407,902701'), 625142.88);\nTest.assertEquals(shortestDistance('899437,870895,270577,410090'), 779619.23);\nTest.assertEquals(shortestDistance('767127,863230,274365,610312'), 553878.96);\nTest.assertEquals(shortestDistance('527387,575380,466042,455286'), 134854.65);\nTest.assertEquals(shortestDistance('539755,359608,927808,618176'), 466307.35);\nTest.assertEquals(shortestDistance('874934,305729,895773,492257'), 187688.46);\nTest.assertEquals(shortestDistance('933594,572136,440894,611373'), 494259.88);\nTest.assertEquals(shortestDistance('683720,568350,574938,555947'), 109486.79);\nTest.assertEquals(shortestDistance('235224,982579,170701,43860'), 940933.89);\nTest.assertEquals(shortestDistance('93101,401564,863230,454894'), 771973.29);\nTest.assertEquals(shortestDistance('989610,428854,739643,696117'), 365941.27);\nTest.assertEquals(shortestDistance('390119,909695,405033,201439'), 708413.01);\nTest.assertEquals(shortestDistance('770194,738228,889492,79215'), 669723.93);\nTest.assertEquals(shortestDistance('159420,148821,637801,425857'), 552808.58);\nTest.assertEquals(shortestDistance('676929,398228,406675,724018'), 423292.27);\nTest.assertEquals(shortestDistance('119428,433295,972205,329158'), 859111.82);\nTest.assertEquals(shortestDistance('306565,112705,748395,912040'), 913318.23);\nTest.assertEquals(shortestDistance('988060,470849,126143,312857'), 876277.57);\nTest.assertEquals(shortestDistance('386648,202441,943976,724549'), 763682.7);\nTest.assertEquals(shortestDistance('824317,760351,65488,364491'), 855877.67);\nTest.assertEquals(shortestDistance('99070,438186,393958,772167'), 445535.9);\nTest.assertEquals(shortestDistance('14975,746071,216044,658751'), 219211.14);\nTest.assertEquals(shortestDistance('112735,905328,817337,778250'), 715969.83);\nTest.assertEquals(shortestDistance('393416,437664,384427,76174'), 361601.75);\nTest.assertEquals(shortestDistance('206031,450723,919322,169773'), 766627);\nTest.assertEquals(shortestDistance('511873,81858,440463,136263'), 89773.56);\nTest.assertEquals(shortestDistance('422424,313486,404371,714640'), 401560.01);\nTest.assertEquals(shortestDistance('362781,989420,757077,750299'), 461137.93);\nTest.assertEquals(shortestDistance('240447,172377,29612,304384'), 248751.37);\nTest.assertEquals(shortestDistance('501261,379334,954275,614834'), 510570.2);\nTest.assertEquals(shortestDistance('834101,14506,465276,124955'), 385007.61);\nTest.assertEquals(shortestDistance('159565,301254,749378,35423'), 646950.92);\nTest.assertEquals(shortestDistance('222203,67444,63754,717455'), 669044.38);\nTest.assertEquals(shortestDistance('220322,803071,894855,851266'), 676252.56);\nTest.assertEquals(shortestDistance('995711,706188,112274,952036'), 917007.18);\nTest.assertEquals(shortestDistance('572424,507907,319408,321952'), 314000.57);\nTest.assertEquals(shortestDistance('322580,931521,637949,976108'), 318505.27);\nTest.assertEquals(shortestDistance('282367,406875,98166,596900'), 264649.79);\nTest.assertEquals(shortestDistance('161772,257224,291569,801261'), 559306.28);\nTest.assertEquals(shortestDistance('400500,904432,498983,286062'), 626163.2);\nTest.assertEquals(shortestDistance('144745,57921,590840,338685'), 527095.03);\nTest.assertEquals(shortestDistance('271773,109807,13694,611277'), 563983.09);\nTest.assertEquals(shortestDistance('505963,128974,431145,202603'), 104971.25);\nTest.assertEquals(shortestDistance('694786,374682,199876,216025'), 519719.11);\nTest.assertEquals(shortestDistance('543330,274064,644398,872492'), 606902.64);\nTest.assertEquals(shortestDistance('824890,104216,401178,970178'), 964065.37);\nTest.assertEquals(shortestDistance('780587,872717,712061,850802'), 71944.98);\nTest.assertEquals(shortestDistance('320998,868426,932734,881046'), 611866.16);\nTest.assertEquals(shortestDistance('259575,401836,519992,573279'), 311784.73);\nTest.assertEquals(shortestDistance('969042,707633,593691,729005'), 375958.95);\nTest.assertEquals(shortestDistance('674118,180366,347505,357390'), 371501.75);\nTest.assertEquals(shortestDistance('762688,370467,537560,851543'), 531146.62);\nTest.assertEquals(shortestDistance('757001,497057,791348,992956'), 497087.05);\nTest.assertEquals(shortestDistance('481714,471913,716137,483742'), 234721.26);\nTest.assertEquals(shortestDistance('311500,737861,958110,141298'), 879768.1);\nTest.assertEquals(shortestDistance('158395,736461,326436,505237'), 285836.17);\nTest.assertEquals(shortestDistance('652909,143408,606819,101411'), 62354.12);\nTest.assertEquals(shortestDistance('361215,554246,264802,406808'), 176163.08);\nTest.assertEquals(shortestDistance('488472,543711,498058,405135'), 138907.16);\nTest.assertEquals(shortestDistance('731397,346646,681791,505004'), 165945.81);\nTest.assertEquals(shortestDistance('431346,56004,486316,536840'), 483967.93);\nTest.assertEquals(shortestDistance('29640,884713,801232,376992'), 923652.98);\nTest.assertEquals(shortestDistance('387972,896786,605250,169832'), 758730.42);\nTest.assertEquals(shortestDistance('640185,736979,845833,705915'), 207980.94);\nTest.assertEquals(shortestDistance('5070,61307,347433,657814'), 687773.96);\nTest.assertEquals(shortestDistance('799943,713452,261645,458423'), 595654.71);\nTest.assertEquals(shortestDistance('345585,431749,32303,833989'), 509845.69);\nTest.assertEquals(shortestDistance('8536,466714,534402,103970'), 638841.34);\nTest.assertEquals(shortestDistance('920907,219224,443616,591374'), 605229.15);\nTest.assertEquals(shortestDistance('218892,671298,199741,582835'), 90512.23);\nTest.assertEquals(shortestDistance('224367,144394,627355,280291'), 425284.99);\nTest.assertEquals(shortestDistance('626051,246368,523894,905982'), 667477.85);\nTest.assertEquals(shortestDistance('653642,169859,929919,517197'), 443816.03);\nTest.assertEquals(shortestDistance('329977,720284,691376,137581'), 685676.33);\nTest.assertEquals(shortestDistance('44696,80941,272323,411168'), 401078.45);\nTest.assertEquals(shortestDistance('680280,328622,670736,884203'), 555662.97);\nTest.assertEquals(shortestDistance('702659,802449,629133,840756'), 82906.57);\nTest.assertEquals(shortestDistance('954815,455512,445606,526495'), 514132.66);\nTest.assertEquals(shortestDistance('291804,263279,253203,2728'), 263394.88);\nTest.assertEquals(shortestDistance('541227,520030,617364,736400'), 229374.85);\nTest.assertEquals(shortestDistance('657760,593557,908650,71189'), 579494.71);\nTest.assertEquals(shortestDistance('434159,490307,915738,26207'), 668810.24);\nTest.assertEquals(shortestDistance('479535,895493,211988,352599'), 605239.86);\nTest.assertEquals(shortestDistance('432236,782221,990406,2361'), 959028.35);\nTest.assertEquals(shortestDistance('933668,832332,912236,273610'), 559132.9);\nTest.assertEquals(shortestDistance('13812,515108,819345,743287'), 837227.01);\nTest.assertEquals(shortestDistance('905182,873391,770925,507322'), 389912.11);\nTest.assertEquals(shortestDistance('35880,405463,45307,259119'), 146647.31);\nTest.assertEquals(shortestDistance('826432,346038,549843,326499'), 277278.29);\nTest.assertEquals(shortestDistance('335260,707914,920234,951428'), 633635.26);\nTest.assertEquals(shortestDistance('815843,896843,98909,800356'), 723397.61);\nTest.assertEquals(shortestDistance('67824,298841,998122,485700'), 948878.63);\nTest.assertEquals(shortestDistance('7614,773149,16359,762822'), 13532.26);\nTest.assertEquals(shortestDistance('940547,334931,319734,647829'), 695207.84);\nTest.assertEquals(shortestDistance('921617,122312,374502,869555'), 926124.68);\nTest.assertEquals(shortestDistance('553730,354116,587768,316001'), 51101.26);\nTest.assertEquals(shortestDistance('770446,770824,562535,597391'), 270750.79);\nTest.assertEquals(shortestDistance('84689,346263,623605,953299'), 811740.82);\nTest.assertEquals(shortestDistance('964428,100633,265491,135174'), 699789.98);\nTest.assertEquals(shortestDistance('972237,187531,823585,397357'), 257146.59);\nTest.assertEquals(shortestDistance('244333,430794,821711,320116'), 587890.27);\nTest.assertEquals(shortestDistance('348670,472217,789066,847558'), 578644.54);\nTest.assertEquals(shortestDistance('949908,693028,484585,495571'), 505484.68);\nTest.assertEquals(shortestDistance('720522,901763,470194,193827'), 750891.13);\nTest.assertEquals(shortestDistance('541958,899877,643800,142305'), 764386.77);\nTest.assertEquals(shortestDistance('705092,325139,626493,14437'), 320489.52);\nTest.assertEquals(shortestDistance('137554,294335,756198,570080'), 677315.07);\nTest.assertEquals(shortestDistance('783814,892480,874493,622155'), 285128.54);\nTest.assertEquals(shortestDistance('200589,861820,91622,828015'), 114090.25);\nTest.assertEquals(shortestDistance('483858,669863,305770,124532'), 573673.46);\nTest.assertEquals(shortestDistance('763334,580942,801294,494655'), 94267.75);\nTest.assertEquals(shortestDistance('175209,67440,38352,336934'), 302252.96);\nTest.assertEquals(shortestDistance('817957,211941,678800,53025'), 211232.02);\nTest.assertEquals(shortestDistance('212836,382526,925013,643806'), 758592.99);\nTest.assertEquals(shortestDistance('488050,907498,493930,757513'), 150100.22);\nTest.assertEquals(shortestDistance('139114,958027,434735,889105'), 303549.04);\nTest.assertEquals(shortestDistance('541704,766627,31359,15203'), 908344.67);\nTest.assertEquals(shortestDistance('932552,294470,580641,909797'), 708850.24);\nTest.assertEquals(shortestDistance('864878,793976,699091,489818'), 346406.44);\nTest.assertEquals(shortestDistance('970865,303370,294558,338569'), 677222.36);\nTest.assertEquals(shortestDistance('544472,62295,474969,535272'), 478056.39);\nTest.assertEquals(shortestDistance('410342,535670,649103,870829'), 411507.44);\nTest.assertEquals(shortestDistance('549644,83838,189783,499103'), 549495.19);\nTest.assertEquals(shortestDistance('635549,676720,231087,583452'), 415076.41);\nTest.assertEquals(shortestDistance('232462,377670,809547,284371'), 584578.31);\nTest.assertEquals(shortestDistance('720299,161492,220401,111071'), 502434.36);\nTest.assertEquals(shortestDistance('890095,414995,826744,166186'), 256747.48);\nTest.assertEquals(shortestDistance('802943,989738,873223,839473'), 165888.06);\nTest.assertEquals(shortestDistance('329883,279144,62694,558355'), 386456.65);\nTest.assertEquals(shortestDistance('279478,746315,814304,207768'), 758993.89);\nTest.assertEquals(shortestDistance('169230,24911,754805,302509'), 648042.23);\nTest.assertEquals(shortestDistance('509472,309257,77678,556364'), 497501.69);\nTest.assertEquals(shortestDistance('524491,509384,243246,431046'), 291951.35);\nTest.assertEquals(shortestDistance('671272,562083,821274,522321'), 155182.53);\nTest.assertEquals(shortestDistance('546385,722298,97408,634282'), 457522.85);\nTest.assertEquals(shortestDistance('312434,121124,696955,604813'), 617908.93);\nTest.assertEquals(shortestDistance('502016,761977,398545,406513'), 370217.37);\nTest.assertEquals(shortestDistance('43659,491495,429384,934990'), 587768.31);\nTest.assertEquals(shortestDistance('932880,10279,647149,845621'), 882858.12);\nTest.assertEquals(shortestDistance('567825,590296,779307,26111'), 602519.17);\nTest.assertEquals(shortestDistance('670313,118643,739435,599590'), 485888.74);\nTest.assertEquals(shortestDistance('616800,968118,860507,756082'), 323036.17);\nTest.assertEquals(shortestDistance('246884,154049,12286,345112'), 302557.91);\nTest.assertEquals(shortestDistance('554012,880122,57264,46440'), 970455.69);\nTest.assertEquals(shortestDistance('630784,416039,524502,375436'), 113773.75);\nTest.assertEquals(shortestDistance('886571,265647,524122,330452'), 368196.91);\nTest.assertEquals(shortestDistance('42971,568833,18259,875446'), 307607.24);\nTest.assertEquals(shortestDistance('45093,990482,476621,419202'), 715945.01);\nTest.assertEquals(shortestDistance('962825,911731,785646,414249'), 528091.6);\nTest.assertEquals(shortestDistance('599077,555829,902596,64498'), 577520.51);\nTest.assertEquals(shortestDistance('975786,796052,790562,750586'), 190722.54);\nTest.assertEquals(shortestDistance('837460,11408,405906,716556'), 826723.99);\nTest.assertEquals(shortestDistance('40030,968103,488002,311138'), 795161.57);\nTest.assertEquals(shortestDistance('928642,658202,500438,885384'), 484737.38);\nTest.assertEquals(shortestDistance('714565,594168,36900,210551'), 778711.66);\nTest.assertEquals(shortestDistance('566130,997223,626626,645183'), 357200.12);\nTest.assertEquals(shortestDistance('919597,32124,753895,464769'), 463291.32);\nTest.assertEquals(shortestDistance('355244,122215,584268,814715'), 729388.95);\nTest.assertEquals(shortestDistance('259225,482623,653099,569586'), 403360);\nTest.assertEquals(shortestDistance('682661,422839,811523,249041'), 216358.87);\nTest.assertEquals(shortestDistance('103723,465150,619447,919941'), 687608.97);\nTest.assertEquals(shortestDistance('219815,124635,568802,317383'), 398677.46);\nTest.assertEquals(shortestDistance('980447,343784,399239,943918'), 835442.13);\nTest.assertEquals(shortestDistance('216956,321014,512549,949110'), 694175.63);\nTest.assertEquals(shortestDistance('698759,259673,26693,711118'), 809614.29);\nTest.assertEquals(shortestDistance('795672,748382,49163,988008'), 784025.71);\nTest.assertEquals(shortestDistance('903483,653264,781876,65570'), 600143.73);\nTest.assertEquals(shortestDistance('919376,82952,880985,796731'), 714810.7);\nTest.assertEquals(shortestDistance('699472,338170,35767,265674'), 667652.6);\nTest.assertEquals(shortestDistance('21320,344713,989112,68274'), 1006498.82);\nTest.assertEquals(shortestDistance('27580,422725,357076,197481'), 399127.14);\nTest.assertEquals(shortestDistance('309846,503423,11697,349785'), 335406.41);\nTest.assertEquals(shortestDistance('811441,834502,108603,195285'), 950041.91);\nTest.assertEquals(shortestDistance('320805,522116,684457,537491'), 363976.88);\nTest.assertEquals(shortestDistance('978869,293122,123611,61023'), 886191.96);\nTest.assertEquals(shortestDistance('372037,754084,561192,69913'), 709837.71);\nTest.assertEquals(shortestDistance('447095,47539,24856,663570'), 746846.68);\nTest.assertEquals(shortestDistance('107344,944450,123931,158730'), 785895.06);\nTest.assertEquals(shortestDistance('744970,280834,694901,409190'), 137775.79);\nTest.assertEquals(shortestDistance('264596,599404,602064,740140'), 365638.17);\nTest.assertEquals(shortestDistance('133107,144263,502118,834307'), 782515.07);\nTest.assertEquals(shortestDistance('93265,489425,114391,244393'), 245941.03);\nTest.assertEquals(shortestDistance('848058,455949,47169,739486'), 849597.8);\nTest.assertEquals(shortestDistance('563826,590543,9819,472820'), 566376.61);\nTest.assertEquals(shortestDistance('605825,649925,938919,684851'), 334920.05);\nTest.assertEquals(shortestDistance('288871,935054,75022,368779'), 605308.82);\nTest.assertEquals(shortestDistance('827313,321627,723373,400174'), 130281.06);\nTest.assertEquals(shortestDistance('388627,585576,292757,886597'), 315918.82);\nTest.assertEquals(shortestDistance('718952,456557,846249,45384'), 430427.42);\nTest.assertEquals(shortestDistance('742553,221321,9469,438146'), 764477.1);\nTest.assertEquals(shortestDistance('482674,52480,684658,773884'), 749147.03);\nTest.assertEquals(shortestDistance('279188,855702,408122,696213'), 205087.1);\nTest.assertEquals(shortestDistance('459431,568607,49456,769126'), 456385.11);\nTest.assertEquals(shortestDistance('831138,740775,524089,747560'), 307123.96);\nTest.assertEquals(shortestDistance('130599,166262,269347,502838'), 364052.76);\nTest.assertEquals(shortestDistance('225577,395216,785735,674858'), 626080.37);\nTest.assertEquals(shortestDistance('872823,461723,570771,150063'), 434013.09);\nTest.assertEquals(shortestDistance('259189,128442,517291,595135'), 533309.48);\nTest.assertEquals(shortestDistance('552498,808950,484287,572203'), 246377.52);\nTest.assertEquals(shortestDistance('315432,607089,111339,94679'), 551559.57);\nTest.assertEquals(shortestDistance('561808,728340,3597,6843'), 912226.64);\nTest.assertEquals(shortestDistance('650197,734867,368390,655'), 786436.55);\nTest.assertEquals(shortestDistance('315497,602475,3717,600763'), 311784.7);\nTest.assertEquals(shortestDistance('669050,340488,427296,529317'), 306759.49);\nTest.assertEquals(shortestDistance('860795,140136,284613,164234'), 576685.71);\nTest.assertEquals(shortestDistance('115517,356078,412560,448556'), 311105.65);\nTest.assertEquals(shortestDistance('92562,62241,645398,552880'), 739157.81);\nTest.assertEquals(shortestDistance('197665,391890,815392,550453'), 637752.99);\nTest.assertEquals(shortestDistance('452010,179885,148345,612087'), 528214.92);\nTest.assertEquals(shortestDistance('820977,931315,914934,755450'), 199390.11);\nTest.assertEquals(shortestDistance('397611,892585,515240,662820'), 258125.04);\nTest.assertEquals(shortestDistance('210979,842673,189649,892257'), 53977.24);\nTest.assertEquals(shortestDistance('495278,492437,355648,112541'), 404743.76);\nTest.assertEquals(shortestDistance('168358,878254,629927,32993'), 963074.3);\nTest.assertEquals(shortestDistance('990921,53074,515460,229720'), 507214.92);\nTest.assertEquals(shortestDistance('943850,616793,117815,1707'), 1029885.73);\nTest.assertEquals(shortestDistance('955018,752478,703757,579382'), 305113.61);\nTest.assertEquals(shortestDistance('691726,90296,693251,497512'), 407218.86);\nTest.assertEquals(shortestDistance('996816,861314,57964,59300'), 1234775.09);\nTest.assertEquals(shortestDistance('572991,947493,609096,992250'), 57504.44);\nTest.assertEquals(shortestDistance('342754,643727,399592,280882'), 367269.73);\nTest.assertEquals(shortestDistance('641897,293135,339954,345361'), 306426.39);\nTest.assertEquals(shortestDistance('24912,468994,148803,282844'), 223608.59);\nTest.assertEquals(shortestDistance('283852,436085,331927,20882'), 417976.96);\nTest.assertEquals(shortestDistance('168632,546468,646323,571132'), 478327.3);\nTest.assertEquals(shortestDistance('475378,526135,612811,969808'), 464471.27);\nTest.assertEquals(shortestDistance('951912,217301,728519,75369'), 264667.95);\nTest.assertEquals(shortestDistance('16688,470214,963365,59761'), 1031827.99);\nTest.assertEquals(shortestDistance('392789,466532,777609,778650'), 495483.68);\nTest.assertEquals(shortestDistance('529529,688056,737206,969061'), 349418.87);\nTest.assertEquals(shortestDistance('826209,588938,754041,418629'), 184968.58);\nTest.assertEquals(shortestDistance('227343,256475,889774,80014'), 685531.41);\nTest.assertEquals(shortestDistance('459526,320745,600796,442888'), 186751.51);\nTest.assertEquals(shortestDistance('755550,286529,686307,616225'), 336888.77);\nTest.assertEquals(shortestDistance('678441,620690,231979,235229'), 589837.69);\nTest.assertEquals(shortestDistance('253216,809849,247804,462400'), 347491.15);\nTest.assertEquals(shortestDistance('917308,470351,324463,844309'), 700934.93);\nTest.assertEquals(shortestDistance('384266,296813,516971,895355'), 613076.78);\nTest.assertEquals(shortestDistance('640956,792087,558346,496523'), 306891.66);\nTest.assertEquals(shortestDistance('478161,789420,128561,255792'), 637949.06);\nTest.assertEquals(shortestDistance('864843,399930,453950,27259'), 554722.21);\nTest.assertEquals(shortestDistance('443133,658890,40272,985120'), 518384.99);\nTest.assertEquals(shortestDistance('782727,729930,792171,607233'), 123059.92);\nTest.assertEquals(shortestDistance('216057,935836,250960,978282'), 54953.46);\nTest.assertEquals(shortestDistance('983508,496156,298887,669632'), 706257.63);\nTest.assertEquals(shortestDistance('845221,526361,62859,91035'), 895320.63);\nTest.assertEquals(shortestDistance('732006,810059,839130,736553'), 129917.99);\nTest.assertEquals(shortestDistance('393287,541846,141386,787006'), 351507.52);\nTest.assertEquals(shortestDistance('153664,855900,556644,690892'), 435454.38);\nTest.assertEquals(shortestDistance('8486,285864,166239,782836'), 521408.84);\nTest.assertEquals(shortestDistance('538305,810949,586943,35828'), 776645.49);\nTest.assertEquals(shortestDistance('31635,63385,92064,330139'), 273513);\nTest.assertEquals(shortestDistance('793469,875089,903938,692653'), 213275.16);\nTest.assertEquals(shortestDistance('140814,828470,391058,85454'), 784024.77);\nTest.assertEquals(shortestDistance('740129,418067,669712,305260'), 132981.1);\nTest.assertEquals(shortestDistance('285477,151081,53775,127854'), 232863.29);\nTest.assertEquals(shortestDistance('374481,858815,117627,500850'), 440582.48);\nTest.assertEquals(shortestDistance('540845,935528,205612,585622'), 484577.52);\nTest.assertEquals(shortestDistance('476456,796858,77282,76657'), 823425.38);\nTest.assertEquals(shortestDistance('781225,233320,557875,754519'), 567039.35);\nTest.assertEquals(shortestDistance('362141,627182,431972,257275'), 376440.64);\nTest.assertEquals(shortestDistance('117392,301465,402801,288454'), 285705.41);\nTest.assertEquals(shortestDistance('704152,982945,166954,947533'), 538363.91);\nTest.assertEquals(shortestDistance('407523,954407,847863,890352'), 444974.56);\nTest.assertEquals(shortestDistance('100951,118561,878109,847370'), 1065428.14);\nTest.assertEquals(shortestDistance('948179,11163,729002,768218'), 788143.91);\nTest.assertEquals(shortestDistance('396895,629343,544609,553879'), 165874.17);\nTest.assertEquals(shortestDistance('555545,123529,761456,355803'), 310403.85);\nTest.assertEquals(shortestDistance('738115,287856,835048,255522'), 102183.63);\nTest.assertEquals(shortestDistance('8323,851294,108150,817132'), 105510.53);\nTest.assertEquals(shortestDistance('822521,357244,187497,61123'), 700673.34);\nTest.assertEquals(shortestDistance('523163,506381,630051,117067'), 403720.74);\nTest.assertEquals(shortestDistance('507806,950176,886294,250599'), 795399.99);\nTest.assertEquals(shortestDistance('241606,490087,963720,54907'), 843107.5);\nTest.assertEquals(shortestDistance('622433,206502,380979,789852'), 631345.59);\nTest.assertEquals(shortestDistance('517823,215636,759629,474358'), 354128.81);\nTest.assertEquals(shortestDistance('834314,451366,277591,137350'), 639176.46);\nTest.assertEquals(shortestDistance('727639,937927,703305,986913'), 54697.09);\nTest.assertEquals(shortestDistance('333579,69859,411316,725410'), 660144.04);\nTest.assertEquals(shortestDistance('941677,142034,895645,402253'), 264259.1);\nTest.assertEquals(shortestDistance('121812,2019,846333,701867'), 1007332.07);\nTest.assertEquals(shortestDistance('866872,799156,484108,883409'), 391927.09);\nTest.assertEquals(shortestDistance('937642,869409,309982,218029'), 904573.37);\nTest.assertEquals(shortestDistance('955233,770497,648975,373455'), 501434.26);\nTest.assertEquals(shortestDistance('595532,397881,463481,497762'), 165570.77);\nTest.assertEquals(shortestDistance('292230,898672,754911,358261'), 711419.54);\nTest.assertEquals(shortestDistance('523773,745444,786461,958786'), 338407.73);\nTest.assertEquals(shortestDistance('579705,628921,755783,596598'), 179020.22);\nTest.assertEquals(shortestDistance('263650,586339,682477,746801'), 448513.22);\nTest.assertEquals(shortestDistance('881396,781826,114902,573698'), 794248.27);\nTest.assertEquals(shortestDistance('420378,349009,570961,334580'), 151272.72);\nTest.assertEquals(shortestDistance('489436,859814,624383,366165'), 511761.69);\nTest.assertEquals(shortestDistance('137552,977101,121053,892304'), 86387.2);\nTest.assertEquals(shortestDistance('438230,291830,645626,674047'), 434859.67);\nTest.assertEquals(shortestDistance('524492,521904,409621,173865'), 366505.79);\nTest.assertEquals(shortestDistance('915951,95466,67102,920398'), 1183662.72);\nTest.assertEquals(shortestDistance('498858,45413,392917,794870'), 756907.72);\nTest.assertEquals(shortestDistance('556531,333838,321374,851577'), 568640.91);\nTest.assertEquals(shortestDistance('340691,211016,288743,383792'), 180416.58);\nTest.assertEquals(shortestDistance('62983,669335,427762,612934'), 369113.52);\nTest.assertEquals(shortestDistance('893002,408806,832175,206634'), 211124.23);\nTest.assertEquals(shortestDistance('977506,285482,754110,125577'), 274727.83);\nTest.assertEquals(shortestDistance('795748,371587,879096,620555'), 262548.96);\nTest.assertEquals(shortestDistance('878745,125916,868564,468477'), 342712.26);\nTest.assertEquals(shortestDistance('255638,384590,553646,106611'), 407530.48);\nTest.assertEquals(shortestDistance('295681,269737,919790,979659'), 945251.97);\nTest.assertEquals(shortestDistance('437117,743737,87140,87831'), 743435.66);\nTest.assertEquals(shortestDistance('159082,891855,706316,759432'), 563028.33);\nTest.assertEquals(shortestDistance('548579,236475,949205,501845'), 480543.89);\nTest.assertEquals(shortestDistance('762332,979209,519702,135582'), 877824.49);\nTest.assertEquals(shortestDistance('527755,874377,808802,414686'), 538797.95);\nTest.assertEquals(shortestDistance('510207,228479,859398,427831'), 402089.01);\nTest.assertEquals(shortestDistance('351675,696101,590293,538194'), 286134.88);\nTest.assertEquals(shortestDistance('747530,568205,363140,415032'), 413784.53);\nTest.assertEquals(shortestDistance('511778,166384,298062,130009'), 216789.46);\nTest.assertEquals(shortestDistance('806306,686819,107965,191864'), 855955.96);\nTest.assertEquals(shortestDistance('765956,633668,109049,249330'), 761079.83);\nTest.assertEquals(shortestDistance('93095,936536,483530,787628'), 417867.3);\nTest.assertEquals(shortestDistance('940154,61291,420986,932019'), 1013756.71);\nTest.assertEquals(shortestDistance('781754,127535,357750,559910'), 605580.33);\nTest.assertEquals(shortestDistance('724578,863052,70799,493709'), 750893.62);\nTest.assertEquals(shortestDistance('487285,760213,455440,653581'), 111285.61);\nTest.assertEquals(shortestDistance('680641,946984,540289,624391'), 351802.4);\nTest.assertEquals(shortestDistance('899184,991331,798567,164986'), 832448.1);\nTest.assertEquals(shortestDistance('562713,161536,523961,625562'), 465641.33);\nTest.assertEquals(shortestDistance('542023,454088,964526,50231'), 584473.49);\nTest.assertEquals(shortestDistance('244471,140665,528253,794020'), 712323.65);\nTest.assertEquals(shortestDistance('543096,115972,161398,44073'), 388410.65);\nTest.assertEquals(shortestDistance('515465,189354,395048,447478'), 284830.22);\nTest.assertEquals(shortestDistance('971880,420666,284838,665176'), 729254.31);\nTest.assertEquals(shortestDistance('769307,872393,3412,513111'), 845977.96);\nTest.assertEquals(shortestDistance('972129,311414,436406,721417'), 674612.18);\nTest.assertEquals(shortestDistance('703398,549436,83009,57530'), 791741.13);\nTest.assertEquals(shortestDistance('953718,77863,819405,237685'), 208765.55);\nTest.assertEquals(shortestDistance('156313,110779,72336,200160'), 122642.16);\nTest.assertEquals(shortestDistance('662613,960374,69619,866342'), 600403.12);\nTest.assertEquals(shortestDistance('131067,775294,717696,781030'), 586657.04);\nTest.assertEquals(shortestDistance('830047,554138,652748,102563'), 485133.92);\nTest.assertEquals(shortestDistance('559596,200854,804979,256316'), 251572.75);\nTest.assertEquals(shortestDistance('957222,53362,317420,649631'), 874576.08);\nTest.assertEquals(shortestDistance('502990,777384,645607,917681'), 200057.13);\nTest.assertEquals(shortestDistance('600452,378116,101557,754466'), 624928.43);\nTest.assertEquals(shortestDistance('831197,579508,751936,11441'), 573569.89);\nTest.assertEquals(shortestDistance('663393,961340,979651,946654'), 316598.8);\nTest.assertEquals(shortestDistance('632603,953689,601599,82765'), 871475.68);\nTest.assertEquals(shortestDistance('978799,809595,730783,218019'), 641462.47);\nTest.assertEquals(shortestDistance('72279,860223,922783,987188'), 859928.58);\nTest.assertEquals(shortestDistance('303523,377097,999002,865632'), 849916.16);\nTest.assertEquals(shortestDistance('535256,976753,243038,850182'), 318451.84);\nTest.assertEquals(shortestDistance('536521,916395,717264,362066'), 583051.17);\nTest.assertEquals(shortestDistance('419077,583257,619010,10663'), 606495.75);\nTest.assertEquals(shortestDistance('831818,748634,717195,786409'), 120687.13);\nTest.assertEquals(shortestDistance('476105,988461,869218,401866'), 706138.46);\nTest.assertEquals(shortestDistance('114425,990213,681474,643456'), 664669.08);\nTest.assertEquals(shortestDistance('378336,809829,381265,224472'), 585364.33);\nTest.assertEquals(shortestDistance('182212,808411,114705,698778'), 128750.11);\nTest.assertEquals(shortestDistance('136920,742059,441819,130713'), 683159.81);\nTest.assertEquals(shortestDistance('882382,793581,462956,919231'), 437842.54);\nTest.assertEquals(shortestDistance('124164,251582,528462,653536'), 570108.67);\nTest.assertEquals(shortestDistance('578730,814373,344012,38655'), 810451.08);\nTest.assertEquals(shortestDistance('370700,354764,667668,310981'), 300178.19);\nTest.assertEquals(shortestDistance('181719,249323,211024,304992'), 62911.21);\nTest.assertEquals(shortestDistance('135684,650072,917041,301665'), 855515.17);\nTest.assertEquals(shortestDistance('784377,882757,345735,234375'), 782819.28);\nTest.assertEquals(shortestDistance('958626,130182,464116,723181'), 772132.08);\nTest.assertEquals(shortestDistance('481633,840715,802874,28294'), 873626.73);\nTest.assertEquals(shortestDistance('495486,383974,49334,503663'), 461927.55);\nTest.assertEquals(shortestDistance('902548,167880,507907,995303'), 916717.15);\nTest.assertEquals(shortestDistance('946112,569002,862233,142279'), 434888.73);\nTest.assertEquals(shortestDistance('748170,617365,909749,693561'), 178643.79);\nTest.assertEquals(shortestDistance('575683,51729,292743,698161'), 705641.11);\nTest.assertEquals(shortestDistance('113772,215353,651982,489825'), 604156.34);\nTest.assertEquals(shortestDistance('607515,715782,901035,394090'), 435476.44);\nTest.assertEquals(shortestDistance('270927,824337,808010,643618'), 566672.31);\nTest.assertEquals(shortestDistance('34740,983000,331885,751392'), 376745.83);\nTest.assertEquals(shortestDistance('485549,872568,521277,318756'), 554963.26);\nTest.assertEquals(shortestDistance('185607,920976,945378,793977'), 770312.09);\nTest.assertEquals(shortestDistance('50788,628620,979997,215761'), 1016799.84);\nTest.assertEquals(shortestDistance('165780,803149,151526,945661'), 143223.07);\nTest.assertEquals(shortestDistance('764304,831600,496460,568784'), 375250.13);\nTest.assertEquals(shortestDistance('30480,643794,17223,108175'), 535783.04);\nTest.assertEquals(shortestDistance('21781,165152,33419,70758'), 95108.73);\nTest.assertEquals(shortestDistance('740143,705366,217224,163641'), 752934.43);\nTest.assertEquals(shortestDistance('644120,795617,310946,988762'), 385110.25);\nTest.assertEquals(shortestDistance('839690,498198,837114,847678'), 349489.49);\nTest.assertEquals(shortestDistance('185084,28467,728989,886832'), 1016180.65);\nTest.assertEquals(shortestDistance('320871,625554,871395,69288'), 782629.25);\nTest.assertEquals(shortestDistance('567752,529624,396804,58466'), 501211.61);\nTest.assertEquals(shortestDistance('671556,172853,817460,166503'), 146042.12);\nTest.assertEquals(shortestDistance('124410,441642,54454,761215'), 327140.25);\nTest.assertEquals(shortestDistance('377252,500966,196847,711636'), 277358.64);\nTest.assertEquals(shortestDistance('352938,374672,74505,64364'), 416912.45);\nTest.assertEquals(shortestDistance('634552,32312,964905,79014'), 333637.8);\nTest.assertEquals(shortestDistance('881678,371592,49425,316997'), 834041.77);\nTest.assertEquals(shortestDistance('462106,893099,370316,437203'), 465044.69);\nTest.assertEquals(shortestDistance('709554,401921,71953,731851'), 717905.87);\nTest.assertEquals(shortestDistance('761064,305179,251541,495133'), 543779.56);\nTest.assertEquals(shortestDistance('270058,384180,19820,513311'), 281591.68);\nTest.assertEquals(shortestDistance('945867,27895,648919,414337'), 487355.65);\nTest.assertEquals(shortestDistance('909086,285573,301993,184928'), 615379.01);\nTest.assertEquals(shortestDistance('322888,826405,3415,762957'), 325712.52);\nTest.assertEquals(shortestDistance('263611,280814,159183,185878'), 141131.33);\nTest.assertEquals(shortestDistance('127096,543040,332051,159323'), 435023.32);\nTest.assertEquals(shortestDistance('458139,314682,193032,353309'), 267906.26);\nTest.assertEquals(shortestDistance('112850,175221,217220,808761'), 642079.46);\nTest.assertEquals(shortestDistance('859555,728143,426354,923390'), 475167.86);\nTest.assertEquals(shortestDistance('351022,43243,680648,768261'), 796432.29);\nTest.assertEquals(shortestDistance('211327,599054,881590,875543'), 725050.8);\nTest.assertEquals(shortestDistance('995035,195931,923717,152863'), 83313.32);\nTest.assertEquals(shortestDistance('406192,286280,900789,835826'), 739342.27);\nTest.assertEquals(shortestDistance('769705,875227,375318,543771'), 515173.94);\nTest.assertEquals(shortestDistance('108608,734914,862556,465377'), 800679.57);\nTest.assertEquals(shortestDistance('493127,951182,429416,101653'), 851914.67);\nTest.assertEquals(shortestDistance('794628,166173,677931,114497'), 127626.79);\nTest.assertEquals(shortestDistance('518114,341486,267910,8200'), 416751.24);\nTest.assertEquals(shortestDistance('733728,785539,661911,72691'), 716456.53);\nTest.assertEquals(shortestDistance('788423,855307,689294,65682'), 795822.97);\nTest.assertEquals(shortestDistance('641733,629899,785846,313782'), 347416.92);\nTest.assertEquals(shortestDistance('829785,291839,509175,755106'), 563388.93);\nTest.assertEquals(shortestDistance('922739,762089,823340,741293'), 101551.14);\nTest.assertEquals(shortestDistance('538319,148284,429731,321570'), 204497.9);\nTest.assertEquals(shortestDistance('956052,177395,274793,731820'), 878351.24);\nTest.assertEquals(shortestDistance('984436,306878,34614,838122'), 1088293.17);\nTest.assertEquals(shortestDistance('318117,33994,372418,509573'), 478668.97);\nTest.assertEquals(shortestDistance('502365,825565,940830,487738'), 553514.8);\nTest.assertEquals(shortestDistance('384495,957417,212725,527465'), 462994.23);\nTest.assertEquals(shortestDistance('343231,699542,42257,376673'), 441395.22);\nTest.assertEquals(shortestDistance('962547,633946,473094,352123'), 564790.62);\nTest.assertEquals(shortestDistance('337989,233737,321073,581843'), 348516.77);\nTest.assertEquals(shortestDistance('443063,355808,847613,943927'), 713823.97);\nTest.assertEquals(shortestDistance('192028,445887,436546,197395'), 348622.04);\nTest.assertEquals(shortestDistance('762780,665190,653618,106417'), 569336.11);\nTest.assertEquals(shortestDistance('34833,191389,526886,605666'), 643227.48);\nTest.assertEquals(shortestDistance('242186,637824,466329,979076'), 408280.56);\nTest.assertEquals(shortestDistance('267452,695983,620152,465375'), 421399.26);\nTest.assertEquals(shortestDistance('631186,867865,188722,253840'), 756836.24);\nTest.assertEquals(shortestDistance('975731,331378,71185,910650'), 1074131.98);\nTest.assertEquals(shortestDistance('952214,66307,721396,511858'), 501789.44);\nTest.assertEquals(shortestDistance('223447,431343,368798,600014'), 222658.53);\nTest.assertEquals(shortestDistance('90793,296006,607725,615691'), 607797);\nTest.assertEquals(shortestDistance('181761,168772,639985,591935'), 623727.63);\nTest.assertEquals(shortestDistance('736137,706848,29083,949167'), 747424.82);\nTest.assertEquals(shortestDistance('483100,880096,498332,178742'), 701519.38);\nTest.assertEquals(shortestDistance('26885,682420,385813,481230'), 411468.98);\nTest.assertEquals(shortestDistance('315460,678240,184384,737905'), 144016.77);\nTest.assertEquals(shortestDistance('540333,247351,823045,587302'), 442145.63);\nTest.assertEquals(shortestDistance('834075,628305,148595,700754'), 689297.97);\nTest.assertEquals(shortestDistance('400952,189789,715885,397292'), 377147.57);\nTest.assertEquals(shortestDistance('789786,557695,480429,46433'), 597570.57);\nTest.assertEquals(shortestDistance('954482,291709,913515,385161'), 102037.11);\nTest.assertEquals(shortestDistance('677296,794660,280956,438719'), 532709.48);\nTest.assertEquals(shortestDistance('344960,707215,816725,200684'), 692196.41);\nTest.assertEquals(shortestDistance('346931,739942,581888,910193'), 290155.47);\nTest.assertEquals(shortestDistance('483317,563372,997431,126527'), 674645.65);\nTest.assertEquals(shortestDistance('650623,239129,677039,151635'), 91394.78);\nTest.assertEquals(shortestDistance('804694,424841,432462,420555'), 372256.67);\nTest.assertEquals(shortestDistance('82254,248165,589831,236960'), 507700.66);\nTest.assertEquals(shortestDistance('428495,413115,380346,869134'), 458553.87);",
    "new_tests": "const shortestDistance = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(shortestDistance('1,1,2,1')).toEqual(1);\n        expect(shortestDistance('1,1,3,1')).toEqual(2);\n        expect(shortestDistance('-5,1,3,1')).toEqual(8);\n        expect(shortestDistance('-5,2,3,1')).toEqual(8.06);\n        expect(shortestDistance('18174,773931,851747,490653')).toEqual(880392.17);\n        expect(shortestDistance('737017,82252,882429,883228')).toEqual(814068.3);\n        expect(shortestDistance('700230,523734,877217,172766')).toEqual(393068.61);\n        expect(shortestDistance('354972,19774,976623,664356')).toEqual(895508.75);\n        expect(shortestDistance('587568,609626,654834,18784')).toEqual(594658.71);\n        expect(shortestDistance('66662,790481,873587,545905')).toEqual(843175.77);\n        expect(shortestDistance('332500,825806,905569,98242')).toEqual(926151.96);\n        expect(shortestDistance('699436,718399,148249,268862')).toEqual(711259.88);\n        expect(shortestDistance('569116,693885,298926,707866')).toEqual(270551.48);\n        expect(shortestDistance('31746,315604,33219,558330')).toEqual(242730.47);\n        expect(shortestDistance('269374,778748,642370,575892')).toEqual(424589.89);\n        expect(shortestDistance('31569,18273,773659,944231')).toEqual(1186632.12);\n        expect(shortestDistance('939517,332491,433853,846748')).toEqual(721218.65);\n        expect(shortestDistance('683331,360682,350306,419799')).toEqual(338231.39);\n        expect(shortestDistance('432164,634064,426613,762549')).toEqual(128604.86);\n        expect(shortestDistance('104921,837065,896870,361030')).toEqual(924008.95);\n        expect(shortestDistance('922238,809131,213159,45327')).toEqual(1042204.19);\n        expect(shortestDistance('758369,659880,695294,282443')).toEqual(382671.07);\n        expect(shortestDistance('919543,155658,842376,916848')).toEqual(765091.47);\n        expect(shortestDistance('584808,222082,926167,794435')).toEqual(666418.73);\n        expect(shortestDistance('875800,489178,754311,314534')).toEqual(212744.22);\n        expect(shortestDistance('696995,146484,394853,798083')).toEqual(718241.63);\n        expect(shortestDistance('914890,520597,870213,598643')).toEqual(89928.93);\n        expect(shortestDistance('793324,200650,498595,277727')).toEqual(304640.85);\n        expect(shortestDistance('119956,978240,414949,858765')).toEqual(318268.98);\n        expect(shortestDistance('894439,634194,904845,129983')).toEqual(504318.37);\n        expect(shortestDistance('520277,802110,458152,477708')).toEqual(330297.1);\n        expect(shortestDistance('338422,61534,693630,455807')).toEqual(530682.51);\n        expect(shortestDistance('326475,507361,443150,995403')).toEqual(501794.83);\n        expect(shortestDistance('605200,40283,99999,20835')).toEqual(505575.19);\n        expect(shortestDistance('385263,547922,697516,153863')).toEqual(502776.72);\n        expect(shortestDistance('490542,851632,523684,755368')).toEqual(101809.38);\n        expect(shortestDistance('319016,40735,318348,512483')).toEqual(471748.47);\n        expect(shortestDistance('676510,654662,413220,936024')).toEqual(385339.07);\n        expect(shortestDistance('62095,384260,65760,834546')).toEqual(450300.91);\n        expect(shortestDistance('360834,491279,297678,138687')).toEqual(358203.57);\n        expect(shortestDistance('973288,619071,778859,969590')).toEqual(400831.89);\n        expect(shortestDistance('668988,184022,15875,100158')).toEqual(658475.33);\n        expect(shortestDistance('457183,48000,68279,402987')).toEqual(526556.83);\n        expect(shortestDistance('833743,981199,628205,209429')).toEqual(798670.65);\n        expect(shortestDistance('369614,533996,563940,20842')).toEqual(548716.34);\n        expect(shortestDistance('94270,984126,249933,818517')).toEqual(227282.45);\n        expect(shortestDistance('347817,705519,187676,298918')).toEqual(437000.59);\n        expect(shortestDistance('589257,639901,207017,470775')).toEqual(417984.48);\n        expect(shortestDistance('720501,533661,423905,831220')).toEqual(420131.58);\n        expect(shortestDistance('376448,538260,703368,713873')).toEqual(371101.89);\n        expect(shortestDistance('103436,743951,777056,34017')).toEqual(978657.34);\n        expect(shortestDistance('479976,493641,625960,287062')).toEqual(252954.96);\n        expect(shortestDistance('443616,635525,725621,880480')).toEqual(373536.84);\n        expect(shortestDistance('689926,343623,270015,491008')).toEqual(445025.38);\n        expect(shortestDistance('683509,749535,792876,353399')).toEqual(410956.05);\n        expect(shortestDistance('44356,112187,505140,884072')).toEqual(898959.59);\n        expect(shortestDistance('167547,492387,436442,568397')).toEqual(279431.64);\n        expect(shortestDistance('98978,191728,59917,949388')).toEqual(758666.22);\n        expect(shortestDistance('256606,80618,960041,844954')).toEqual(1038763.84);\n        expect(shortestDistance('273825,411965,770632,230618')).toEqual(528870.43);\n        expect(shortestDistance('357906,953475,165513,78958')).toEqual(895430.09);\n        expect(shortestDistance('46709,133109,372387,443731')).toEqual(450057.98);\n        expect(shortestDistance('771129,297256,493434,908906')).toEqual(671736.73);\n        expect(shortestDistance('696147,790948,180486,716733')).toEqual(520974.22);\n        expect(shortestDistance('140229,70416,59694,29963')).toEqual(90123.98);\n        expect(shortestDistance('854663,153471,705769,351962')).toEqual(248129.2);\n        expect(shortestDistance('334178,435118,351850,224841')).toEqual(211018.28);\n        expect(shortestDistance('61590,111883,316978,65479')).toEqual(259569.57);\n        expect(shortestDistance('491029,158927,682582,471767')).toEqual(366826.14);\n        expect(shortestDistance('681131,448805,403903,854937')).toEqual(491730.18);\n        expect(shortestDistance('418689,20793,201298,919092')).toEqual(924229.38);\n        expect(shortestDistance('377349,272057,449274,452167')).toEqual(193940.24);\n        expect(shortestDistance('95939,294031,442783,196559')).toEqual(360279.82);\n        expect(shortestDistance('392396,11336,239723,824573')).toEqual(827443.93);\n        expect(shortestDistance('476661,823224,779910,625416')).toEqual(362060.71);\n        expect(shortestDistance('930729,595958,850113,823036')).toEqual(240963.39);\n        expect(shortestDistance('368089,974540,854645,815427')).toEqual(511911.8);\n        expect(shortestDistance('185861,46236,194344,204368')).toEqual(158359.37);\n        expect(shortestDistance('65208,922882,143684,894190')).toEqual(83556.65);\n        expect(shortestDistance('69862,784498,159427,117479')).toEqual(673005.38);\n        expect(shortestDistance('69071,110740,126307,480093')).toEqual(373761.42);\n        expect(shortestDistance('20435,815574,373952,581528')).toEqual(423971.46);\n        expect(shortestDistance('88510,970855,934609,766627')).toEqual(870397.95);\n        expect(shortestDistance('770717,575471,428348,489533')).toEqual(352989.9);\n        expect(shortestDistance('497446,352002,282973,801128')).toEqual(497707.58);\n        expect(shortestDistance('108554,657709,898186,642708')).toEqual(789774.48);\n        expect(shortestDistance('876822,674367,912196,161644')).toEqual(513941.82);\n        expect(shortestDistance('791517,917962,411937,677946')).toEqual(449097.6);\n        expect(shortestDistance('641509,756447,653036,503197')).toEqual(253512.2);\n        expect(shortestDistance('879535,989950,929002,506286')).toEqual(486187.05);\n        expect(shortestDistance('219179,707345,82894,965391')).toEqual(291824.16);\n        expect(shortestDistance('904255,356305,194710,365532')).toEqual(709604.99);\n        expect(shortestDistance('425045,87601,125964,241256')).toEqual(336242.92);\n        expect(shortestDistance('663537,896650,517508,761193')).toEqual(199180.99);\n        expect(shortestDistance('683031,93644,848163,146098')).toEqual(173262.8);\n        expect(shortestDistance('206390,776660,310668,605279')).toEqual(200612.43);\n        expect(shortestDistance('813873,740564,393366,672006')).toEqual(426059.08);\n        expect(shortestDistance('482520,519180,907438,931168')).toEqual(591852.53);\n        expect(shortestDistance('559979,206898,280694,592637')).toEqual(476229.66);\n        expect(shortestDistance('722282,852855,978535,314749')).toEqual(596006.43);\n        expect(shortestDistance('712795,775343,317925,12070')).toEqual(859364.88);\n        expect(shortestDistance('424606,669079,951575,221656')).toEqual(691291.3);\n        expect(shortestDistance('438429,826928,212985,262503')).toEqual(607783.33);\n        expect(shortestDistance('545333,975453,551904,607297')).toEqual(368214.64);\n        expect(shortestDistance('703334,797170,541269,750164')).toEqual(168744.27);\n        expect(shortestDistance('114506,127974,932704,402481')).toEqual(863019.15);\n        expect(shortestDistance('289328,106639,974313,47820')).toEqual(687505.73);\n        expect(shortestDistance('213243,196798,944932,814588')).toEqual(957618.54);\n        expect(shortestDistance('794028,165117,112200,993216')).toEqual(1072677.67);\n        expect(shortestDistance('838370,850414,850281,699623')).toEqual(151260.69);\n        expect(shortestDistance('986040,955399,221428,793074')).toEqual(781652.68);\n        expect(shortestDistance('660578,950161,892089,497077')).toEqual(508804.93);\n        expect(shortestDistance('365854,843310,42636,644030')).toEqual(379713.57);\n        expect(shortestDistance('295819,811002,735554,197231')).toEqual(755037.56);\n        expect(shortestDistance('361038,299921,119925,989125')).toEqual(730162.74);\n        expect(shortestDistance('470025,931939,233662,120483')).toEqual(845179.45);\n        expect(shortestDistance('661762,457131,644616,902272')).toEqual(445471.09);\n        expect(shortestDistance('288742,718803,195961,803288')).toEqual(125483.18);\n        expect(shortestDistance('578168,61932,776679,661796')).toEqual(631857.13);\n        expect(shortestDistance('887152,874897,963989,399706')).toEqual(481363.08);\n        expect(shortestDistance('670430,449104,237269,295525')).toEqual(459581.29);\n        expect(shortestDistance('191074,491169,135526,579536')).toEqual(104375.8);\n        expect(shortestDistance('720029,636519,221941,531532')).toEqual(509032.34);\n        expect(shortestDistance('826770,27476,132993,510022')).toEqual(845090.04);\n        expect(shortestDistance('470058,242059,32271,931907')).toEqual(817035.94);\n        expect(shortestDistance('159160,111446,417224,347310')).toEqual(349612.43);\n        expect(shortestDistance('189266,761987,505012,168406')).toEqual(672334.69);\n        expect(shortestDistance('140220,526312,90768,617989')).toEqual(104164.16);\n        expect(shortestDistance('4115,522284,491584,908407')).toEqual(621865.74);\n        expect(shortestDistance('613647,615955,390024,425512')).toEqual(293727.39);\n        expect(shortestDistance('981094,353784,886542,3247')).toEqual(363065.1);\n        expect(shortestDistance('55566,243947,712750,627546')).toEqual(760946.12);\n        expect(shortestDistance('183757,435586,10021,236721')).toEqual(264067.2);\n        expect(shortestDistance('671670,864401,20600,232511')).toEqual(907291.09);\n        expect(shortestDistance('783088,642898,786828,597251')).toEqual(45799.96);\n        expect(shortestDistance('366483,461603,634831,755384')).toEqual(397891.85);\n        expect(shortestDistance('907558,303663,78345,916718')).toEqual(1031227.73);\n        expect(shortestDistance('695592,522425,40063,732080')).toEqual(688239.41);\n        expect(shortestDistance('226658,434877,742369,62748')).toEqual(635954.27);\n        expect(shortestDistance('122045,877101,806832,387515')).toEqual(841800.27);\n        expect(shortestDistance('56753,406100,212236,791583')).toEqual(415658.64);\n        expect(shortestDistance('533771,474720,795901,651904')).toEqual(316395.81);\n        expect(shortestDistance('469977,582462,692119,919582')).toEqual(403728.82);\n        expect(shortestDistance('692398,906861,782884,722277')).toEqual(205569.86);\n        expect(shortestDistance('910013,396885,717869,424441')).toEqual(194109.89);\n        expect(shortestDistance('854773,732913,32576,189852')).toEqual(985354.33);\n        expect(shortestDistance('296855,811279,179385,79171')).toEqual(741472.4);\n        expect(shortestDistance('159830,827860,78520,196250')).toEqual(636822.2);\n        expect(shortestDistance('231612,548996,793451,152810')).toEqual(687478.3);\n        expect(shortestDistance('675873,34443,867973,682501')).toEqual(675930.16);\n        expect(shortestDistance('794609,340064,525998,263750')).toEqual(279241.29);\n        expect(shortestDistance('66452,495305,297822,176681')).toEqual(393768.12);\n        expect(shortestDistance('968867,737052,711759,636913')).toEqual(275920.9);\n        expect(shortestDistance('396255,874456,722354,660991')).toEqual(389753.59);\n        expect(shortestDistance('725756,112155,607896,558810')).toEqual(461943.36);\n        expect(shortestDistance('931532,145007,803085,606950')).toEqual(479468.42);\n        expect(shortestDistance('871362,290966,310334,610239')).toEqual(645513.49);\n        expect(shortestDistance('489577,619032,670261,516242')).toEqual(207876.15);\n        expect(shortestDistance('236453,185212,943182,305965')).toEqual(716970.83);\n        expect(shortestDistance('956753,435303,411632,803840')).toEqual(658009.44);\n        expect(shortestDistance('193813,443290,198706,94534')).toEqual(348790.32);\n        expect(shortestDistance('834020,383183,797257,856721')).toEqual(474962.9);\n        expect(shortestDistance('862017,196675,941021,196409')).toEqual(79004.45);\n        expect(shortestDistance('398348,619495,773604,811140')).toEqual(421360.74);\n        expect(shortestDistance('405935,449111,393793,535401')).toEqual(87140.07);\n        expect(shortestDistance('331747,175784,318792,270641')).toEqual(95737.57);\n        expect(shortestDistance('717340,548577,230243,954094')).toEqual(633804.01);\n        expect(shortestDistance('513639,534120,183652,888189')).toEqual(484000.29);\n        expect(shortestDistance('282083,916154,3777,569729')).toEqual(444369.79);\n        expect(shortestDistance('565992,703330,59229,352751')).toEqual(616209.68);\n        expect(shortestDistance('44884,668578,932420,983962')).toEqual(941906.16);\n        expect(shortestDistance('697511,667658,341618,550196')).toEqual(374776.13);\n        expect(shortestDistance('717768,517371,120971,460675')).toEqual(599484.02);\n        expect(shortestDistance('566888,668783,685393,795821')).toEqual(173729.93);\n        expect(shortestDistance('941122,477341,742102,415072')).toEqual(208533.9);\n        expect(shortestDistance('753220,275687,794577,934926')).toEqual(660534.98);\n        expect(shortestDistance('584003,626254,965634,891750')).toEqual(464898.21);\n        expect(shortestDistance('498205,447935,295659,605252')).toEqual(256463.49);\n        expect(shortestDistance('715516,395666,591609,159070')).toEqual(267077.91);\n        expect(shortestDistance('66135,993230,525444,148550')).toEqual(961482.74);\n        expect(shortestDistance('878721,683651,593086,924221')).toEqual(373445.15);\n        expect(shortestDistance('879104,20655,366048,502087')).toEqual(703564.66);\n        expect(shortestDistance('512595,645925,954937,436572')).toEqual(489382.39);\n        expect(shortestDistance('1571,448586,811401,608207')).toEqual(825411.11);\n        expect(shortestDistance('912271,167025,656427,2426')).toEqual(304218.64);\n        expect(shortestDistance('620678,849883,504780,850218')).toEqual(115898.48);\n        expect(shortestDistance('172976,509386,128958,365857')).toEqual(150127.14);\n        expect(shortestDistance('414115,657484,501127,76183')).toEqual(587777.12);\n        expect(shortestDistance('908486,336929,322785,568412')).toEqual(629785.71);\n        expect(shortestDistance('8973,498887,92957,294990')).toEqual(220515.98);\n        expect(shortestDistance('189513,682768,813614,697435')).toEqual(624273.32);\n        expect(shortestDistance('91066,359474,340002,69423')).toEqual(382228.62);\n        expect(shortestDistance('783560,613606,961562,969903')).toEqual(398286.66);\n        expect(shortestDistance('939190,352186,984363,67030')).toEqual(288711.87);\n        expect(shortestDistance('717607,427025,861326,35039')).toEqual(417502.31);\n        expect(shortestDistance('682254,844466,625869,99241')).toEqual(747355.05);\n        expect(shortestDistance('654595,449571,63460,75840')).toEqual(699367.89);\n        expect(shortestDistance('136879,692900,891393,289508')).toEqual(855579.62);\n        expect(shortestDistance('487253,949273,141591,551074')).toEqual(527299.4);\n        expect(shortestDistance('437744,652384,123059,568835')).toEqual(325587.29);\n        expect(shortestDistance('355217,164297,978511,199998')).toEqual(624315.6);\n        expect(shortestDistance('258839,892916,901754,172722')).toEqual(965411.36);\n        expect(shortestDistance('329167,554752,578622,516394')).toEqual(252386.87);\n        expect(shortestDistance('670704,188868,895234,826451')).toEqual(675962.87);\n        expect(shortestDistance('783738,811578,637011,511106')).toEqual(334383.37);\n        expect(shortestDistance('783663,762770,68949,330563')).toEqual(835235.89);\n        expect(shortestDistance('111997,198869,705056,47716')).toEqual(612018.14);\n        expect(shortestDistance('189886,81603,595108,608358')).toEqual(664586.86);\n        expect(shortestDistance('740009,102961,134771,171519')).toEqual(609108.56);\n        expect(shortestDistance('905303,923489,183031,551477')).toEqual(812446.78);\n        expect(shortestDistance('159939,251171,391346,918289')).toEqual(706113.04);\n        expect(shortestDistance('496574,765448,184913,100022')).toEqual(734795.44);\n        expect(shortestDistance('260854,763252,957527,403793')).toEqual(783941.35);\n        expect(shortestDistance('560283,175217,892839,196432')).toEqual(333232.01);\n        expect(shortestDistance('268792,227226,480783,801639')).toEqual(612283.01);\n        expect(shortestDistance('265777,833678,535506,759994')).toEqual(279612.35);\n        expect(shortestDistance('977106,453611,196373,344911')).toEqual(788263.73);\n        expect(shortestDistance('75023,914918,435537,111272')).toEqual(880804.88);\n        expect(shortestDistance('93640,215647,905863,676918')).toEqual(934064.85);\n        expect(shortestDistance('190391,35984,342417,329318')).toEqual(330388.77);\n        expect(shortestDistance('890977,594165,338385,967612')).toEqual(666948.71);\n        expect(shortestDistance('136177,939588,367039,778456')).toEqual(281532.92);\n        expect(shortestDistance('359399,388517,853529,773638')).toEqual(626484.35);\n        expect(shortestDistance('275455,354887,977449,62630')).toEqual(760401.03);\n        expect(shortestDistance('2051,871314,980454,662933')).toEqual(1000347.48);\n        expect(shortestDistance('312989,393703,284789,945848')).toEqual(552864.67);\n        expect(shortestDistance('401173,872732,868525,991186')).toEqual(482129.9);\n        expect(shortestDistance('71815,554820,169905,87354')).toEqual(477646.43);\n        expect(shortestDistance('409861,254977,18947,34018')).toEqual(449039.68);\n        expect(shortestDistance('122489,321452,457839,579539')).toEqual(423164.89);\n        expect(shortestDistance('857268,522627,330130,603476')).toEqual(533302.01);\n        expect(shortestDistance('826391,896756,494421,797889')).toEqual(346379.51);\n        expect(shortestDistance('181113,989523,436790,920471')).toEqual(264837.51);\n        expect(shortestDistance('760167,744232,867621,176034')).toEqual(578269.25);\n        expect(shortestDistance('96125,616706,162207,474713')).toEqual(156616.87);\n        expect(shortestDistance('859743,341617,328894,160307')).toEqual(560958.09);\n        expect(shortestDistance('390939,648083,583402,663194')).toEqual(193055.3);\n        expect(shortestDistance('576733,445640,259911,577430')).toEqual(343139.6);\n        expect(shortestDistance('110700,200973,722159,938044')).toEqual(957682.5);\n        expect(shortestDistance('835116,582247,311073,61472')).toEqual(738801.51);\n        expect(shortestDistance('328631,346225,594626,839428')).toEqual(560359.29);\n        expect(shortestDistance('6268,16097,448970,568458')).toEqual(707875.51);\n        expect(shortestDistance('541803,551747,728566,445611')).toEqual(214814.5);\n        expect(shortestDistance('218249,887032,858030,539409')).toEqual(728121.88);\n        expect(shortestDistance('262122,607653,602370,206664')).toEqual(525890.56);\n        expect(shortestDistance('435522,897696,699863,31248')).toEqual(905874.33);\n        expect(shortestDistance('879638,185429,148403,621904')).toEqual(851595.59);\n        expect(shortestDistance('349007,565475,270741,946541')).toEqual(389020.39);\n        expect(shortestDistance('119173,82175,684800,570813')).toEqual(747463.04);\n        expect(shortestDistance('306796,887129,820264,297982')).toEqual(781500.85);\n        expect(shortestDistance('654168,569865,656277,1765')).toEqual(568103.91);\n        expect(shortestDistance('384453,934986,483057,919829')).toEqual(99762.13);\n        expect(shortestDistance('157543,984971,761224,432267')).toEqual(818481.8);\n        expect(shortestDistance('205870,32510,966066,729109')).toEqual(1031090.75);\n        expect(shortestDistance('333459,434863,264616,757761')).toEqual(330155.23);\n        expect(shortestDistance('515980,184292,881485,343273')).toEqual(398583.57);\n        expect(shortestDistance('744286,15175,583775,547461')).toEqual(555960.58);\n        expect(shortestDistance('938558,209345,684442,653061')).toEqual(511330.45);\n        expect(shortestDistance('844481,175088,928878,162821')).toEqual(85283.84);\n        expect(shortestDistance('40533,442617,849851,12707')).toEqual(916415.97);\n        expect(shortestDistance('178906,92185,446614,232948')).toEqual(302459.58);\n        expect(shortestDistance('653402,613320,143037,562504')).toEqual(512888.58);\n        expect(shortestDistance('871374,675790,890711,370416')).toEqual(305985.62);\n        expect(shortestDistance('900960,993066,803140,588702')).toEqual(416027.64);\n        expect(shortestDistance('921794,662363,103471,811928')).toEqual(831878.73);\n        expect(shortestDistance('624369,167821,971226,949411')).toEqual(855098.07);\n        expect(shortestDistance('332381,819753,885542,660398')).toEqual(575657.11);\n        expect(shortestDistance('91300,895062,853013,707268')).toEqual(784521.05);\n        expect(shortestDistance('365791,990675,107676,311105')).toEqual(726937.92);\n        expect(shortestDistance('193073,67347,918462,512104')).toEqual(850880.71);\n        expect(shortestDistance('247722,255901,730198,420488')).toEqual(509776.39);\n        expect(shortestDistance('491354,552070,964232,370556')).toEqual(506518.44);\n        expect(shortestDistance('91905,18186,742354,157532')).toEqual(665207.64);\n        expect(shortestDistance('496714,522406,874291,98750')).toEqual(567493.43);\n        expect(shortestDistance('253773,184237,235467,843121')).toEqual(659138.25);\n        expect(shortestDistance('26797,379081,828913,157227')).toEqual(832231.5);\n        expect(shortestDistance('316821,145413,882607,605485')).toEqual(729232.5);\n        expect(shortestDistance('104792,882998,571670,580025')).toEqual(556567.79);\n        expect(shortestDistance('157537,286667,732371,278851')).toEqual(574887.13);\n        expect(shortestDistance('480361,414879,889928,348557')).toEqual(414902.08);\n        expect(shortestDistance('673500,980899,329032,498805')).toEqual(592513.99);\n        expect(shortestDistance('622968,776214,885911,472248')).toEqual(401913.36);\n        expect(shortestDistance('126521,904378,837627,369059')).toEqual(890077.62);\n        expect(shortestDistance('503760,273092,895480,426767')).toEqual(420785.65);\n        expect(shortestDistance('455562,336785,442392,523287')).toEqual(186966.43);\n        expect(shortestDistance('388776,95216,206886,917821')).toEqual(842474.31);\n        expect(shortestDistance('91739,731973,989090,497591')).toEqual(927455.52);\n        expect(shortestDistance('853311,542953,349700,393902')).toEqual(525204.95);\n        expect(shortestDistance('816831,693843,123424,592220')).toEqual(700814.17);\n        expect(shortestDistance('993735,708984,575302,251194')).toEqual(620207.92);\n        expect(shortestDistance('707341,477951,250026,740755')).toEqual(527449.48);\n        expect(shortestDistance('64116,601995,487001,851594')).toEqual(491051.3);\n        expect(shortestDistance('194874,4328,899877,861363')).toEqual(1109746.92);\n        expect(shortestDistance('132942,586121,423008,715731')).toEqual(317705.9);\n        expect(shortestDistance('613588,213361,89366,895123')).toEqual(860004.73);\n        expect(shortestDistance('889034,826299,82991,903238')).toEqual(809706.69);\n        expect(shortestDistance('882041,526943,230453,353756')).toEqual(674211.14);\n        expect(shortestDistance('651791,451574,399791,36285')).toEqual(485766.36);\n        expect(shortestDistance('221010,47601,215956,444501')).toEqual(396932.18);\n        expect(shortestDistance('931012,720447,886159,648793')).toEqual(84534.53);\n        expect(shortestDistance('790364,924330,664953,392737')).toEqual(546185.9);\n        expect(shortestDistance('721850,661427,317189,733001')).toEqual(410942.04);\n        expect(shortestDistance('303784,714317,310469,187432')).toEqual(526927.41);\n        expect(shortestDistance('95731,252962,152658,291979')).toEqual(69014.56);\n        expect(shortestDistance('253216,52184,110893,299081')).toEqual(284980.64);\n        expect(shortestDistance('760357,376036,672731,408389')).toEqual(93407.88);\n        expect(shortestDistance('777261,995722,246945,1076')).toEqual(1127189.3);\n        expect(shortestDistance('323105,698132,843362,906579')).toEqual(560461.86);\n        expect(shortestDistance('702978,403605,964125,682539')).toEqual(382101.99);\n        expect(shortestDistance('444634,260351,234757,847777')).toEqual(623792.96);\n        expect(shortestDistance('744593,805753,116213,255126')).toEqual(835494.77);\n        expect(shortestDistance('802626,205324,937102,753240')).toEqual(564177.04);\n        expect(shortestDistance('748428,681374,351952,996250')).toEqual(506300.42);\n        expect(shortestDistance('372478,428915,698204,68780')).toEqual(485586.91);\n        expect(shortestDistance('862792,169060,58267,249481')).toEqual(808534.48);\n        expect(shortestDistance('173090,767385,911810,278440')).toEqual(885874.96);\n        expect(shortestDistance('97001,776716,634757,803105')).toEqual(538403.1);\n        expect(shortestDistance('287472,356291,697377,739714')).toEqual(561280.06);\n        expect(shortestDistance('840047,651237,379184,987690')).toEqual(570609.61);\n        expect(shortestDistance('234716,103515,719890,498243')).toEqual(625463.03);\n        expect(shortestDistance('971040,965296,266739,275432')).toEqual(985876.38);\n        expect(shortestDistance('762191,996124,499919,997525')).toEqual(262275.74);\n        expect(shortestDistance('869704,665141,293945,206117')).toEqual(736343.3);\n        expect(shortestDistance('163131,703673,489526,278923')).toEqual(535673.65);\n        expect(shortestDistance('945005,668575,851122,26404')).toEqual(648997.39);\n        expect(shortestDistance('344756,879442,469289,188425')).toEqual(702148.82);\n        expect(shortestDistance('245695,72181,80878,735401')).toEqual(683392.58);\n        expect(shortestDistance('492109,717710,935257,980502')).toEqual(515208.49);\n        expect(shortestDistance('706569,587487,481753,785237')).toEqual(299411.58);\n        expect(shortestDistance('401695,554220,120152,767290')).toEqual(353079.72);\n        expect(shortestDistance('89096,494048,762979,155611')).toEqual(754094.09);\n        expect(shortestDistance('183841,943339,509056,539661')).toEqual(518382.8);\n        expect(shortestDistance('104049,262329,535147,384307')).toEqual(448022.45);\n        expect(shortestDistance('519556,689704,841358,18651')).toEqual(744223.53);\n        expect(shortestDistance('55210,364793,325157,539446')).toEqual(321519.91);\n        expect(shortestDistance('188236,21759,424119,86853')).toEqual(244699.85);\n        expect(shortestDistance('214928,804240,404284,212605')).toEqual(621198.57);\n        expect(shortestDistance('744014,157527,90548,212748')).toEqual(655795.07);\n        expect(shortestDistance('892818,279679,255445,485966')).toEqual(669924.37);\n        expect(shortestDistance('684327,334661,487300,678782')).toEqual(396533.61);\n        expect(shortestDistance('327,133327,45091,765914')).toEqual(634168.85);\n        expect(shortestDistance('398094,660946,394164,656864')).toEqual(5666.36);\n        expect(shortestDistance('984080,304779,149707,546980')).toEqual(868815.07);\n        expect(shortestDistance('144116,376327,531990,372174')).toEqual(387896.23);\n        expect(shortestDistance('411996,54982,810103,97750')).toEqual(400397.66);\n        expect(shortestDistance('711649,58608,375658,591328')).toEqual(629825.81);\n        expect(shortestDistance('891007,404291,690395,937262')).toEqual(569476.3);\n        expect(shortestDistance('517827,357762,447329,616057')).toEqual(267742.93);\n        expect(shortestDistance('538232,497573,358003,612280')).toEqual(213635.64);\n        expect(shortestDistance('816090,22990,124024,707168')).toEqual(973167.45);\n        expect(shortestDistance('447333,736496,955301,783802')).toEqual(510166);\n        expect(shortestDistance('807285,12420,554086,588956')).toEqual(629685.23);\n        expect(shortestDistance('291464,218684,114567,440922')).toEqual(284046.26);\n        expect(shortestDistance('794942,42216,833907,104308')).toEqual(73305.44);\n        expect(shortestDistance('175092,762004,171733,525333')).toEqual(236694.84);\n        expect(shortestDistance('501921,789372,451854,85407')).toEqual(705743.17);\n        expect(shortestDistance('282910,113617,745331,249114')).toEqual(481863.69);\n        expect(shortestDistance('937009,559202,782490,102498')).toEqual(482135.53);\n        expect(shortestDistance('247253,162819,334181,824026')).toEqual(666896.67);\n        expect(shortestDistance('401217,512687,308315,523854')).toEqual(93570.74);\n        expect(shortestDistance('525686,263137,689045,59200')).toEqual(261297.65);\n        expect(shortestDistance('122182,695322,142605,19101')).toEqual(676529.33);\n        expect(shortestDistance('102625,84745,204701,466015')).toEqual(394697.76);\n        expect(shortestDistance('282608,308363,239079,19411')).toEqual(292212.31);\n        expect(shortestDistance('935256,149437,333464,728217')).toEqual(834949.04);\n        expect(shortestDistance('520077,751197,776161,614961')).toEqual(290067.69);\n        expect(shortestDistance('163861,829986,934572,724007')).toEqual(777963.36);\n        expect(shortestDistance('673028,290120,402372,154208')).toEqual(302864.23);\n        expect(shortestDistance('805346,810547,965990,340490')).toEqual(496749.51);\n        expect(shortestDistance('398994,874430,611890,70166')).toEqual(831964.72);\n        expect(shortestDistance('834804,82294,446430,226649')).toEqual(414334.08);\n        expect(shortestDistance('529177,864883,778900,359346')).toEqual(563852.14);\n        expect(shortestDistance('26510,62481,126380,277657')).toEqual(237222.95);\n        expect(shortestDistance('109983,212644,906800,665327')).toEqual(916427.43);\n        expect(shortestDistance('408963,240908,581128,675983')).toEqual(467900.68);\n        expect(shortestDistance('489480,317327,158988,844426')).toEqual(622140.11);\n        expect(shortestDistance('893121,339734,220787,799829')).toEqual(814690.38);\n        expect(shortestDistance('54453,861454,601169,436844')).toEqual(692236.98);\n        expect(shortestDistance('323877,636389,777579,883580')).toEqual(516670.97);\n        expect(shortestDistance('926734,280947,249868,302287')).toEqual(677202.32);\n        expect(shortestDistance('790648,224496,911223,757068')).toEqual(546050.61);\n        expect(shortestDistance('333014,914637,116975,881753')).toEqual(218527.36);\n        expect(shortestDistance('349939,917528,372173,835942')).toEqual(84561.38);\n        expect(shortestDistance('162342,244654,517257,353135')).toEqual(371123.68);\n        expect(shortestDistance('381846,724661,296174,700680')).toEqual(88965.05);\n        expect(shortestDistance('669710,21703,740782,683309')).toEqual(665412.45);\n        expect(shortestDistance('631228,992250,714784,881166')).toEqual(139000.94);\n        expect(shortestDistance('152630,998979,974520,696399')).toEqual(875818.38);\n        expect(shortestDistance('148637,810495,609823,165396')).toEqual(792997.63);\n        expect(shortestDistance('517356,763100,284323,82')).toEqual(797810.03);\n        expect(shortestDistance('766138,858130,339081,921707')).toEqual(431763.5);\n        expect(shortestDistance('969407,895781,18114,637923')).toEqual(985621.18);\n        expect(shortestDistance('506034,524757,255535,893919')).toEqual(446128.16);\n        expect(shortestDistance('539421,545132,882556,641418')).toEqual(356388.3);\n        expect(shortestDistance('369407,399300,290362,75517')).toEqual(333291.98);\n        expect(shortestDistance('853635,712244,252801,114082')).toEqual(847820.31);\n        expect(shortestDistance('469277,690538,253529,710891')).toEqual(216705.89);\n        expect(shortestDistance('858962,232650,181822,689709')).toEqual(816958.69);\n        expect(shortestDistance('215218,686345,35360,915210')).toEqual(291080.9);\n        expect(shortestDistance('194785,313996,366565,576746')).toEqual(313920.26);\n        expect(shortestDistance('670205,24397,984637,837882')).toEqual(872138.37);\n        expect(shortestDistance('614358,936461,176654,413993')).toEqual(681584.63);\n        expect(shortestDistance('764759,179722,189634,264245')).toEqual(581302.76);\n        expect(shortestDistance('19541,543695,617642,797820')).toEqual(649849.46);\n        expect(shortestDistance('521227,338076,595939,612517')).toEqual(284428.81);\n        expect(shortestDistance('574426,400372,645665,480578')).toEqual(107275.34);\n        expect(shortestDistance('155188,606775,491209,543979')).toEqual(341838.34);\n        expect(shortestDistance('872972,491083,722332,812676')).toEqual(355125.99);\n        expect(shortestDistance('697498,951095,922975,384810')).toEqual(609523.24);\n        expect(shortestDistance('686801,28265,568162,95173')).toEqual(136205.33);\n        expect(shortestDistance('844297,906632,401355,965383')).toEqual(446821.32);\n        expect(shortestDistance('490631,644935,920281,776571')).toEqual(449363.06);\n        expect(shortestDistance('151488,307112,687152,285037')).toEqual(536118.67);\n        expect(shortestDistance('622971,848999,338783,140179')).toEqual(763667.87);\n        expect(shortestDistance('338516,32250,317938,468229')).toEqual(436464.37);\n        expect(shortestDistance('420138,366931,542278,802759')).toEqual(452619.29);\n        expect(shortestDistance('901133,178855,285161,141257')).toEqual(617118.4);\n        expect(shortestDistance('861527,529296,88033,792901')).toEqual(817178.42);\n        expect(shortestDistance('551039,902531,649403,622237')).toEqual(297052.53);\n        expect(shortestDistance('253670,923534,758590,786555')).toEqual(523170.58);\n        expect(shortestDistance('351121,978721,701456,523085')).toEqual(574751.06);\n        expect(shortestDistance('108659,43746,547581,404409')).toEqual(568093.59);\n        expect(shortestDistance('235599,799129,458922,74538')).toEqual(758225.09);\n        expect(shortestDistance('555377,367289,917471,562545')).toEqual(411384.21);\n        expect(shortestDistance('281406,26261,567219,188781')).toEqual(328788.41);\n        expect(shortestDistance('364171,24302,779550,239028')).toEqual(467597.02);\n        expect(shortestDistance('300269,482459,766009,723979')).toEqual(524638.6);\n        expect(shortestDistance('301114,818479,959065,323934')).toEqual(823088.25);\n        expect(shortestDistance('874085,761482,385348,478241')).toEqual(564879.92);\n        expect(shortestDistance('91118,86335,707213,982694')).toEqual(1087672.98);\n        expect(shortestDistance('656555,124755,903029,661701')).toEqual(590813.37);\n        expect(shortestDistance('555679,51383,990212,734128')).toEqual(809295.78);\n        expect(shortestDistance('817024,586389,106240,963663')).toEqual(804704.65);\n        expect(shortestDistance('825529,511063,819620,191862')).toEqual(319255.69);\n        expect(shortestDistance('799847,945550,197476,936585')).toEqual(602437.71);\n        expect(shortestDistance('53798,470272,176578,354189')).toEqual(168968.02);\n        expect(shortestDistance('765016,130879,179752,561593')).toEqual(726669.46);\n        expect(shortestDistance('853013,304484,90074,896336')).toEqual(965590.34);\n        expect(shortestDistance('346189,402739,754838,98116')).toEqual(509695.18);\n        expect(shortestDistance('748762,353337,480833,952858')).toEqual(656666.87);\n        expect(shortestDistance('783684,911999,554346,30390')).toEqual(910950.24);\n        expect(shortestDistance('997195,981819,89183,623813')).toEqual(976040);\n        expect(shortestDistance('717802,756892,773587,395953')).toEqual(365224.49);\n        expect(shortestDistance('628870,168352,197208,78663')).toEqual(440881.16);\n        expect(shortestDistance('598866,821777,284207,304340')).toEqual(605599.98);\n        expect(shortestDistance('533376,808002,259216,734984')).toEqual(283717);\n        expect(shortestDistance('502455,946451,342508,360282')).toEqual(607599.49);\n        expect(shortestDistance('134164,460513,178590,72379')).toEqual(390668.24);\n        expect(shortestDistance('696662,191899,886188,267629')).toEqual(204095.9);\n        expect(shortestDistance('213161,483293,37122,907056')).toEqual(458873.41);\n        expect(shortestDistance('79174,375386,861140,891558')).toEqual(936965.51);\n        expect(shortestDistance('534413,359166,375673,702654')).toEqual(378394.49);\n        expect(shortestDistance('952500,44433,52354,587642')).toEqual(1051350.96);\n        expect(shortestDistance('31448,834858,132138,593951')).toEqual(261102.77);\n        expect(shortestDistance('10363,324372,931213,931737')).toEqual(1103112.4);\n        expect(shortestDistance('788841,547357,116259,623138')).toEqual(676837.73);\n        expect(shortestDistance('811230,614290,392382,370615')).toEqual(484573.17);\n        expect(shortestDistance('855994,226355,556991,702217')).toEqual(562003.06);\n        expect(shortestDistance('86701,361615,452363,971643')).toEqual(711226.31);\n        expect(shortestDistance('39128,696379,784669,881838')).toEqual(768261.95);\n        expect(shortestDistance('528337,688414,932917,108560')).toEqual(707047.13);\n        expect(shortestDistance('283504,659282,643382,639487')).toEqual(360422);\n        expect(shortestDistance('992856,512392,488400,713355')).toEqual(543011.96);\n        expect(shortestDistance('327841,670587,833429,263734')).toEqual(648959.62);\n        expect(shortestDistance('488578,122288,304355,825848')).toEqual(727279.03);\n        expect(shortestDistance('664682,596020,461739,963199')).toEqual(419531.02);\n        expect(shortestDistance('885165,987180,432885,793951')).toEqual(491827.86);\n        expect(shortestDistance('378350,684191,763072,905541')).toEqual(443854.53);\n        expect(shortestDistance('142141,391751,208070,650112')).toEqual(266640.28);\n        expect(shortestDistance('527599,263676,302742,165053')).toEqual(245534.45);\n        expect(shortestDistance('374157,918264,772671,216715')).toEqual(806836.05);\n        expect(shortestDistance('534875,76576,828740,745294')).toEqual(730438.5);\n        expect(shortestDistance('979129,123734,823870,4343')).toEqual(195855.99);\n        expect(shortestDistance('860775,957529,452133,784494')).toEqual(443767.28);\n        expect(shortestDistance('716604,439573,668168,204881')).toEqual(239638.02);\n        expect(shortestDistance('370895,76559,206938,856847')).toEqual(797327.57);\n        expect(shortestDistance('120790,250449,807211,168566')).toEqual(691287.65);\n        expect(shortestDistance('807742,680909,844217,851979')).toEqual(174915.32);\n        expect(shortestDistance('305113,792482,883930,632877')).toEqual(600418.92);\n        expect(shortestDistance('628398,228847,846725,863751')).toEqual(671393.9);\n        expect(shortestDistance('174171,296318,100374,253825')).toEqual(85156.63);\n        expect(shortestDistance('218902,834129,786324,55988')).toEqual(963053.03);\n        expect(shortestDistance('35773,284123,673322,678343')).toEqual(749585.31);\n        expect(shortestDistance('195069,997741,193870,48455')).toEqual(949286.76);\n        expect(shortestDistance('686804,869744,235059,826575')).toEqual(453802.94);\n        expect(shortestDistance('761378,834199,107046,114584')).toEqual(972623.32);\n        expect(shortestDistance('97177,805268,148832,934714')).toEqual(139371.83);\n        expect(shortestDistance('787434,288845,781561,607375')).toEqual(318584.14);\n        expect(shortestDistance('61925,265915,474891,245388')).toEqual(413475.85);\n        expect(shortestDistance('226788,588405,33996,736102')).toEqual(242864.49);\n        expect(shortestDistance('142900,637569,266744,59539')).toEqual(591148.05);\n        expect(shortestDistance('567199,1463,594057,648987')).toEqual(648080.77);\n        expect(shortestDistance('356461,879242,937715,539543')).toEqual(673239.65);\n        expect(shortestDistance('946946,930844,398922,723394')).toEqual(585974.24);\n        expect(shortestDistance('565125,888225,877371,566490')).toEqual(448342.47);\n        expect(shortestDistance('676813,361689,646809,482681')).toEqual(124656.75);\n        expect(shortestDistance('210083,94036,41381,678908')).toEqual(608716.37);\n        expect(shortestDistance('36402,328575,568836,864441')).toEqual(755406.07);\n        expect(shortestDistance('325936,416380,555554,186537')).toEqual(324888.03);\n        expect(shortestDistance('639109,217099,748533,526178')).toEqual(327877.17);\n        expect(shortestDistance('168207,12442,875306,613758')).toEqual(928207.91);\n        expect(shortestDistance('266402,102065,360628,944040')).toEqual(847231.04);\n        expect(shortestDistance('145546,488229,154362,415037')).toEqual(73721.03);\n        expect(shortestDistance('201628,497651,956989,280566')).toEqual(785936.47);\n        expect(shortestDistance('509414,900164,326222,679521')).toEqual(286779.78);\n        expect(shortestDistance('758584,196389,84717,842439')).toEqual(933529.5);\n        expect(shortestDistance('34222,527826,887036,50329')).toEqual(977391.99);\n        expect(shortestDistance('46918,985837,630763,653764')).toEqual(671675.12);\n        expect(shortestDistance('546036,924624,62507,783499')).toEqual(503702.85);\n        expect(shortestDistance('989807,546065,895493,488558')).toEqual(110463.5);\n        expect(shortestDistance('361752,704979,225909,97172')).toEqual(622802.27);\n        expect(shortestDistance('204024,779623,761429,678097')).toEqual(566575.56);\n        expect(shortestDistance('15111,962690,902468,882274')).toEqual(890993.37);\n        expect(shortestDistance('281421,955229,550570,745945')).toEqual(340941.31);\n        expect(shortestDistance('270911,444639,949033,205498')).toEqual(719053.45);\n        expect(shortestDistance('344839,939184,323520,585205')).toEqual(354620.41);\n        expect(shortestDistance('246780,335739,939169,201664')).toEqual(705250.76);\n        expect(shortestDistance('845289,523723,907207,671445')).toEqual(160173.74);\n        expect(shortestDistance('171998,928024,788768,25294')).toEqual(1093309.97);\n        expect(shortestDistance('250324,740274,985040,837888')).toEqual(741172.11);\n        expect(shortestDistance('250406,249669,828802,187978')).toEqual(581676.64);\n        expect(shortestDistance('590736,908389,97750,154257')).toEqual(900971.85);\n        expect(shortestDistance('323422,136488,216161,23322')).toEqual(155921.34);\n        expect(shortestDistance('907272,507917,55067,348520')).toEqual(866983.72);\n        expect(shortestDistance('993936,986396,982641,569801')).toEqual(416748.09);\n        expect(shortestDistance('147319,163673,965789,31711')).toEqual(829039.87);\n        expect(shortestDistance('474253,256212,760371,74729')).toEqual(338820.88);\n        expect(shortestDistance('615969,412514,570959,704633')).toEqual(295566.25);\n        expect(shortestDistance('820244,461124,648005,603754')).toEqual(223628.24);\n        expect(shortestDistance('329869,522268,776714,638313')).toEqual(461667.52);\n        expect(shortestDistance('958881,585868,494078,280196')).toEqual(556306.75);\n        expect(shortestDistance('502094,743621,8327,431572')).toEqual(584106.52);\n        expect(shortestDistance('155696,615601,47564,289494')).toEqual(343567.03);\n        expect(shortestDistance('419178,268925,31733,800501')).toEqual(657789.23);\n        expect(shortestDistance('172485,747983,673527,597115')).toEqual(523263.07);\n        expect(shortestDistance('454147,49089,914602,235450')).toEqual(496738.59);\n        expect(shortestDistance('922480,743319,203468,165654')).toEqual(922320.5);\n        expect(shortestDistance('649894,934785,761341,878930')).toEqual(124660.4);\n        expect(shortestDistance('659548,918605,763039,576780')).toEqual(357148.03);\n        expect(shortestDistance('377642,711470,823550,687018')).toEqual(446577.93);\n        expect(shortestDistance('335008,59915,807759,549184')).toEqual(680351.13);\n        expect(shortestDistance('448731,595129,419070,545977')).toEqual(57408.14);\n        expect(shortestDistance('187968,204863,946567,551488')).toEqual(834039.17);\n        expect(shortestDistance('544117,417716,20913,873403')).toEqual(693824.95);\n        expect(shortestDistance('156354,570556,392301,760660')).toEqual(303002.5);\n        expect(shortestDistance('270493,873739,688290,235838')).toEqual(762543.13);\n        expect(shortestDistance('828418,300274,995407,902701')).toEqual(625142.88);\n        expect(shortestDistance('899437,870895,270577,410090')).toEqual(779619.23);\n        expect(shortestDistance('767127,863230,274365,610312')).toEqual(553878.96);\n        expect(shortestDistance('527387,575380,466042,455286')).toEqual(134854.65);\n        expect(shortestDistance('539755,359608,927808,618176')).toEqual(466307.35);\n        expect(shortestDistance('874934,305729,895773,492257')).toEqual(187688.46);\n        expect(shortestDistance('933594,572136,440894,611373')).toEqual(494259.88);\n        expect(shortestDistance('683720,568350,574938,555947')).toEqual(109486.79);\n        expect(shortestDistance('235224,982579,170701,43860')).toEqual(940933.89);\n        expect(shortestDistance('93101,401564,863230,454894')).toEqual(771973.29);\n        expect(shortestDistance('989610,428854,739643,696117')).toEqual(365941.27);\n        expect(shortestDistance('390119,909695,405033,201439')).toEqual(708413.01);\n        expect(shortestDistance('770194,738228,889492,79215')).toEqual(669723.93);\n        expect(shortestDistance('159420,148821,637801,425857')).toEqual(552808.58);\n        expect(shortestDistance('676929,398228,406675,724018')).toEqual(423292.27);\n        expect(shortestDistance('119428,433295,972205,329158')).toEqual(859111.82);\n        expect(shortestDistance('306565,112705,748395,912040')).toEqual(913318.23);\n        expect(shortestDistance('988060,470849,126143,312857')).toEqual(876277.57);\n        expect(shortestDistance('386648,202441,943976,724549')).toEqual(763682.7);\n        expect(shortestDistance('824317,760351,65488,364491')).toEqual(855877.67);\n        expect(shortestDistance('99070,438186,393958,772167')).toEqual(445535.9);\n        expect(shortestDistance('14975,746071,216044,658751')).toEqual(219211.14);\n        expect(shortestDistance('112735,905328,817337,778250')).toEqual(715969.83);\n        expect(shortestDistance('393416,437664,384427,76174')).toEqual(361601.75);\n        expect(shortestDistance('206031,450723,919322,169773')).toEqual(766627);\n        expect(shortestDistance('511873,81858,440463,136263')).toEqual(89773.56);\n        expect(shortestDistance('422424,313486,404371,714640')).toEqual(401560.01);\n        expect(shortestDistance('362781,989420,757077,750299')).toEqual(461137.93);\n        expect(shortestDistance('240447,172377,29612,304384')).toEqual(248751.37);\n        expect(shortestDistance('501261,379334,954275,614834')).toEqual(510570.2);\n        expect(shortestDistance('834101,14506,465276,124955')).toEqual(385007.61);\n        expect(shortestDistance('159565,301254,749378,35423')).toEqual(646950.92);\n        expect(shortestDistance('222203,67444,63754,717455')).toEqual(669044.38);\n        expect(shortestDistance('220322,803071,894855,851266')).toEqual(676252.56);\n        expect(shortestDistance('995711,706188,112274,952036')).toEqual(917007.18);\n        expect(shortestDistance('572424,507907,319408,321952')).toEqual(314000.57);\n        expect(shortestDistance('322580,931521,637949,976108')).toEqual(318505.27);\n        expect(shortestDistance('282367,406875,98166,596900')).toEqual(264649.79);\n        expect(shortestDistance('161772,257224,291569,801261')).toEqual(559306.28);\n        expect(shortestDistance('400500,904432,498983,286062')).toEqual(626163.2);\n        expect(shortestDistance('144745,57921,590840,338685')).toEqual(527095.03);\n        expect(shortestDistance('271773,109807,13694,611277')).toEqual(563983.09);\n        expect(shortestDistance('505963,128974,431145,202603')).toEqual(104971.25);\n        expect(shortestDistance('694786,374682,199876,216025')).toEqual(519719.11);\n        expect(shortestDistance('543330,274064,644398,872492')).toEqual(606902.64);\n        expect(shortestDistance('824890,104216,401178,970178')).toEqual(964065.37);\n        expect(shortestDistance('780587,872717,712061,850802')).toEqual(71944.98);\n        expect(shortestDistance('320998,868426,932734,881046')).toEqual(611866.16);\n        expect(shortestDistance('259575,401836,519992,573279')).toEqual(311784.73);\n        expect(shortestDistance('969042,707633,593691,729005')).toEqual(375958.95);\n        expect(shortestDistance('674118,180366,347505,357390')).toEqual(371501.75);\n        expect(shortestDistance('762688,370467,537560,851543')).toEqual(531146.62);\n        expect(shortestDistance('757001,497057,791348,992956')).toEqual(497087.05);\n        expect(shortestDistance('481714,471913,716137,483742')).toEqual(234721.26);\n        expect(shortestDistance('311500,737861,958110,141298')).toEqual(879768.1);\n        expect(shortestDistance('158395,736461,326436,505237')).toEqual(285836.17);\n        expect(shortestDistance('652909,143408,606819,101411')).toEqual(62354.12);\n        expect(shortestDistance('361215,554246,264802,406808')).toEqual(176163.08);\n        expect(shortestDistance('488472,543711,498058,405135')).toEqual(138907.16);\n        expect(shortestDistance('731397,346646,681791,505004')).toEqual(165945.81);\n        expect(shortestDistance('431346,56004,486316,536840')).toEqual(483967.93);\n        expect(shortestDistance('29640,884713,801232,376992')).toEqual(923652.98);\n        expect(shortestDistance('387972,896786,605250,169832')).toEqual(758730.42);\n        expect(shortestDistance('640185,736979,845833,705915')).toEqual(207980.94);\n        expect(shortestDistance('5070,61307,347433,657814')).toEqual(687773.96);\n        expect(shortestDistance('799943,713452,261645,458423')).toEqual(595654.71);\n        expect(shortestDistance('345585,431749,32303,833989')).toEqual(509845.69);\n        expect(shortestDistance('8536,466714,534402,103970')).toEqual(638841.34);\n        expect(shortestDistance('920907,219224,443616,591374')).toEqual(605229.15);\n        expect(shortestDistance('218892,671298,199741,582835')).toEqual(90512.23);\n        expect(shortestDistance('224367,144394,627355,280291')).toEqual(425284.99);\n        expect(shortestDistance('626051,246368,523894,905982')).toEqual(667477.85);\n        expect(shortestDistance('653642,169859,929919,517197')).toEqual(443816.03);\n        expect(shortestDistance('329977,720284,691376,137581')).toEqual(685676.33);\n        expect(shortestDistance('44696,80941,272323,411168')).toEqual(401078.45);\n        expect(shortestDistance('680280,328622,670736,884203')).toEqual(555662.97);\n        expect(shortestDistance('702659,802449,629133,840756')).toEqual(82906.57);\n        expect(shortestDistance('954815,455512,445606,526495')).toEqual(514132.66);\n        expect(shortestDistance('291804,263279,253203,2728')).toEqual(263394.88);\n        expect(shortestDistance('541227,520030,617364,736400')).toEqual(229374.85);\n        expect(shortestDistance('657760,593557,908650,71189')).toEqual(579494.71);\n        expect(shortestDistance('434159,490307,915738,26207')).toEqual(668810.24);\n        expect(shortestDistance('479535,895493,211988,352599')).toEqual(605239.86);\n        expect(shortestDistance('432236,782221,990406,2361')).toEqual(959028.35);\n        expect(shortestDistance('933668,832332,912236,273610')).toEqual(559132.9);\n        expect(shortestDistance('13812,515108,819345,743287')).toEqual(837227.01);\n        expect(shortestDistance('905182,873391,770925,507322')).toEqual(389912.11);\n        expect(shortestDistance('35880,405463,45307,259119')).toEqual(146647.31);\n        expect(shortestDistance('826432,346038,549843,326499')).toEqual(277278.29);\n        expect(shortestDistance('335260,707914,920234,951428')).toEqual(633635.26);\n        expect(shortestDistance('815843,896843,98909,800356')).toEqual(723397.61);\n        expect(shortestDistance('67824,298841,998122,485700')).toEqual(948878.63);\n        expect(shortestDistance('7614,773149,16359,762822')).toEqual(13532.26);\n        expect(shortestDistance('940547,334931,319734,647829')).toEqual(695207.84);\n        expect(shortestDistance('921617,122312,374502,869555')).toEqual(926124.68);\n        expect(shortestDistance('553730,354116,587768,316001')).toEqual(51101.26);\n        expect(shortestDistance('770446,770824,562535,597391')).toEqual(270750.79);\n        expect(shortestDistance('84689,346263,623605,953299')).toEqual(811740.82);\n        expect(shortestDistance('964428,100633,265491,135174')).toEqual(699789.98);\n        expect(shortestDistance('972237,187531,823585,397357')).toEqual(257146.59);\n        expect(shortestDistance('244333,430794,821711,320116')).toEqual(587890.27);\n        expect(shortestDistance('348670,472217,789066,847558')).toEqual(578644.54);\n        expect(shortestDistance('949908,693028,484585,495571')).toEqual(505484.68);\n        expect(shortestDistance('720522,901763,470194,193827')).toEqual(750891.13);\n        expect(shortestDistance('541958,899877,643800,142305')).toEqual(764386.77);\n        expect(shortestDistance('705092,325139,626493,14437')).toEqual(320489.52);\n        expect(shortestDistance('137554,294335,756198,570080')).toEqual(677315.07);\n        expect(shortestDistance('783814,892480,874493,622155')).toEqual(285128.54);\n        expect(shortestDistance('200589,861820,91622,828015')).toEqual(114090.25);\n        expect(shortestDistance('483858,669863,305770,124532')).toEqual(573673.46);\n        expect(shortestDistance('763334,580942,801294,494655')).toEqual(94267.75);\n        expect(shortestDistance('175209,67440,38352,336934')).toEqual(302252.96);\n        expect(shortestDistance('817957,211941,678800,53025')).toEqual(211232.02);\n        expect(shortestDistance('212836,382526,925013,643806')).toEqual(758592.99);\n        expect(shortestDistance('488050,907498,493930,757513')).toEqual(150100.22);\n        expect(shortestDistance('139114,958027,434735,889105')).toEqual(303549.04);\n        expect(shortestDistance('541704,766627,31359,15203')).toEqual(908344.67);\n        expect(shortestDistance('932552,294470,580641,909797')).toEqual(708850.24);\n        expect(shortestDistance('864878,793976,699091,489818')).toEqual(346406.44);\n        expect(shortestDistance('970865,303370,294558,338569')).toEqual(677222.36);\n        expect(shortestDistance('544472,62295,474969,535272')).toEqual(478056.39);\n        expect(shortestDistance('410342,535670,649103,870829')).toEqual(411507.44);\n        expect(shortestDistance('549644,83838,189783,499103')).toEqual(549495.19);\n        expect(shortestDistance('635549,676720,231087,583452')).toEqual(415076.41);\n        expect(shortestDistance('232462,377670,809547,284371')).toEqual(584578.31);\n        expect(shortestDistance('720299,161492,220401,111071')).toEqual(502434.36);\n        expect(shortestDistance('890095,414995,826744,166186')).toEqual(256747.48);\n        expect(shortestDistance('802943,989738,873223,839473')).toEqual(165888.06);\n        expect(shortestDistance('329883,279144,62694,558355')).toEqual(386456.65);\n        expect(shortestDistance('279478,746315,814304,207768')).toEqual(758993.89);\n        expect(shortestDistance('169230,24911,754805,302509')).toEqual(648042.23);\n        expect(shortestDistance('509472,309257,77678,556364')).toEqual(497501.69);\n        expect(shortestDistance('524491,509384,243246,431046')).toEqual(291951.35);\n        expect(shortestDistance('671272,562083,821274,522321')).toEqual(155182.53);\n        expect(shortestDistance('546385,722298,97408,634282')).toEqual(457522.85);\n        expect(shortestDistance('312434,121124,696955,604813')).toEqual(617908.93);\n        expect(shortestDistance('502016,761977,398545,406513')).toEqual(370217.37);\n        expect(shortestDistance('43659,491495,429384,934990')).toEqual(587768.31);\n        expect(shortestDistance('932880,10279,647149,845621')).toEqual(882858.12);\n        expect(shortestDistance('567825,590296,779307,26111')).toEqual(602519.17);\n        expect(shortestDistance('670313,118643,739435,599590')).toEqual(485888.74);\n        expect(shortestDistance('616800,968118,860507,756082')).toEqual(323036.17);\n        expect(shortestDistance('246884,154049,12286,345112')).toEqual(302557.91);\n        expect(shortestDistance('554012,880122,57264,46440')).toEqual(970455.69);\n        expect(shortestDistance('630784,416039,524502,375436')).toEqual(113773.75);\n        expect(shortestDistance('886571,265647,524122,330452')).toEqual(368196.91);\n        expect(shortestDistance('42971,568833,18259,875446')).toEqual(307607.24);\n        expect(shortestDistance('45093,990482,476621,419202')).toEqual(715945.01);\n        expect(shortestDistance('962825,911731,785646,414249')).toEqual(528091.6);\n        expect(shortestDistance('599077,555829,902596,64498')).toEqual(577520.51);\n        expect(shortestDistance('975786,796052,790562,750586')).toEqual(190722.54);\n        expect(shortestDistance('837460,11408,405906,716556')).toEqual(826723.99);\n        expect(shortestDistance('40030,968103,488002,311138')).toEqual(795161.57);\n        expect(shortestDistance('928642,658202,500438,885384')).toEqual(484737.38);\n        expect(shortestDistance('714565,594168,36900,210551')).toEqual(778711.66);\n        expect(shortestDistance('566130,997223,626626,645183')).toEqual(357200.12);\n        expect(shortestDistance('919597,32124,753895,464769')).toEqual(463291.32);\n        expect(shortestDistance('355244,122215,584268,814715')).toEqual(729388.95);\n        expect(shortestDistance('259225,482623,653099,569586')).toEqual(403360);\n        expect(shortestDistance('682661,422839,811523,249041')).toEqual(216358.87);\n        expect(shortestDistance('103723,465150,619447,919941')).toEqual(687608.97);\n        expect(shortestDistance('219815,124635,568802,317383')).toEqual(398677.46);\n        expect(shortestDistance('980447,343784,399239,943918')).toEqual(835442.13);\n        expect(shortestDistance('216956,321014,512549,949110')).toEqual(694175.63);\n        expect(shortestDistance('698759,259673,26693,711118')).toEqual(809614.29);\n        expect(shortestDistance('795672,748382,49163,988008')).toEqual(784025.71);\n        expect(shortestDistance('903483,653264,781876,65570')).toEqual(600143.73);\n        expect(shortestDistance('919376,82952,880985,796731')).toEqual(714810.7);\n        expect(shortestDistance('699472,338170,35767,265674')).toEqual(667652.6);\n        expect(shortestDistance('21320,344713,989112,68274')).toEqual(1006498.82);\n        expect(shortestDistance('27580,422725,357076,197481')).toEqual(399127.14);\n        expect(shortestDistance('309846,503423,11697,349785')).toEqual(335406.41);\n        expect(shortestDistance('811441,834502,108603,195285')).toEqual(950041.91);\n        expect(shortestDistance('320805,522116,684457,537491')).toEqual(363976.88);\n        expect(shortestDistance('978869,293122,123611,61023')).toEqual(886191.96);\n        expect(shortestDistance('372037,754084,561192,69913')).toEqual(709837.71);\n        expect(shortestDistance('447095,47539,24856,663570')).toEqual(746846.68);\n        expect(shortestDistance('107344,944450,123931,158730')).toEqual(785895.06);\n        expect(shortestDistance('744970,280834,694901,409190')).toEqual(137775.79);\n        expect(shortestDistance('264596,599404,602064,740140')).toEqual(365638.17);\n        expect(shortestDistance('133107,144263,502118,834307')).toEqual(782515.07);\n        expect(shortestDistance('93265,489425,114391,244393')).toEqual(245941.03);\n        expect(shortestDistance('848058,455949,47169,739486')).toEqual(849597.8);\n        expect(shortestDistance('563826,590543,9819,472820')).toEqual(566376.61);\n        expect(shortestDistance('605825,649925,938919,684851')).toEqual(334920.05);\n        expect(shortestDistance('288871,935054,75022,368779')).toEqual(605308.82);\n        expect(shortestDistance('827313,321627,723373,400174')).toEqual(130281.06);\n        expect(shortestDistance('388627,585576,292757,886597')).toEqual(315918.82);\n        expect(shortestDistance('718952,456557,846249,45384')).toEqual(430427.42);\n        expect(shortestDistance('742553,221321,9469,438146')).toEqual(764477.1);\n        expect(shortestDistance('482674,52480,684658,773884')).toEqual(749147.03);\n        expect(shortestDistance('279188,855702,408122,696213')).toEqual(205087.1);\n        expect(shortestDistance('459431,568607,49456,769126')).toEqual(456385.11);\n        expect(shortestDistance('831138,740775,524089,747560')).toEqual(307123.96);\n        expect(shortestDistance('130599,166262,269347,502838')).toEqual(364052.76);\n        expect(shortestDistance('225577,395216,785735,674858')).toEqual(626080.37);\n        expect(shortestDistance('872823,461723,570771,150063')).toEqual(434013.09);\n        expect(shortestDistance('259189,128442,517291,595135')).toEqual(533309.48);\n        expect(shortestDistance('552498,808950,484287,572203')).toEqual(246377.52);\n        expect(shortestDistance('315432,607089,111339,94679')).toEqual(551559.57);\n        expect(shortestDistance('561808,728340,3597,6843')).toEqual(912226.64);\n        expect(shortestDistance('650197,734867,368390,655')).toEqual(786436.55);\n        expect(shortestDistance('315497,602475,3717,600763')).toEqual(311784.7);\n        expect(shortestDistance('669050,340488,427296,529317')).toEqual(306759.49);\n        expect(shortestDistance('860795,140136,284613,164234')).toEqual(576685.71);\n        expect(shortestDistance('115517,356078,412560,448556')).toEqual(311105.65);\n        expect(shortestDistance('92562,62241,645398,552880')).toEqual(739157.81);\n        expect(shortestDistance('197665,391890,815392,550453')).toEqual(637752.99);\n        expect(shortestDistance('452010,179885,148345,612087')).toEqual(528214.92);\n        expect(shortestDistance('820977,931315,914934,755450')).toEqual(199390.11);\n        expect(shortestDistance('397611,892585,515240,662820')).toEqual(258125.04);\n        expect(shortestDistance('210979,842673,189649,892257')).toEqual(53977.24);\n        expect(shortestDistance('495278,492437,355648,112541')).toEqual(404743.76);\n        expect(shortestDistance('168358,878254,629927,32993')).toEqual(963074.3);\n        expect(shortestDistance('990921,53074,515460,229720')).toEqual(507214.92);\n        expect(shortestDistance('943850,616793,117815,1707')).toEqual(1029885.73);\n        expect(shortestDistance('955018,752478,703757,579382')).toEqual(305113.61);\n        expect(shortestDistance('691726,90296,693251,497512')).toEqual(407218.86);\n        expect(shortestDistance('996816,861314,57964,59300')).toEqual(1234775.09);\n        expect(shortestDistance('572991,947493,609096,992250')).toEqual(57504.44);\n        expect(shortestDistance('342754,643727,399592,280882')).toEqual(367269.73);\n        expect(shortestDistance('641897,293135,339954,345361')).toEqual(306426.39);\n        expect(shortestDistance('24912,468994,148803,282844')).toEqual(223608.59);\n        expect(shortestDistance('283852,436085,331927,20882')).toEqual(417976.96);\n        expect(shortestDistance('168632,546468,646323,571132')).toEqual(478327.3);\n        expect(shortestDistance('475378,526135,612811,969808')).toEqual(464471.27);\n        expect(shortestDistance('951912,217301,728519,75369')).toEqual(264667.95);\n        expect(shortestDistance('16688,470214,963365,59761')).toEqual(1031827.99);\n        expect(shortestDistance('392789,466532,777609,778650')).toEqual(495483.68);\n        expect(shortestDistance('529529,688056,737206,969061')).toEqual(349418.87);\n        expect(shortestDistance('826209,588938,754041,418629')).toEqual(184968.58);\n        expect(shortestDistance('227343,256475,889774,80014')).toEqual(685531.41);\n        expect(shortestDistance('459526,320745,600796,442888')).toEqual(186751.51);\n        expect(shortestDistance('755550,286529,686307,616225')).toEqual(336888.77);\n        expect(shortestDistance('678441,620690,231979,235229')).toEqual(589837.69);\n        expect(shortestDistance('253216,809849,247804,462400')).toEqual(347491.15);\n        expect(shortestDistance('917308,470351,324463,844309')).toEqual(700934.93);\n        expect(shortestDistance('384266,296813,516971,895355')).toEqual(613076.78);\n        expect(shortestDistance('640956,792087,558346,496523')).toEqual(306891.66);\n        expect(shortestDistance('478161,789420,128561,255792')).toEqual(637949.06);\n        expect(shortestDistance('864843,399930,453950,27259')).toEqual(554722.21);\n        expect(shortestDistance('443133,658890,40272,985120')).toEqual(518384.99);\n        expect(shortestDistance('782727,729930,792171,607233')).toEqual(123059.92);\n        expect(shortestDistance('216057,935836,250960,978282')).toEqual(54953.46);\n        expect(shortestDistance('983508,496156,298887,669632')).toEqual(706257.63);\n        expect(shortestDistance('845221,526361,62859,91035')).toEqual(895320.63);\n        expect(shortestDistance('732006,810059,839130,736553')).toEqual(129917.99);\n        expect(shortestDistance('393287,541846,141386,787006')).toEqual(351507.52);\n        expect(shortestDistance('153664,855900,556644,690892')).toEqual(435454.38);\n        expect(shortestDistance('8486,285864,166239,782836')).toEqual(521408.84);\n        expect(shortestDistance('538305,810949,586943,35828')).toEqual(776645.49);\n        expect(shortestDistance('31635,63385,92064,330139')).toEqual(273513);\n        expect(shortestDistance('793469,875089,903938,692653')).toEqual(213275.16);\n        expect(shortestDistance('140814,828470,391058,85454')).toEqual(784024.77);\n        expect(shortestDistance('740129,418067,669712,305260')).toEqual(132981.1);\n        expect(shortestDistance('285477,151081,53775,127854')).toEqual(232863.29);\n        expect(shortestDistance('374481,858815,117627,500850')).toEqual(440582.48);\n        expect(shortestDistance('540845,935528,205612,585622')).toEqual(484577.52);\n        expect(shortestDistance('476456,796858,77282,76657')).toEqual(823425.38);\n        expect(shortestDistance('781225,233320,557875,754519')).toEqual(567039.35);\n        expect(shortestDistance('362141,627182,431972,257275')).toEqual(376440.64);\n        expect(shortestDistance('117392,301465,402801,288454')).toEqual(285705.41);\n        expect(shortestDistance('704152,982945,166954,947533')).toEqual(538363.91);\n        expect(shortestDistance('407523,954407,847863,890352')).toEqual(444974.56);\n        expect(shortestDistance('100951,118561,878109,847370')).toEqual(1065428.14);\n        expect(shortestDistance('948179,11163,729002,768218')).toEqual(788143.91);\n        expect(shortestDistance('396895,629343,544609,553879')).toEqual(165874.17);\n        expect(shortestDistance('555545,123529,761456,355803')).toEqual(310403.85);\n        expect(shortestDistance('738115,287856,835048,255522')).toEqual(102183.63);\n        expect(shortestDistance('8323,851294,108150,817132')).toEqual(105510.53);\n        expect(shortestDistance('822521,357244,187497,61123')).toEqual(700673.34);\n        expect(shortestDistance('523163,506381,630051,117067')).toEqual(403720.74);\n        expect(shortestDistance('507806,950176,886294,250599')).toEqual(795399.99);\n        expect(shortestDistance('241606,490087,963720,54907')).toEqual(843107.5);\n        expect(shortestDistance('622433,206502,380979,789852')).toEqual(631345.59);\n        expect(shortestDistance('517823,215636,759629,474358')).toEqual(354128.81);\n        expect(shortestDistance('834314,451366,277591,137350')).toEqual(639176.46);\n        expect(shortestDistance('727639,937927,703305,986913')).toEqual(54697.09);\n        expect(shortestDistance('333579,69859,411316,725410')).toEqual(660144.04);\n        expect(shortestDistance('941677,142034,895645,402253')).toEqual(264259.1);\n        expect(shortestDistance('121812,2019,846333,701867')).toEqual(1007332.07);\n        expect(shortestDistance('866872,799156,484108,883409')).toEqual(391927.09);\n        expect(shortestDistance('937642,869409,309982,218029')).toEqual(904573.37);\n        expect(shortestDistance('955233,770497,648975,373455')).toEqual(501434.26);\n        expect(shortestDistance('595532,397881,463481,497762')).toEqual(165570.77);\n        expect(shortestDistance('292230,898672,754911,358261')).toEqual(711419.54);\n        expect(shortestDistance('523773,745444,786461,958786')).toEqual(338407.73);\n        expect(shortestDistance('579705,628921,755783,596598')).toEqual(179020.22);\n        expect(shortestDistance('263650,586339,682477,746801')).toEqual(448513.22);\n        expect(shortestDistance('881396,781826,114902,573698')).toEqual(794248.27);\n        expect(shortestDistance('420378,349009,570961,334580')).toEqual(151272.72);\n        expect(shortestDistance('489436,859814,624383,366165')).toEqual(511761.69);\n        expect(shortestDistance('137552,977101,121053,892304')).toEqual(86387.2);\n        expect(shortestDistance('438230,291830,645626,674047')).toEqual(434859.67);\n        expect(shortestDistance('524492,521904,409621,173865')).toEqual(366505.79);\n        expect(shortestDistance('915951,95466,67102,920398')).toEqual(1183662.72);\n        expect(shortestDistance('498858,45413,392917,794870')).toEqual(756907.72);\n        expect(shortestDistance('556531,333838,321374,851577')).toEqual(568640.91);\n        expect(shortestDistance('340691,211016,288743,383792')).toEqual(180416.58);\n        expect(shortestDistance('62983,669335,427762,612934')).toEqual(369113.52);\n        expect(shortestDistance('893002,408806,832175,206634')).toEqual(211124.23);\n        expect(shortestDistance('977506,285482,754110,125577')).toEqual(274727.83);\n        expect(shortestDistance('795748,371587,879096,620555')).toEqual(262548.96);\n        expect(shortestDistance('878745,125916,868564,468477')).toEqual(342712.26);\n        expect(shortestDistance('255638,384590,553646,106611')).toEqual(407530.48);\n        expect(shortestDistance('295681,269737,919790,979659')).toEqual(945251.97);\n        expect(shortestDistance('437117,743737,87140,87831')).toEqual(743435.66);\n        expect(shortestDistance('159082,891855,706316,759432')).toEqual(563028.33);\n        expect(shortestDistance('548579,236475,949205,501845')).toEqual(480543.89);\n        expect(shortestDistance('762332,979209,519702,135582')).toEqual(877824.49);\n        expect(shortestDistance('527755,874377,808802,414686')).toEqual(538797.95);\n        expect(shortestDistance('510207,228479,859398,427831')).toEqual(402089.01);\n        expect(shortestDistance('351675,696101,590293,538194')).toEqual(286134.88);\n        expect(shortestDistance('747530,568205,363140,415032')).toEqual(413784.53);\n        expect(shortestDistance('511778,166384,298062,130009')).toEqual(216789.46);\n        expect(shortestDistance('806306,686819,107965,191864')).toEqual(855955.96);\n        expect(shortestDistance('765956,633668,109049,249330')).toEqual(761079.83);\n        expect(shortestDistance('93095,936536,483530,787628')).toEqual(417867.3);\n        expect(shortestDistance('940154,61291,420986,932019')).toEqual(1013756.71);\n        expect(shortestDistance('781754,127535,357750,559910')).toEqual(605580.33);\n        expect(shortestDistance('724578,863052,70799,493709')).toEqual(750893.62);\n        expect(shortestDistance('487285,760213,455440,653581')).toEqual(111285.61);\n        expect(shortestDistance('680641,946984,540289,624391')).toEqual(351802.4);\n        expect(shortestDistance('899184,991331,798567,164986')).toEqual(832448.1);\n        expect(shortestDistance('562713,161536,523961,625562')).toEqual(465641.33);\n        expect(shortestDistance('542023,454088,964526,50231')).toEqual(584473.49);\n        expect(shortestDistance('244471,140665,528253,794020')).toEqual(712323.65);\n        expect(shortestDistance('543096,115972,161398,44073')).toEqual(388410.65);\n        expect(shortestDistance('515465,189354,395048,447478')).toEqual(284830.22);\n        expect(shortestDistance('971880,420666,284838,665176')).toEqual(729254.31);\n        expect(shortestDistance('769307,872393,3412,513111')).toEqual(845977.96);\n        expect(shortestDistance('972129,311414,436406,721417')).toEqual(674612.18);\n        expect(shortestDistance('703398,549436,83009,57530')).toEqual(791741.13);\n        expect(shortestDistance('953718,77863,819405,237685')).toEqual(208765.55);\n        expect(shortestDistance('156313,110779,72336,200160')).toEqual(122642.16);\n        expect(shortestDistance('662613,960374,69619,866342')).toEqual(600403.12);\n        expect(shortestDistance('131067,775294,717696,781030')).toEqual(586657.04);\n        expect(shortestDistance('830047,554138,652748,102563')).toEqual(485133.92);\n        expect(shortestDistance('559596,200854,804979,256316')).toEqual(251572.75);\n        expect(shortestDistance('957222,53362,317420,649631')).toEqual(874576.08);\n        expect(shortestDistance('502990,777384,645607,917681')).toEqual(200057.13);\n        expect(shortestDistance('600452,378116,101557,754466')).toEqual(624928.43);\n        expect(shortestDistance('831197,579508,751936,11441')).toEqual(573569.89);\n        expect(shortestDistance('663393,961340,979651,946654')).toEqual(316598.8);\n        expect(shortestDistance('632603,953689,601599,82765')).toEqual(871475.68);\n        expect(shortestDistance('978799,809595,730783,218019')).toEqual(641462.47);\n        expect(shortestDistance('72279,860223,922783,987188')).toEqual(859928.58);\n        expect(shortestDistance('303523,377097,999002,865632')).toEqual(849916.16);\n        expect(shortestDistance('535256,976753,243038,850182')).toEqual(318451.84);\n        expect(shortestDistance('536521,916395,717264,362066')).toEqual(583051.17);\n        expect(shortestDistance('419077,583257,619010,10663')).toEqual(606495.75);\n        expect(shortestDistance('831818,748634,717195,786409')).toEqual(120687.13);\n        expect(shortestDistance('476105,988461,869218,401866')).toEqual(706138.46);\n        expect(shortestDistance('114425,990213,681474,643456')).toEqual(664669.08);\n        expect(shortestDistance('378336,809829,381265,224472')).toEqual(585364.33);\n        expect(shortestDistance('182212,808411,114705,698778')).toEqual(128750.11);\n        expect(shortestDistance('136920,742059,441819,130713')).toEqual(683159.81);\n        expect(shortestDistance('882382,793581,462956,919231')).toEqual(437842.54);\n        expect(shortestDistance('124164,251582,528462,653536')).toEqual(570108.67);\n        expect(shortestDistance('578730,814373,344012,38655')).toEqual(810451.08);\n        expect(shortestDistance('370700,354764,667668,310981')).toEqual(300178.19);\n        expect(shortestDistance('181719,249323,211024,304992')).toEqual(62911.21);\n        expect(shortestDistance('135684,650072,917041,301665')).toEqual(855515.17);\n        expect(shortestDistance('784377,882757,345735,234375')).toEqual(782819.28);\n        expect(shortestDistance('958626,130182,464116,723181')).toEqual(772132.08);\n        expect(shortestDistance('481633,840715,802874,28294')).toEqual(873626.73);\n        expect(shortestDistance('495486,383974,49334,503663')).toEqual(461927.55);\n        expect(shortestDistance('902548,167880,507907,995303')).toEqual(916717.15);\n        expect(shortestDistance('946112,569002,862233,142279')).toEqual(434888.73);\n        expect(shortestDistance('748170,617365,909749,693561')).toEqual(178643.79);\n        expect(shortestDistance('575683,51729,292743,698161')).toEqual(705641.11);\n        expect(shortestDistance('113772,215353,651982,489825')).toEqual(604156.34);\n        expect(shortestDistance('607515,715782,901035,394090')).toEqual(435476.44);\n        expect(shortestDistance('270927,824337,808010,643618')).toEqual(566672.31);\n        expect(shortestDistance('34740,983000,331885,751392')).toEqual(376745.83);\n        expect(shortestDistance('485549,872568,521277,318756')).toEqual(554963.26);\n        expect(shortestDistance('185607,920976,945378,793977')).toEqual(770312.09);\n        expect(shortestDistance('50788,628620,979997,215761')).toEqual(1016799.84);\n        expect(shortestDistance('165780,803149,151526,945661')).toEqual(143223.07);\n        expect(shortestDistance('764304,831600,496460,568784')).toEqual(375250.13);\n        expect(shortestDistance('30480,643794,17223,108175')).toEqual(535783.04);\n        expect(shortestDistance('21781,165152,33419,70758')).toEqual(95108.73);\n        expect(shortestDistance('740143,705366,217224,163641')).toEqual(752934.43);\n        expect(shortestDistance('644120,795617,310946,988762')).toEqual(385110.25);\n        expect(shortestDistance('839690,498198,837114,847678')).toEqual(349489.49);\n        expect(shortestDistance('185084,28467,728989,886832')).toEqual(1016180.65);\n        expect(shortestDistance('320871,625554,871395,69288')).toEqual(782629.25);\n        expect(shortestDistance('567752,529624,396804,58466')).toEqual(501211.61);\n        expect(shortestDistance('671556,172853,817460,166503')).toEqual(146042.12);\n        expect(shortestDistance('124410,441642,54454,761215')).toEqual(327140.25);\n        expect(shortestDistance('377252,500966,196847,711636')).toEqual(277358.64);\n        expect(shortestDistance('352938,374672,74505,64364')).toEqual(416912.45);\n        expect(shortestDistance('634552,32312,964905,79014')).toEqual(333637.8);\n        expect(shortestDistance('881678,371592,49425,316997')).toEqual(834041.77);\n        expect(shortestDistance('462106,893099,370316,437203')).toEqual(465044.69);\n        expect(shortestDistance('709554,401921,71953,731851')).toEqual(717905.87);\n        expect(shortestDistance('761064,305179,251541,495133')).toEqual(543779.56);\n        expect(shortestDistance('270058,384180,19820,513311')).toEqual(281591.68);\n        expect(shortestDistance('945867,27895,648919,414337')).toEqual(487355.65);\n        expect(shortestDistance('909086,285573,301993,184928')).toEqual(615379.01);\n        expect(shortestDistance('322888,826405,3415,762957')).toEqual(325712.52);\n        expect(shortestDistance('263611,280814,159183,185878')).toEqual(141131.33);\n        expect(shortestDistance('127096,543040,332051,159323')).toEqual(435023.32);\n        expect(shortestDistance('458139,314682,193032,353309')).toEqual(267906.26);\n        expect(shortestDistance('112850,175221,217220,808761')).toEqual(642079.46);\n        expect(shortestDistance('859555,728143,426354,923390')).toEqual(475167.86);\n        expect(shortestDistance('351022,43243,680648,768261')).toEqual(796432.29);\n        expect(shortestDistance('211327,599054,881590,875543')).toEqual(725050.8);\n        expect(shortestDistance('995035,195931,923717,152863')).toEqual(83313.32);\n        expect(shortestDistance('406192,286280,900789,835826')).toEqual(739342.27);\n        expect(shortestDistance('769705,875227,375318,543771')).toEqual(515173.94);\n        expect(shortestDistance('108608,734914,862556,465377')).toEqual(800679.57);\n        expect(shortestDistance('493127,951182,429416,101653')).toEqual(851914.67);\n        expect(shortestDistance('794628,166173,677931,114497')).toEqual(127626.79);\n        expect(shortestDistance('518114,341486,267910,8200')).toEqual(416751.24);\n        expect(shortestDistance('733728,785539,661911,72691')).toEqual(716456.53);\n        expect(shortestDistance('788423,855307,689294,65682')).toEqual(795822.97);\n        expect(shortestDistance('641733,629899,785846,313782')).toEqual(347416.92);\n        expect(shortestDistance('829785,291839,509175,755106')).toEqual(563388.93);\n        expect(shortestDistance('922739,762089,823340,741293')).toEqual(101551.14);\n        expect(shortestDistance('538319,148284,429731,321570')).toEqual(204497.9);\n        expect(shortestDistance('956052,177395,274793,731820')).toEqual(878351.24);\n        expect(shortestDistance('984436,306878,34614,838122')).toEqual(1088293.17);\n        expect(shortestDistance('318117,33994,372418,509573')).toEqual(478668.97);\n        expect(shortestDistance('502365,825565,940830,487738')).toEqual(553514.8);\n        expect(shortestDistance('384495,957417,212725,527465')).toEqual(462994.23);\n        expect(shortestDistance('343231,699542,42257,376673')).toEqual(441395.22);\n        expect(shortestDistance('962547,633946,473094,352123')).toEqual(564790.62);\n        expect(shortestDistance('337989,233737,321073,581843')).toEqual(348516.77);\n        expect(shortestDistance('443063,355808,847613,943927')).toEqual(713823.97);\n        expect(shortestDistance('192028,445887,436546,197395')).toEqual(348622.04);\n        expect(shortestDistance('762780,665190,653618,106417')).toEqual(569336.11);\n        expect(shortestDistance('34833,191389,526886,605666')).toEqual(643227.48);\n        expect(shortestDistance('242186,637824,466329,979076')).toEqual(408280.56);\n        expect(shortestDistance('267452,695983,620152,465375')).toEqual(421399.26);\n        expect(shortestDistance('631186,867865,188722,253840')).toEqual(756836.24);\n        expect(shortestDistance('975731,331378,71185,910650')).toEqual(1074131.98);\n        expect(shortestDistance('952214,66307,721396,511858')).toEqual(501789.44);\n        expect(shortestDistance('223447,431343,368798,600014')).toEqual(222658.53);\n        expect(shortestDistance('90793,296006,607725,615691')).toEqual(607797);\n        expect(shortestDistance('181761,168772,639985,591935')).toEqual(623727.63);\n        expect(shortestDistance('736137,706848,29083,949167')).toEqual(747424.82);\n        expect(shortestDistance('483100,880096,498332,178742')).toEqual(701519.38);\n        expect(shortestDistance('26885,682420,385813,481230')).toEqual(411468.98);\n        expect(shortestDistance('315460,678240,184384,737905')).toEqual(144016.77);\n        expect(shortestDistance('540333,247351,823045,587302')).toEqual(442145.63);\n        expect(shortestDistance('834075,628305,148595,700754')).toEqual(689297.97);\n        expect(shortestDistance('400952,189789,715885,397292')).toEqual(377147.57);\n        expect(shortestDistance('789786,557695,480429,46433')).toEqual(597570.57);\n        expect(shortestDistance('954482,291709,913515,385161')).toEqual(102037.11);\n        expect(shortestDistance('677296,794660,280956,438719')).toEqual(532709.48);\n        expect(shortestDistance('344960,707215,816725,200684')).toEqual(692196.41);\n        expect(shortestDistance('346931,739942,581888,910193')).toEqual(290155.47);\n        expect(shortestDistance('483317,563372,997431,126527')).toEqual(674645.65);\n        expect(shortestDistance('650623,239129,677039,151635')).toEqual(91394.78);\n        expect(shortestDistance('804694,424841,432462,420555')).toEqual(372256.67);\n        expect(shortestDistance('82254,248165,589831,236960')).toEqual(507700.66);\n        expect(shortestDistance('428495,413115,380346,869134')).toEqual(458553.87);\n    });\n});\n"
  },
  {
    "original_code": "function accum(str) {\n  \n}",
    "new_code": "function accum(str) {\n  // Your code here.\n}\n\nmodule.exports = accum;\n",
    "original_tests": "Test.assertEquals(accum(\"abcd\"), \"A-Bb-Ccc-Dddd\");\nTest.assertEquals(accum(\"RqaEzty\"), \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\");\nTest.assertEquals(accum(\"cwAt\"), \"C-Ww-Aaa-Tttt\");\nTest.assertEquals(accum(\"VgyCdnQa\"), \"V-Gg-Yyy-Cccc-Ddddd-Nnnnnn-Qqqqqqq-Aaaaaaaa\");\nTest.assertEquals(accum(\"nRBSdNOsMl\"), \"N-Rr-Bbb-Ssss-Ddddd-Nnnnnn-Ooooooo-Ssssssss-Mmmmmmmmm-Llllllllll\");\nTest.assertEquals(accum(\"nuE\"), \"N-Uu-Eee\");\nTest.assertEquals(accum(\"RlDrhZuQaqsoHEfziByObtMxkFCJVe\"), \"R-Ll-Ddd-Rrrr-Hhhhh-Zzzzzz-Uuuuuuu-Qqqqqqqq-Aaaaaaaaa-Qqqqqqqqqq-Sssssssssss-Oooooooooooo-Hhhhhhhhhhhhh-Eeeeeeeeeeeeee-Fffffffffffffff-Zzzzzzzzzzzzzzzz-Iiiiiiiiiiiiiiiii-Bbbbbbbbbbbbbbbbbb-Yyyyyyyyyyyyyyyyyyy-Oooooooooooooooooooo-Bbbbbbbbbbbbbbbbbbbbb-Tttttttttttttttttttttt-Mmmmmmmmmmmmmmmmmmmmmmm-Xxxxxxxxxxxxxxxxxxxxxxxx-Kkkkkkkkkkkkkkkkkkkkkkkkk-Ffffffffffffffffffffffffff-Ccccccccccccccccccccccccccc-Jjjjjjjjjjjjjjjjjjjjjjjjjjjj-Vvvvvvvvvvvvvvvvvvvvvvvvvvvvv-Eeeeeeeeeeeeeeeeeeeeeeeeeeeeee\");\nTest.assertEquals(accum(\"EXpzPFx\"), \"E-Xx-Ppp-Zzzz-Ppppp-Ffffff-Xxxxxxx\");\nTest.assertEquals(accum(\"NU\"), \"N-Uu\");\nTest.assertEquals(accum(\"g\"), \"G\");",
    "new_tests": "const accum = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(accum('abcd')).toEqual('A-Bb-Ccc-Dddd');\n        expect(accum('RqaEzty')).toEqual('R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy');\n        expect(accum('cwAt')).toEqual('C-Ww-Aaa-Tttt');\n        expect(accum('VgyCdnQa')).toEqual('V-Gg-Yyy-Cccc-Ddddd-Nnnnnn-Qqqqqqq-Aaaaaaaa');\n        expect(accum('nRBSdNOsMl')).toEqual('N-Rr-Bbb-Ssss-Ddddd-Nnnnnn-Ooooooo-Ssssssss-Mmmmmmmmm-Llllllllll');\n        expect(accum('nuE')).toEqual('N-Uu-Eee');\n        expect(accum('RlDrhZuQaqsoHEfziByObtMxkFCJVe')).toEqual('R-Ll-Ddd-Rrrr-Hhhhh-Zzzzzz-Uuuuuuu-Qqqqqqqq-Aaaaaaaaa-Qqqqqqqqqq-Sssssssssss-Oooooooooooo-Hhhhhhhhhhhhh-Eeeeeeeeeeeeee-Fffffffffffffff-Zzzzzzzzzzzzzzzz-Iiiiiiiiiiiiiiiii-Bbbbbbbbbbbbbbbbbb-Yyyyyyyyyyyyyyyyyyy-Oooooooooooooooooooo-Bbbbbbbbbbbbbbbbbbbbb-Tttttttttttttttttttttt-Mmmmmmmmmmmmmmmmmmmmmmm-Xxxxxxxxxxxxxxxxxxxxxxxx-Kkkkkkkkkkkkkkkkkkkkkkkkk-Ffffffffffffffffffffffffff-Ccccccccccccccccccccccccccc-Jjjjjjjjjjjjjjjjjjjjjjjjjjjj-Vvvvvvvvvvvvvvvvvvvvvvvvvvvvv-Eeeeeeeeeeeeeeeeeeeeeeeeeeeeee');\n        expect(accum('EXpzPFx')).toEqual('E-Xx-Ppp-Zzzz-Ppppp-Ffffff-Xxxxxxx');\n        expect(accum('NU')).toEqual('N-Uu');\n        expect(accum('g')).toEqual('G');\n    });\n});\n"
  },
  {
    "original_code": "function dataType(value) {\n  \n}",
    "new_code": "function dataType(value) {\n  // Your code here.\n}\n\nmodule.exports = dataType;\n",
    "original_tests": "Test.assertEquals(dataType([1, 2, 3, 4, 5]), \"array\")\nTest.assertEquals(dataType({key: \"value\"}), \"object\")\nTest.assertEquals(dataType(\"This is an example string...\"), \"string\")\nTest.assertEquals(dataType(2017), \"number\")\nTest.assertEquals(dataType(true), \"boolean\")\nTest.assertEquals(dataType(null), \"null\")\nTest.assertEquals(dataType(undefined), \"undefined\")\nTest.assertEquals(dataType(new Date()), \"date\")",
    "new_tests": "const dataType = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(dataType([1, 2, 3, 4, 5])).toEqual('array');\n        expect(dataType({key: 'value'})).toEqual('object');\n        expect(dataType('This is an example string...')).toEqual('string');\n        expect(dataType(2017)).toEqual('number');\n        expect(dataType(true)).toEqual('boolean');\n        expect(dataType(undefined)).toEqual('null');\n        expect(dataType(undefined)).toEqual('undefined');\n        expect(dataType(new Date())).toEqual('date');\n    });\n});\n"
  },
  {
    "original_code": "function cumulativeSum(arr) {\n  \n}",
    "new_code": "function cumulativeSum(arr) {\n  // Your code here.\n}\n\nmodule.exports = cumulativeSum;\n",
    "original_tests": "Test.assertSimilar(\n  cumulativeSum([]),\n  [],\n  'Should return an empty array if given an empty array'\n);\n\nTest.assertSimilar(\n  cumulativeSum([1]),\n  [1],\n  'Should work with 1 value'\n);\n\nTest.assertSimilar(\n  cumulativeSum([1, 2, 3]),\n  [1, 3, 6],\n  'Should work with multiple values'\n);\n\nTest.assertSimilar(\n  cumulativeSum([-1, -2, -3]),\n  [-1, -3, -6],\n  'Should work with multiple negative values'\n);\n\nTest.assertSimilar(\n  cumulativeSum([1, -2, 3]),\n  [1, -1, 2],\n  'Should work with multiple positive and negative values'\n);\n\nTest.assertSimilar(\n  cumulativeSum([3, 3, -2, 408, 3, 3, 0, 66, 2, -2, 2, 3, 4, 2, -47, 3, 3, 2]),\n  [3, 6, 4, 412, 415, 418, 418, 484, 486, 484, 486, 489, 493, 495, 448, 451, 454, 456],\n  'Should work with long array'\n);",
    "new_tests": "const cumulativeSum = require('./code');\n\ndescribe('Tests', () => {\n    test('Should return an empty array if given an empty array', () => {\n        expect(cumulativeSum([])).toEqual([]);\n    });\n\ntest('Should work with 1 value', () => {\n        expect(cumulativeSum([1])).toEqual([1]);\n    });\n\ntest('Should work with multiple values', () => {\n        expect(cumulativeSum([1, 2, 3])).toEqual([1, 3, 6]);\n    });\n\ntest('Should work with multiple negative values', () => {\n        expect(cumulativeSum([-1, -2, -3])).toEqual([-1, -3, -6]);\n    });\n\ntest('Should work with multiple positive and negative values', () => {\n        expect(cumulativeSum([1, -2, 3])).toEqual([1, -1, 2]);\n    });\n\ntest('Should work with long array', () => {\n        expect(cumulativeSum([3, 3, -2, 408, 3, 3, 0, 66, 2, -2, 2, 3, 4, 2, -47, 3, 3, 2])).toEqual([3, 6, 4, 412, 415, 418, 418, 484, 486, 484, 486, 489, 493, 495, 448, 451, 454, 456]);\n    });\n    \n    test('the tests', () => {\n        \n    });\n});\n"
  },
  {
    "original_code": "function median(arr) {\n  \n}",
    "new_code": "function median(arr) {\n  // Your code here.\n}\n\nmodule.exports = median;\n",
    "original_tests": "Test.assertEquals(median([20, 40, 20, 30, 50, 60, 70, 0, 20]), 30);\nTest.assertEquals(median([342, 98, 5456, 32, 786, 432, 890, 321]), 387);\nTest.assertEquals(median([1, 0, 1, 0, 0, 0, 1, 1]), 0.5);\nTest.assertEquals(median([32, 5, 78, 32, 4, 5, 3]), 5);\nTest.assertEquals(median([-20, 40, 30, -2, 40, -13]), 14);\nTest.assertEquals(median([32786, 7837, 83736, 83736, 10383, 738393]), 58261);\nTest.assertEquals(median([7685, 83736, 38376, 73638, 7337]), 38376);\nTest.assertEquals(median([0, 0, 0, 0]), 0);\nTest.assertEquals(median([-30, -42, -60, -10, -30, -50]), -36);\nTest.assertEquals(median([238, 432, 897, 710]), 571);",
    "new_tests": "const median = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(median([20, 40, 20, 30, 50, 60, 70, 0, 20])).toEqual(30);\n        expect(median([342, 98, 5456, 32, 786, 432, 890, 321])).toEqual(387);\n        expect(median([1, 0, 1, 0, 0, 0, 1, 1])).toEqual(0.5);\n        expect(median([32, 5, 78, 32, 4, 5, 3])).toEqual(5);\n        expect(median([-20, 40, 30, -2, 40, -13])).toEqual(14);\n        expect(median([32786, 7837, 83736, 83736, 10383, 738393])).toEqual(58261);\n        expect(median([7685, 83736, 38376, 73638, 7337])).toEqual(38376);\n        expect(median([0, 0, 0, 0])).toEqual(0);\n        expect(median([-30, -42, -60, -10, -30, -50])).toEqual(-36);\n        expect(median([238, 432, 897, 710])).toEqual(571);\n    });\n});\n"
  },
  {
    "original_code": "function letterCheck(arr) {\n  \n}",
    "new_code": "function letterCheck(arr) {\n  // Your code here.\n}\n\nmodule.exports = letterCheck;\n",
    "original_tests": "Test.assertEquals(letterCheck([\"trances\", \"nectar\"]), true)\nTest.assertEquals(letterCheck([\"THE EYES\", \"they see\"]), true)\nTest.assertEquals(letterCheck([\"assert\", \"staring\"]), false)\nTest.assertEquals(letterCheck([\"arches\", \"later\"]), false)\nTest.assertEquals(letterCheck([\"dale\", \"caller\"]), false)\nTest.assertEquals(letterCheck([\"parses\", \"parsecs\"]), false)\nTest.assertEquals(letterCheck([\"replays\", \"adam\"]), false)\nTest.assertEquals(letterCheck([\"mastering\", \"streaming\"]), true)\nTest.assertEquals(letterCheck([\"drapes\", \"compadres\"]), false)\nTest.assertEquals(letterCheck([\"deltas\", \"slated\"]), true)",
    "new_tests": "const letterCheck = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(letterCheck(['trances', 'nectar'])).toEqual(true);\n        expect(letterCheck(['THE EYES', 'they see'])).toEqual(true);\n        expect(letterCheck(['assert', 'staring'])).toEqual(false);\n        expect(letterCheck(['arches', 'later'])).toEqual(false);\n        expect(letterCheck(['dale', 'caller'])).toEqual(false);\n        expect(letterCheck(['parses', 'parsecs'])).toEqual(false);\n        expect(letterCheck(['replays', 'adam'])).toEqual(false);\n        expect(letterCheck(['mastering', 'streaming'])).toEqual(true);\n        expect(letterCheck(['drapes', 'compadres'])).toEqual(false);\n        expect(letterCheck(['deltas', 'slated'])).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function encodeMorse(str) {\n  \n}",
    "new_code": "function encodeMorse(str) {\n  // Your code here.\n}\n\nmodule.exports = encodeMorse;\n",
    "original_tests": "Test.assertEquals(encodeMorse(\"EDABBIT CHALLENGE\"),\". -.. .- -... -... .. -   -.-. .... .- .-.. .-.. . -. --. .\");\nTest.assertEquals(encodeMorse(\"HELP ME !\"),\".... . .-.. .--.   -- .   -.-.--\");\nTest.assertEquals(encodeMorse(\"CHALLENGE\"),\"-.-. .... .- .-.. .-.. . -. --. .\");\nTest.assertEquals(encodeMorse( \"1 APPLE AND 5 CHERRY, 7 SANDWICHES, 2 TABLES, 9 INVITED GUYS ! THAT'S SO COOL...\"),\".----   .- .--. .--. .-.. .   .- -. -..   .....   -.-. .... . .-. .-. -.-- --..--   --...   ... .- -. -.. .-- .. -.-. .... . ... --..--   ..---   - .- -... .-.. . ... --..--   ----.   .. -. ...- .. - . -..   --. ..- -.-- ...   -.-.--   - .... .- - .----. ...   ... ---   -.-. --- --- .-.. .-.-.- .-.-.- .-.-.-\");\nTest.assertEquals(encodeMorse(\"did you got my mail ?\"),\"-.. .. -..   -.-- --- ..-   --. --- -   -- -.--   -- .- .. .-..   ..--..\");\nTest.assertEquals(encodeMorse(\"TWO THInGS TO KNOW : i FORGeT THeM :C\"),\"- .-- ---   - .... .. -. --. ...   - ---   -.- -. --- .--   ---...   ..   ..-. --- .-. --. . -   - .... . --   ---... -.-.\");",
    "new_tests": "const encodeMorse = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(encodeMorse('EDABBIT CHALLENGE')).toEqual('. -.. .- -... -... .. -   -.-. .... .- .-.. .-.. . -. --. .');\n        expect(encodeMorse('HELP ME !')).toEqual('.... . .-.. .--.   -- .   -.-.--');\n        expect(encodeMorse('CHALLENGE')).toEqual('-.-. .... .- .-.. .-.. . -. --. .');\n        expect(encodeMorse('1 APPLE AND 5 CHERRY, 7 SANDWICHES, 2 TABLES, 9 INVITED GUYS ! THAT\\'S SO COOL...')).toEqual('.----   .- .--. .--. .-.. .   .- -. -..   .....   -.-. .... . .-. .-. -.-- --..--   --...   ... .- -. -.. .-- .. -.-. .... . ... --..--   ..---   - .- -... .-.. . ... --..--   ----.   .. -. ...- .. - . -..   --. ..- -.-- ...   -.-.--   - .... .- - .----. ...   ... ---   -.-. --- --- .-.. .-.-.- .-.-.- .-.-.-');\n        expect(encodeMorse('did you got my mail ?')).toEqual('-.. .. -..   -.-- --- ..-   --. --- -   -- -.--   -- .- .. .-..   ..--..');\n        expect(encodeMorse('TWO THInGS TO KNOW : i FORGeT THeM :C')).toEqual('- .-- ---   - .... .. -. --. ...   - ---   -.- -. --- .--   ---...   ..   ..-. --- .-. --. . -   - .... . --   ---... -.-.');\n    });\n});\n"
  },
  {
    "original_code": "function alphabetIndex(str) {\n  \n}",
    "new_code": "function alphabetIndex(str) {\n  // Your code here.\n}\n\nmodule.exports = alphabetIndex;\n",
    "original_tests": "Test.assertEquals(alphabetIndex(\"Wednesday is hump day, but has anyone asked the camel if he\u2019s happy about it?\"), \"23 5 4 14 5 19 4 1 25 9 19 8 21 13 16 4 1 25 2 21 20 8 1 19 1 14 25 15 14 5 1 19 11 5 4 20 8 5 3 1 13 5 12 9 6 8 5 19 8 1 16 16 25 1 2 15 21 20 9 20\")\nTest.assertEquals(alphabetIndex(\"Check back tomorrow; I will see if the book has arrived.\"), \"3 8 5 3 11 2 1 3 11 20 15 13 15 18 18 15 23 9 23 9 12 12 19 5 5 9 6 20 8 5 2 15 15 11 8 1 19 1 18 18 9 22 5 4\")\nTest.assertEquals(alphabetIndex(\"We have a lot of rain in June.\"), \"23 5 8 1 22 5 1 12 15 20 15 6 18 1 9 14 9 14 10 21 14 5\")\nTest.assertEquals(alphabetIndex(\"Sixty-Four comes asking for bread.\"), \"19 9 24 20 25 6 15 21 18 3 15 13 5 19 1 19 11 9 14 7 6 15 18 2 18 5 1 4\")\nTest.assertEquals(alphabetIndex(\"The#b00k$is*in^fr0nt#0f!the_taBle.\"), \"20 8 5 2 11 9 19 9 14 6 18 14 20 6 20 8 5 20 1 2 12 5\")\nTest.assertEquals(alphabetIndex(\"Lets all be unique together until we realise we are all the same.\"), \"12 5 20 19 1 12 12 2 5 21 14 9 17 21 5 20 15 7 5 20 8 5 18 21 14 20 9 12 23 5 18 5 1 12 9 19 5 23 5 1 18 5 1 12 12 20 8 5 19 1 13 5\")\nTest.assertEquals(alphabetIndex(\"The river stole the gods.\"), \"20 8 5 18 9 22 5 18 19 20 15 12 5 20 8 5 7 15 4 19\")\nTest.assertEquals(alphabetIndex(\"Wow, does that work?\"), \"23 15 23 4 15 5 19 20 8 1 20 23 15 18 11\")\nTest.assertEquals(alphabetIndex(\"If Purple People Eaters are real\u2026 where do they find purple people to eat?\"), \"9 6 16 21 18 16 12 5 16 5 15 16 12 5 5 1 20 5 18 19 1 18 5 18 5 1 12 23 8 5 18 5 4 15 20 8 5 25 6 9 14 4 16 21 18 16 12 5 16 5 15 16 12 5 20 15 5 1 20\")\nTest.assertEquals(alphabetIndex(\"Abstraction is often one floor above you.\"), \"1 2 19 20 18 1 3 20 9 15 14 9 19 15 6 20 5 14 15 14 5 6 12 15 15 18 1 2 15 22 5 25 15 21\")",
    "new_tests": "const alphabetIndex = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(alphabetIndex('Wednesday is hump day, but has anyone asked the camel if he\u2019s happy about it?')).toEqual('23 5 4 14 5 19 4 1 25 9 19 8 21 13 16 4 1 25 2 21 20 8 1 19 1 14 25 15 14 5 1 19 11 5 4 20 8 5 3 1 13 5 12 9 6 8 5 19 8 1 16 16 25 1 2 15 21 20 9 20');\n        expect(alphabetIndex('Check back tomorrow; I will see if the book has arrived.')).toEqual('3 8 5 3 11 2 1 3 11 20 15 13 15 18 18 15 23 9 23 9 12 12 19 5 5 9 6 20 8 5 2 15 15 11 8 1 19 1 18 18 9 22 5 4');\n        expect(alphabetIndex('We have a lot of rain in June.')).toEqual('23 5 8 1 22 5 1 12 15 20 15 6 18 1 9 14 9 14 10 21 14 5');\n        expect(alphabetIndex('Sixty-Four comes asking for bread.')).toEqual('19 9 24 20 25 6 15 21 18 3 15 13 5 19 1 19 11 9 14 7 6 15 18 2 18 5 1 4');\n        expect(alphabetIndex('The#b00k$is*in^fr0nt#0f!the_taBle.')).toEqual('20 8 5 2 11 9 19 9 14 6 18 14 20 6 20 8 5 20 1 2 12 5');\n        expect(alphabetIndex('Lets all be unique together until we realise we are all the same.')).toEqual('12 5 20 19 1 12 12 2 5 21 14 9 17 21 5 20 15 7 5 20 8 5 18 21 14 20 9 12 23 5 18 5 1 12 9 19 5 23 5 1 18 5 1 12 12 20 8 5 19 1 13 5');\n        expect(alphabetIndex('The river stole the gods.')).toEqual('20 8 5 18 9 22 5 18 19 20 15 12 5 20 8 5 7 15 4 19');\n        expect(alphabetIndex('Wow, does that work?')).toEqual('23 15 23 4 15 5 19 20 8 1 20 23 15 18 11');\n        expect(alphabetIndex('If Purple People Eaters are real\u2026 where do they find purple people to eat?')).toEqual('9 6 16 21 18 16 12 5 16 5 15 16 12 5 5 1 20 5 18 19 1 18 5 18 5 1 12 23 8 5 18 5 4 15 20 8 5 25 6 9 14 4 16 21 18 16 12 5 16 5 15 16 12 5 20 15 5 1 20');\n        expect(alphabetIndex('Abstraction is often one floor above you.')).toEqual('1 2 19 20 18 1 3 20 9 15 14 9 19 15 6 20 5 14 15 14 5 6 12 15 15 18 1 2 15 22 5 25 15 21');\n    });\n});\n"
  },
  {
    "original_code": "function getProducts(arr) {\n  \n}",
    "new_code": "function getProducts(arr) {\n  // Your code here.\n}\n\nmodule.exports = getProducts;\n",
    "original_tests": "Test.assertSimilar(getProducts([1, 2, 6, 5, 9]), [540, 270, 90, 108, 60]);\nTest.assertSimilar(getProducts([1, 7, 3, 4]), [84, 12, 28, 21]);\nTest.assertSimilar(getProducts([1, 2, 3, 0, 5]), [0, 0, 0, 30, 0]);",
    "new_tests": "const getProducts = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(getProducts([1, 2, 6, 5, 9])).toEqual([540, 270, 90, 108, 60]);\n        expect(getProducts([1, 7, 3, 4])).toEqual([84, 12, 28, 21]);\n        expect(getProducts([1, 2, 3, 0, 5])).toEqual([0, 0, 0, 30, 0]);\n    });\n});\n"
  },
  {
    "original_code": "function countSmileys(arr) {\n  \n}",
    "new_code": "function countSmileys(arr) {\n  // Your code here.\n}\n\nmodule.exports = countSmileys;\n",
    "original_tests": "Test.assertEquals(countSmileys([\":)\", \";(\", \";}\", \":-D\"]), 2);\nTest.assertEquals(countSmileys([\";D\", \":-(\", \":-)\", \";~)\"]), 3);\nTest.assertEquals(countSmileys([\";]\", \":[\", \";*\", \":$\", \";-D\"]), 1);\nTest.assertEquals(countSmileys([\";(\", \":>\", \":}\", \":]\"]), 0);\nTest.assertEquals(countSmileys([\":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\",]), 13);\nTest.assertEquals(countSmileys([':)',':(',':D',':O',':;']), 2);\nTest.assertEquals(countSmileys([':-)',';~D',':-D',':_D']), 3);\nTest.assertEquals(countSmileys([':---)','))',';~~D',';D']), 1);\nTest.assertEquals(countSmileys([';~)',':)',':-)',':--)']), 3);\nTest.assertEquals(countSmileys([':o)',':--D',';-~)']), 0);\nTest.assertEquals(countSmileys([]), 0, \"An empty array should return 0\");",
    "new_tests": "const countSmileys = require('./code');\n\ndescribe('Tests', () => {\n    test('An empty array should return 0', () => {\n        expect(countSmileys([])).toEqual(0);\n    });\n    \n    test('the tests', () => {\n        expect(countSmileys([':)', ';(', ';}', ':-D'])).toEqual(2);\n        expect(countSmileys([';D', ':-(', ':-)', ';~)'])).toEqual(3);\n        expect(countSmileys([';]', ':[', ';*', ':$', ';-D'])).toEqual(1);\n        expect(countSmileys([';(', ':>', ':}', ':]'])).toEqual(0);\n        expect(countSmileys([':)', ':)', ':)', ':)', ':)', ':)', ':)', ':)', ':)', ':)', ':)', ':)', ':)'])).toEqual(13);\n        expect(countSmileys([':)', ':(', ':D', ':O', ':;'])).toEqual(2);\n        expect(countSmileys([':-)', ';~D', ':-D', ':_D'])).toEqual(3);\n        expect(countSmileys([':---)', '))', ';~~D', ';D'])).toEqual(1);\n        expect(countSmileys([';~)', ':)', ':-)', ':--)'])).toEqual(3);\n        expect(countSmileys([':o)', ':--D', ';-~)'])).toEqual(0);\n    });\n});\n"
  },
  {
    "original_code": "function remix(str, arr) {\n  \n}",
    "new_code": "function remix(str, arr) {\n  // Your code here.\n}\n\nmodule.exports = remix;\n",
    "original_tests": "Test.assertEquals(remix(\"abcd\", [0, 3, 1, 2]), \"acdb\");\nTest.assertEquals(remix(\"PlOt\", [1, 3, 0, 2]), \"OPtl\");\nTest.assertEquals(remix(\"computer\", [0, 2, 1, 5, 3, 6, 7, 4]), \"cmourpte\");\nTest.assertEquals(remix(\"twist\", [4, 0, 1, 2, 3]), \"wistt\");\nTest.assertEquals(remix(\"responsibility\", [0, 6, 8, 11, 10, 7, 13, 5, 3, 2, 4, 12, 1, 9]), \"rtibliensyopis\");\nTest.assertEquals(remix(\"Interference\", [6, 9, 10, 11, 7, 3, 0, 2, 5, 1, 8, 4]), \"enrfeeIrcnte\");\nTest.assertEquals(remix(\"sequence\", [5, 7, 3, 4, 0, 1, 2, 6]), \"encqusee\");",
    "new_tests": "const remix = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(remix('abcd', [0, 3, 1, 2])).toEqual('acdb');\n        expect(remix('PlOt', [1, 3, 0, 2])).toEqual('OPtl');\n        expect(remix('computer', [0, 2, 1, 5, 3, 6, 7, 4])).toEqual('cmourpte');\n        expect(remix('twist', [4, 0, 1, 2, 3])).toEqual('wistt');\n        expect(remix('responsibility', [0, 6, 8, 11, 10, 7, 13, 5, 3, 2, 4, 12, 1, 9])).toEqual('rtibliensyopis');\n        expect(remix('Interference', [6, 9, 10, 11, 7, 3, 0, 2, 5, 1, 8, 4])).toEqual('enrfeeIrcnte');\n        expect(remix('sequence', [5, 7, 3, 4, 0, 1, 2, 6])).toEqual('encqusee');\n    });\n});\n"
  },
  {
    "original_code": "function mergeArrays(a, b) {\n  \n}",
    "new_code": "function mergeArrays(a, b) {\n  // Your code here.\n}\n\nmodule.exports = mergeArrays;\n",
    "original_tests": "Test.assertSimilar(mergeArrays([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4, 5]), [\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5])\nTest.assertSimilar(mergeArrays([1, 2, 3], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]), [1, \"a\", 2, \"b\", 3, \"c\", \"d\", \"e\", \"f\"])\nTest.assertSimilar(mergeArrays([\"f\", \"d\", \"w\", \"t\"], [5, 3, 7, 8]), [\"f\", 5, \"d\", 3, \"w\", 7, \"t\", 8])\nTest.assertSimilar(mergeArrays([4, 54, 7, 87], [\"t\", \"d\", \"t\"]), [4, \"t\", 54, \"d\", 7, \"t\", 87])\nTest.assertSimilar(mergeArrays([\"c\"], [3]), [ \"c\", 3 ])\nTest.assertSimilar(mergeArrays([4, 3, 2, 1], [\"r\", \"d\"]), [ 4, \"r\", 3, \"d\", 2, 1 ])\nTest.assertSimilar(mergeArrays([\"u\", \"k\", \"c\"], [2, 8, 30]), [\"u\", 2, \"k\", 8, \"c\", 30])\nTest.assertSimilar(mergeArrays([\"e\"], [1, 2, 3, 4, 5, 6, 7]), [\"e\", 1, 2, 3, 4, 5, 6, 7])\nTest.assertSimilar(mergeArrays([1, 2, 3, 4, 5, 6, 7], [\"e\"]), [1, \"e\", 2, 3, 4, 5, 6, 7])\nTest.assertSimilar(mergeArrays([123, 456], [\"c\", \"b\", \"a\"]), [123, \"c\", 456, \"b\", \"a\"])",
    "new_tests": "const mergeArrays = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(mergeArrays(['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5])).toEqual(['a', 1, 'b', 2, 'c', 3, 'd', 4, 'e', 5]);\n        expect(mergeArrays([1, 2, 3], ['a', 'b', 'c', 'd', 'e', 'f'])).toEqual([1, 'a', 2, 'b', 3, 'c', 'd', 'e', 'f']);\n        expect(mergeArrays(['f', 'd', 'w', 't'], [5, 3, 7, 8])).toEqual(['f', 5, 'd', 3, 'w', 7, 't', 8]);\n        expect(mergeArrays([4, 54, 7, 87], ['t', 'd', 't'])).toEqual([4, 't', 54, 'd', 7, 't', 87]);\n        expect(mergeArrays(['c'], [3])).toEqual(['c', 3]);\n        expect(mergeArrays([4, 3, 2, 1], ['r', 'd'])).toEqual([4, 'r', 3, 'd', 2, 1]);\n        expect(mergeArrays(['u', 'k', 'c'], [2, 8, 30])).toEqual(['u', 2, 'k', 8, 'c', 30]);\n        expect(mergeArrays(['e'], [1, 2, 3, 4, 5, 6, 7])).toEqual(['e', 1, 2, 3, 4, 5, 6, 7]);\n        expect(mergeArrays([1, 2, 3, 4, 5, 6, 7], ['e'])).toEqual([1, 'e', 2, 3, 4, 5, 6, 7]);\n        expect(mergeArrays([123, 456], ['c', 'b', 'a'])).toEqual([123, 'c', 456, 'b', 'a']);\n    });\n});\n"
  },
  {
    "original_code": "function countAll(str) {\n  \n}",
    "new_code": "function countAll(str) {\n  // Your code here.\n}\n\nmodule.exports = countAll;\n",
    "original_tests": "Test.assertSimilar(countAll('Hello'), {'LETTERS': 5, 'DIGITS': 0});\nTest.assertSimilar(countAll('137'), {'LETTERS': 0, 'DIGITS': 3});\nTest.assertSimilar(countAll('H3LL0'), {'LETTERS': 3, 'DIGITS': 2});\nTest.assertSimilar(countAll('149990'), {'LETTERS': 0, 'DIGITS': 6});\nTest.assertSimilar(countAll('edabit 2018'), {'LETTERS': 6, 'DIGITS': 4}, 'Spaces are not letters.');\nTest.assertSimilar(countAll('    '), {'LETTERS': 0, 'DIGITS': 0});",
    "new_tests": "const countAll = require('./code');\n\ndescribe('Tests', () => {\n    test('Spaces are not letters.', () => {\n        expect(countAll('edabit 2018')).toEqual({'LETTERS': 6, 'DIGITS': 4});\n    });\n    \n    test('the tests', () => {\n        expect(countAll('Hello')).toEqual({'LETTERS': 5, 'DIGITS': 0});\n        expect(countAll('137')).toEqual({'LETTERS': 0, 'DIGITS': 3});\n        expect(countAll('H3LL0')).toEqual({'LETTERS': 3, 'DIGITS': 2});\n        expect(countAll('149990')).toEqual({'LETTERS': 0, 'DIGITS': 6});\n        expect(countAll('    ')).toEqual({'LETTERS': 0, 'DIGITS': 0});\n    });\n});\n"
  },
  {
    "original_code": "function pointsInCircle(points, centerX, centerY, radius) {\n  \n}",
    "new_code": "function pointsInCircle(points, centerX, centerY, radius) {\n  // Your code here.\n}\n\nmodule.exports = pointsInCircle;\n",
    "original_tests": "Test.assertEquals(pointsInCircle([{x: 0, y: 0}, {x: 1, y: 1}, {x: 0, y: 5}, {x: 10, y: 10}], 0, 0, 5), 2)\nTest.assertEquals(pointsInCircle([{x: 9, y: 6}, {x: 9, y: 3}, {x: 4, y: 8}, {x: 3, y: 10}, {x: 1, y: 6}], 0, 0, 7.5), 1)\nTest.assertEquals(pointsInCircle([{x: 8, y: 8}, {x: 8, y: 6}, {x: 4, y: 7}], 0, 0, 1), 0)\nTest.assertEquals(pointsInCircle([{x: 0, y: 0}, {x: 1, y: 1}, {x: 0, y: 5}, {x: 10, y: 10}], 50, 50, 40), 0)\nTest.assertEquals(pointsInCircle([{x: 10, y: 10}, {x: 33, y: 54}, {x: 7, y: 98}, {x: 516, y: 85}], 23, 94, 100), 3)\nTest.assertEquals(pointsInCircle([{x: 6, y: 3}, {x: 1, y: 4}, {x: 1, y: 9}, {x: 4, y: 9}, {x: 9, y: 3}, {x: 10, y: 8}, {x: 2, y: 2}, {x: 4, y: 3}, {x: 4, y: 4}, {x: 1, y: 2}, {x: 8, y: 9}, {x: 6, y: 10}, {x: 10, y: 6}, {x: 8, y: 8}, {x: 2, y: 1}, {x: 7, y: 4}, {x: 6, y: 1}, {x: 8, y: 1}, {x: 8, y: 5}, {x: 2, y: 1}, {x: 10, y: 5}, {x: 6, y: 5}, {x: 8, y: 3}, {x: 7, y: 8}, {x: 1, y: 6}, {x: 8, y: 7}, {x: 4, y: 10}, {x: 6, y: 5}, {x: 4, y: 5}, {x: 1, y: 10}, {x: 4, y: 4}, {x: 6, y: 8}, {x: 2, y: 8}, {x: 2, y: 8}, {x: 1, y: 10}, {x: 3, y: 2}, {x: 5, y: 7}, {x: 10, y: 2}, {x: 9, y: 8}, {x: 4, y: 3}, {x: 9, y: 5}, {x: 6, y: 3}, {x: 1, y: 3}, {x: 5, y: 10}, {x: 2, y: 7}, {x: 10, y: 6}, {x: 8, y: 4}, {x: 9, y: 9}, {x: 1, y: 8}, {x: 1, y: 3}, {x: 2, y: 2}, {x: 10, y: 1}, {x: 5, y: 6}, {x: 10, y: 5}, {x: 8, y: 5}, {x: 9, y: 10}, {x: 1, y: 4}, {x: 5, y: 6}, {x: 6, y: 5}, {x: 2, y: 2}, {x: 10, y: 10}, {x: 6, y: 7}, {x: 2, y: 1}, {x: 4, y: 4}, {x: 8, y: 4}, {x: 6, y: 10}, {x: 6, y: 7}, {x: 3, y: 5}, {x: 9, y: 1}, {x: 1, y: 7}, {x: 2, y: 9}, {x: 7, y: 4}, {x: 9, y: 5}, {x: 7, y: 6}, {x: 9, y: 6}, {x: 3, y: 1}, {x: 2, y: 9}, {x: 7, y: 1}, {x: 3, y: 7}, {x: 6, y: 5}, {x: 8, y: 8}, {x: 7, y: 5}, {x: 6, y: 4}, {x: 6, y: 5}, {x: 7, y: 2}, {x: 7, y: 10}, {x: 7, y: 1}, {x: 3, y: 1}, {x: 9, y: 10}, {x: 6, y: 7}, {x: 5, y: 9}, {x: 2, y: 6}, {x: 10, y: 1}, {x: 9, y: 1}, {x: 7, y: 3}, {x: 3, y: 1}, {x: 7, y: 9}, {x: 2, y: 5}, {x: 1, y: 9}, {x: 8, y: 8}], 0, 0, 7.5), 34)\nTest.assertEquals(pointsInCircle([{x: 16, y: 98}, {x: 48, y: 5}, {x: 66, y: 18}, {x: 87, y: 8}, {x: 37, y: 94}, {x: 69, y: 49}, {x: 85, y: 37}, {x: 61, y: 63}, {x: 19, y: 4}, {x: 81, y: 3}, {x: 90, y: 30}, {x: 35, y: 65}, {x: 30, y: 92}, {x: 72, y: 38}, {x: 67, y: 4}, {x: 41, y: 70}, {x: 93, y: 92}, {x: 43, y: 17}, {x: 22, y: 12}, {x: 5, y: 58}, {x: 27, y: 73}, {x: 42, y: 70}, {x: 40, y: 61}, {x: 75, y: 99}, {x: 41, y: 79}, {x: 98, y: 99}, {x: 20, y: 64}, {x: 2, y: 74}, {x: 69, y: 44}, {x: 39, y: 58}, {x: 6, y: 11}, {x: 51, y: 34}, {x: 32, y: 19}, {x: 50, y: 12}, {x: 16, y: 91}, {x: 1, y: 99}, {x: 13, y: 60}, {x: 16, y: 64}, {x: 34, y: 25}, {x: 41, y: 68}, {x: 61, y: 57}, {x: 61, y: 17}, {x: 47, y: 17}, {x: 10, y: 63}, {x: 40, y: 76}, {x: 82, y: 93}, {x: 54, y: 14}, {x: 6, y: 28}, {x: 21, y: 69}, {x: 76, y: 79}, {x: 37, y: 5}, {x: 85, y: 73}, {x: 24, y: 72}, {x: 36, y: 75}, {x: 72, y: 4}, {x: 71, y: 80}, {x: 37, y: 13}, {x: 62, y: 83}, {x: 45, y: 43}, {x: 95, y: 67}, {x: 6, y: 12}, {x: 79, y: 27}, {x: 1, y: 12}, {x: 19, y: 51}, {x: 94, y: 27}, {x: 29, y: 34}, {x: 21, y: 43}, {x: 8, y: 81}, {x: 98, y: 65}, {x: 63, y: 82}, {x: 45, y: 38}, {x: 70, y: 19}, {x: 61, y: 30}, {x: 47, y: 86}, {x: 52, y: 41}, {x: 89, y: 16}, {x: 28, y: 75}, {x: 21, y: 98}, {x: 54, y: 68}, {x: 80, y: 46}, {x: 82, y: 71}, {x: 36, y: 91}, {x: 76, y: 20}, {x: 33, y: 81}, {x: 56, y: 57}, {x: 6, y: 47}, {x: 85, y: 62}, {x: 83, y: 67}, {x: 98, y: 66}, {x: 92, y: 54}, {x: 70, y: 88}, {x: 42, y: 38}, {x: 66, y: 100}, {x: 92, y: 22}, {x: 77, y: 36}, {x: 90, y: 57}, {x: 48, y: 39}, {x: 49, y: 97}, {x: 12, y: 66}, {x: 30, y: 85}], 0, 0, 50), 16)",
    "new_tests": "const pointsInCircle = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(pointsInCircle([{x: 0, y: 0}, {x: 1, y: 1}, {x: 0, y: 5}, {x: 10, y: 10}], 0, 0, 5)).toEqual(2);\n        expect(pointsInCircle([{x: 9, y: 6}, {x: 9, y: 3}, {x: 4, y: 8}, {x: 3, y: 10}, {x: 1, y: 6}], 0, 0, 7.5)).toEqual(1);\n        expect(pointsInCircle([{x: 8, y: 8}, {x: 8, y: 6}, {x: 4, y: 7}], 0, 0, 1)).toEqual(0);\n        expect(pointsInCircle([{x: 0, y: 0}, {x: 1, y: 1}, {x: 0, y: 5}, {x: 10, y: 10}], 50, 50, 40)).toEqual(0);\n        expect(pointsInCircle([{x: 10, y: 10}, {x: 33, y: 54}, {x: 7, y: 98}, {x: 516, y: 85}], 23, 94, 100)).toEqual(3);\n        expect(pointsInCircle([{x: 6, y: 3}, {x: 1, y: 4}, {x: 1, y: 9}, {x: 4, y: 9}, {x: 9, y: 3}, {x: 10, y: 8}, {x: 2, y: 2}, {x: 4, y: 3}, {x: 4, y: 4}, {x: 1, y: 2}, {x: 8, y: 9}, {x: 6, y: 10}, {x: 10, y: 6}, {x: 8, y: 8}, {x: 2, y: 1}, {x: 7, y: 4}, {x: 6, y: 1}, {x: 8, y: 1}, {x: 8, y: 5}, {x: 2, y: 1}, {x: 10, y: 5}, {x: 6, y: 5}, {x: 8, y: 3}, {x: 7, y: 8}, {x: 1, y: 6}, {x: 8, y: 7}, {x: 4, y: 10}, {x: 6, y: 5}, {x: 4, y: 5}, {x: 1, y: 10}, {x: 4, y: 4}, {x: 6, y: 8}, {x: 2, y: 8}, {x: 2, y: 8}, {x: 1, y: 10}, {x: 3, y: 2}, {x: 5, y: 7}, {x: 10, y: 2}, {x: 9, y: 8}, {x: 4, y: 3}, {x: 9, y: 5}, {x: 6, y: 3}, {x: 1, y: 3}, {x: 5, y: 10}, {x: 2, y: 7}, {x: 10, y: 6}, {x: 8, y: 4}, {x: 9, y: 9}, {x: 1, y: 8}, {x: 1, y: 3}, {x: 2, y: 2}, {x: 10, y: 1}, {x: 5, y: 6}, {x: 10, y: 5}, {x: 8, y: 5}, {x: 9, y: 10}, {x: 1, y: 4}, {x: 5, y: 6}, {x: 6, y: 5}, {x: 2, y: 2}, {x: 10, y: 10}, {x: 6, y: 7}, {x: 2, y: 1}, {x: 4, y: 4}, {x: 8, y: 4}, {x: 6, y: 10}, {x: 6, y: 7}, {x: 3, y: 5}, {x: 9, y: 1}, {x: 1, y: 7}, {x: 2, y: 9}, {x: 7, y: 4}, {x: 9, y: 5}, {x: 7, y: 6}, {x: 9, y: 6}, {x: 3, y: 1}, {x: 2, y: 9}, {x: 7, y: 1}, {x: 3, y: 7}, {x: 6, y: 5}, {x: 8, y: 8}, {x: 7, y: 5}, {x: 6, y: 4}, {x: 6, y: 5}, {x: 7, y: 2}, {x: 7, y: 10}, {x: 7, y: 1}, {x: 3, y: 1}, {x: 9, y: 10}, {x: 6, y: 7}, {x: 5, y: 9}, {x: 2, y: 6}, {x: 10, y: 1}, {x: 9, y: 1}, {x: 7, y: 3}, {x: 3, y: 1}, {x: 7, y: 9}, {x: 2, y: 5}, {x: 1, y: 9}, {x: 8, y: 8}], 0, 0, 7.5)).toEqual(34);\n        expect(pointsInCircle([{x: 16, y: 98}, {x: 48, y: 5}, {x: 66, y: 18}, {x: 87, y: 8}, {x: 37, y: 94}, {x: 69, y: 49}, {x: 85, y: 37}, {x: 61, y: 63}, {x: 19, y: 4}, {x: 81, y: 3}, {x: 90, y: 30}, {x: 35, y: 65}, {x: 30, y: 92}, {x: 72, y: 38}, {x: 67, y: 4}, {x: 41, y: 70}, {x: 93, y: 92}, {x: 43, y: 17}, {x: 22, y: 12}, {x: 5, y: 58}, {x: 27, y: 73}, {x: 42, y: 70}, {x: 40, y: 61}, {x: 75, y: 99}, {x: 41, y: 79}, {x: 98, y: 99}, {x: 20, y: 64}, {x: 2, y: 74}, {x: 69, y: 44}, {x: 39, y: 58}, {x: 6, y: 11}, {x: 51, y: 34}, {x: 32, y: 19}, {x: 50, y: 12}, {x: 16, y: 91}, {x: 1, y: 99}, {x: 13, y: 60}, {x: 16, y: 64}, {x: 34, y: 25}, {x: 41, y: 68}, {x: 61, y: 57}, {x: 61, y: 17}, {x: 47, y: 17}, {x: 10, y: 63}, {x: 40, y: 76}, {x: 82, y: 93}, {x: 54, y: 14}, {x: 6, y: 28}, {x: 21, y: 69}, {x: 76, y: 79}, {x: 37, y: 5}, {x: 85, y: 73}, {x: 24, y: 72}, {x: 36, y: 75}, {x: 72, y: 4}, {x: 71, y: 80}, {x: 37, y: 13}, {x: 62, y: 83}, {x: 45, y: 43}, {x: 95, y: 67}, {x: 6, y: 12}, {x: 79, y: 27}, {x: 1, y: 12}, {x: 19, y: 51}, {x: 94, y: 27}, {x: 29, y: 34}, {x: 21, y: 43}, {x: 8, y: 81}, {x: 98, y: 65}, {x: 63, y: 82}, {x: 45, y: 38}, {x: 70, y: 19}, {x: 61, y: 30}, {x: 47, y: 86}, {x: 52, y: 41}, {x: 89, y: 16}, {x: 28, y: 75}, {x: 21, y: 98}, {x: 54, y: 68}, {x: 80, y: 46}, {x: 82, y: 71}, {x: 36, y: 91}, {x: 76, y: 20}, {x: 33, y: 81}, {x: 56, y: 57}, {x: 6, y: 47}, {x: 85, y: 62}, {x: 83, y: 67}, {x: 98, y: 66}, {x: 92, y: 54}, {x: 70, y: 88}, {x: 42, y: 38}, {x: 66, y: 100}, {x: 92, y: 22}, {x: 77, y: 36}, {x: 90, y: 57}, {x: 48, y: 39}, {x: 49, y: 97}, {x: 12, y: 66}, {x: 30, y: 85}], 0, 0, 50)).toEqual(16);\n    });\n});\n"
  },
  {
    "original_code": "function sortByLast(str) {\n  \n}",
    "new_code": "function sortByLast(str) {\n  // Your code here.\n}\n\nmodule.exports = sortByLast;\n",
    "original_tests": "Test.assertEquals(sortByLast(\"herb camera dynamic\"), \"camera herb dynamic\");\nTest.assertEquals(sortByLast(\"stab traction artist approach\"), \"stab approach traction artist\");\nTest.assertEquals(sortByLast(\"sample partner autonomy swallow trend\"), \"trend sample partner swallow autonomy\");\nTest.assertEquals(sortByLast(\"dividend platform pupil conclusion silence breakfast\"), \"dividend silence pupil platform conclusion breakfast\");\nTest.assertEquals(sortByLast(\"harm\"), \"harm\");\nTest.assertEquals(sortByLast(\"card warrant opinion medium illustrate\"), \"card illustrate medium opinion warrant\");\nTest.assertEquals(sortByLast(\"cause fine virtue\"), \"cause fine virtue\");\nTest.assertEquals(sortByLast(\"introduce fashionable cause sacrifice reality\"), \"introduce fashionable cause sacrifice reality\");\nTest.assertEquals(sortByLast(\"brick moral institution loud talk resign worth\"), \"loud worth brick talk moral institution resign\");",
    "new_tests": "const sortByLast = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(sortByLast('herb camera dynamic')).toEqual('camera herb dynamic');\n        expect(sortByLast('stab traction artist approach')).toEqual('stab approach traction artist');\n        expect(sortByLast('sample partner autonomy swallow trend')).toEqual('trend sample partner swallow autonomy');\n        expect(sortByLast('dividend platform pupil conclusion silence breakfast')).toEqual('dividend silence pupil platform conclusion breakfast');\n        expect(sortByLast('harm')).toEqual('harm');\n        expect(sortByLast('card warrant opinion medium illustrate')).toEqual('card illustrate medium opinion warrant');\n        expect(sortByLast('cause fine virtue')).toEqual('cause fine virtue');\n        expect(sortByLast('introduce fashionable cause sacrifice reality')).toEqual('introduce fashionable cause sacrifice reality');\n        expect(sortByLast('brick moral institution loud talk resign worth')).toEqual('loud worth brick talk moral institution resign');\n    });\n});\n"
  },
  {
    "original_code": "function trouble(num1, num2) {\n  \n}",
    "new_code": "function trouble(num1, num2) {\n  // Your code here.\n}\n\nmodule.exports = trouble;\n",
    "original_tests": "Test.assertEquals(trouble(451999277,41177722899), true);\nTest.assertEquals(trouble(444, 44), true);\nTest.assertEquals(trouble(1222345, 12345), false);\nTest.assertEquals(trouble(12345, 12345), false);\nTest.assertEquals(trouble(888, 888), true);\nTest.assertEquals(trouble(666789, 12345667), true);\nTest.assertEquals(trouble(10560002, 100), true);\nTest.assertEquals(trouble(1, 1), false);\nTest.assertEquals(trouble(9111922229333339, 9559669779), false);",
    "new_tests": "const trouble = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(trouble(451999277, 41177722899)).toEqual(true);\n        expect(trouble(444, 44)).toEqual(true);\n        expect(trouble(1222345, 12345)).toEqual(false);\n        expect(trouble(12345, 12345)).toEqual(false);\n        expect(trouble(888, 888)).toEqual(true);\n        expect(trouble(666789, 12345667)).toEqual(true);\n        expect(trouble(10560002, 100)).toEqual(true);\n        expect(trouble(1, 1)).toEqual(false);\n        expect(trouble(9111922229333340, 9559669779)).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function sevenAte9(str) {\n  \n}",
    "new_code": "function sevenAte9(str) {\n  // Your code here.\n}\n\nmodule.exports = sevenAte9;\n",
    "original_tests": "Test.assertEquals(sevenAte9(\"165561786121789797\"), \"16556178612178977\");\nTest.assertEquals(sevenAte9(\"797\"), \"77\");\nTest.assertEquals(sevenAte9(\"7\"), \"7\");\nTest.assertEquals(sevenAte9(\"9\"), \"9\");\nTest.assertEquals(sevenAte9(\"16797\"), \"1677\");\nTest.assertEquals(sevenAte9(\"77\"), \"77\");\nTest.assertEquals(sevenAte9(\"x779\"), \"x779\");\nTest.assertEquals(sevenAte9(\"7927\"), \"7927\");\nTest.assertEquals(sevenAte9(\"1779\"), \"1779\");\nTest.assertEquals(sevenAte9(\"17797a\"), \"1777a\");\nTest.assertEquals(sevenAte9(\"1679 7\"), \"167 7\");",
    "new_tests": "const sevenAte9 = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(sevenAte9('165561786121789797')).toEqual('16556178612178977');\n        expect(sevenAte9('797')).toEqual('77');\n        expect(sevenAte9('7')).toEqual('7');\n        expect(sevenAte9('9')).toEqual('9');\n        expect(sevenAte9('16797')).toEqual('1677');\n        expect(sevenAte9('77')).toEqual('77');\n        expect(sevenAte9('x779')).toEqual('x779');\n        expect(sevenAte9('7927')).toEqual('7927');\n        expect(sevenAte9('1779')).toEqual('1779');\n        expect(sevenAte9('17797a')).toEqual('1777a');\n        expect(sevenAte9('1679 7')).toEqual('167 7');\n    });\n});\n"
  },
  {
    "original_code": "function duplicateCount(str) {\n  \n}",
    "new_code": "function duplicateCount(str) {\n  // Your code here.\n}\n\nmodule.exports = duplicateCount;\n",
    "original_tests": "Test.assertEquals(duplicateCount(\"abcde\"), 0)\nTest.assertEquals(duplicateCount(\"aabbcde\"), 2)\nTest.assertEquals(duplicateCount(\"aabbcdeB\"), 2)\nTest.assertEquals(duplicateCount(\"indivisibility\"), 1)\nTest.assertEquals(duplicateCount(\"Indivisibilities\"), 2)\nTest.assertEquals(duplicateCount(\"aa1112\"), 2)\nTest.assertEquals(duplicateCount(\"bb2c\"), 1)",
    "new_tests": "const duplicateCount = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(duplicateCount('abcde')).toEqual(0);\n        expect(duplicateCount('aabbcde')).toEqual(2);\n        expect(duplicateCount('aabbcdeB')).toEqual(2);\n        expect(duplicateCount('indivisibility')).toEqual(1);\n        expect(duplicateCount('Indivisibilities')).toEqual(2);\n        expect(duplicateCount('aa1112')).toEqual(2);\n        expect(duplicateCount('bb2c')).toEqual(1);\n    });\n});\n"
  },
  {
    "original_code": "function firstNonRepeatedCharacter(str) {\n  \n}",
    "new_code": "function firstNonRepeatedCharacter(str) {\n  // Your code here.\n}\n\nmodule.exports = firstNonRepeatedCharacter;\n",
    "original_tests": "Test.assertEquals(firstNonRepeatedCharacter(\"the quick brown fox jumps then quickly blows air\"), \"f\");\nTest.assertEquals(firstNonRepeatedCharacter(\"the misty examination pleases into the drab county\"), \"x\");\nTest.assertEquals(firstNonRepeatedCharacter(\"hheelloo\"), false, \"Return false when every character repeats.\");\nTest.assertEquals(firstNonRepeatedCharacter(\"it was then the darling top met the whispering wing\"), \"d\");\nTest.assertEquals(firstNonRepeatedCharacter(\"\"), false, \"An empty string should return false.\");\nTest.assertEquals(firstNonRepeatedCharacter(\"it was then the frothy word met the round night\"), \"a\");\nTest.assertEquals(firstNonRepeatedCharacter(\"is the remind zone better than the section\"), \"m\");\nTest.assertEquals(firstNonRepeatedCharacter(\"b\"), \"b\");\nTest.assertEquals(firstNonRepeatedCharacter(\"what if the brainy boss ate the afternoon\"), \"w\");\nTest.assertEquals(firstNonRepeatedCharacter(\"the sympathetic mixture rejects into the leafy objective\"), \"p\");",
    "new_tests": "const firstNonRepeatedCharacter = require('./code');\n\ndescribe('Tests', () => {\n    test('Return false when every character repeats.', () => {\n        expect(firstNonRepeatedCharacter('hheelloo')).toEqual(false);\n    });\n\ntest('An empty string should return false.', () => {\n        expect(firstNonRepeatedCharacter('')).toEqual(false);\n    });\n    \n    test('the tests', () => {\n        expect(firstNonRepeatedCharacter('the quick brown fox jumps then quickly blows air')).toEqual('f');\n        expect(firstNonRepeatedCharacter('the misty examination pleases into the drab county')).toEqual('x');\n        expect(firstNonRepeatedCharacter('it was then the darling top met the whispering wing')).toEqual('d');\n        expect(firstNonRepeatedCharacter('it was then the frothy word met the round night')).toEqual('a');\n        expect(firstNonRepeatedCharacter('is the remind zone better than the section')).toEqual('m');\n        expect(firstNonRepeatedCharacter('b')).toEqual('b');\n        expect(firstNonRepeatedCharacter('what if the brainy boss ate the afternoon')).toEqual('w');\n        expect(firstNonRepeatedCharacter('the sympathetic mixture rejects into the leafy objective')).toEqual('p');\n    });\n});\n"
  },
  {
    "original_code": "function unique(arr) {\n  \n}",
    "new_code": "function unique(arr) {\n  // Your code here.\n}\n\nmodule.exports = unique;\n",
    "original_tests": "Test.assertEquals(unique([3, 3, 3, 7, 3, 3]), 7);\nTest.assertEquals(unique([0, 0, 0.77, 0, 0]), 0.77);\nTest.assertEquals(unique([0, 1, 1, 1, 1, 1, 1, 1]), 0);\nTest.assertEquals(unique([-4, -4, -4, 4]), 4);\nTest.assertEquals(unique([8, 8, 8, 8, 8, 8, 8, 0.5]), 0.5);\nTest.assertEquals(unique([2, 1, 2, 2, 2, 2, 2, 2]), 1);",
    "new_tests": "const unique = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(unique([3, 3, 3, 7, 3, 3])).toEqual(7);\n        expect(unique([0, 0, 0.77, 0, 0])).toEqual(0.77);\n        expect(unique([0, 1, 1, 1, 1, 1, 1, 1])).toEqual(0);\n        expect(unique([-4, -4, -4, 4])).toEqual(4);\n        expect(unique([8, 8, 8, 8, 8, 8, 8, 0.5])).toEqual(0.5);\n        expect(unique([2, 1, 2, 2, 2, 2, 2, 2])).toEqual(1);\n    });\n});\n"
  },
  {
    "original_code": "function wave(str) {\n  \n}",
    "new_code": "function wave(str) {\n  // Your code here.\n}\n\nmodule.exports = wave;\n",
    "original_tests": "Test.assertSimilar(wave(\"edabit\"), [\"Edabit\", \"eDabit\", \"edAbit\", \"edaBit\", \"edabIt\", \"edabiT\"]);\nTest.assertSimilar(wave(\"dogs cats pigs\"), [\"Dogs cats pigs\", \"dOgs cats pigs\", \"doGs cats pigs\", \"dogS cats pigs\", \"dogs Cats pigs\", \"dogs cAts pigs\", \"dogs caTs pigs\", \"dogs catS pigs\", \"dogs cats Pigs\", \"dogs cats pIgs\", \"dogs cats piGs\", \"dogs cats pigS\"], \"Ignore spaces.\");\nTest.assertSimilar(wave(\" \"), [], \"Ignore spaces.\");\nTest.assertSimilar(wave(\"\"), [], \"An empty string should return an empty array.\");\nTest.assertSimilar(wave(\"g\"), [\"G\"]);\nTest.assertSimilar(wave(\" blue\"), [\" Blue\", \" bLue\", \" blUe\", \" bluE\"], \"Space at the beginning.\");\nTest.assertSimilar(wave(\"green \"), [\"Green \", \"gReen \", \"grEen \", \"greEn \", \"greeN \"], \"Space at the end.\");",
    "new_tests": "const wave = require('./code');\n\ndescribe('Tests', () => {\n    test('Ignore spaces.', () => {\n        expect(wave('dogs cats pigs')).toEqual(['Dogs cats pigs', 'dOgs cats pigs', 'doGs cats pigs', 'dogS cats pigs', 'dogs Cats pigs', 'dogs cAts pigs', 'dogs caTs pigs', 'dogs catS pigs', 'dogs cats Pigs', 'dogs cats pIgs', 'dogs cats piGs', 'dogs cats pigS']);\n    });\n\ntest('Ignore spaces.', () => {\n        expect(wave(' ')).toEqual([]);\n    });\n\ntest('An empty string should return an empty array.', () => {\n        expect(wave('')).toEqual([]);\n    });\n\ntest('Space at the beginning.', () => {\n        expect(wave(' blue')).toEqual([' Blue', ' bLue', ' blUe', ' bluE']);\n    });\n\ntest('Space at the end.', () => {\n        expect(wave('green ')).toEqual(['Green ', 'gReen ', 'grEen ', 'greEn ', 'greeN ']);\n    });\n    \n    test('the tests', () => {\n        expect(wave('edabit')).toEqual(['Edabit', 'eDabit', 'edAbit', 'edaBit', 'edabIt', 'edabiT']);\n        expect(wave('g')).toEqual(['G']);\n    });\n});\n"
  },
  {
    "original_code": "function textToNumberBinary(str) {\n  \n}",
    "new_code": "function textToNumberBinary(str) {\n  // Your code here.\n}\n\nmodule.exports = textToNumberBinary;\n",
    "original_tests": "Test.assertEquals(textToNumberBinary('one one one one zero zero zero zero'), \"11110000\")\nTest.assertEquals(textToNumberBinary('one Zero zero one zero zero one one one one one zero oNe one one zero one zerO'), \"1001001111101110\")\nTest.assertEquals(textToNumberBinary('one zero one'), \"\")\nTest.assertEquals(textToNumberBinary('one zero zero one zero ten one one one one two'), \"10010111\")\nTest.assertEquals(textToNumberBinary('One zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero'), \"1001011101100001011101100001011101100001011101100001011101100001\")\nTest.assertEquals(textToNumberBinary('TWO one zero one one zero one zero'), \"\")\nTest.assertEquals(textToNumberBinary('TWO one zero one one zero one zero one'), \"10110101\")",
    "new_tests": "const textToNumberBinary = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(textToNumberBinary('one one one one zero zero zero zero')).toEqual('11110000');\n        expect(textToNumberBinary('one Zero zero one zero zero one one one one one zero oNe one one zero one zerO')).toEqual('1001001111101110');\n        expect(textToNumberBinary('one zero one')).toEqual('');\n        expect(textToNumberBinary('one zero zero one zero ten one one one one two')).toEqual('10010111');\n        expect(textToNumberBinary('One zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero')).toEqual('1001011101100001011101100001011101100001011101100001011101100001');\n        expect(textToNumberBinary('TWO one zero one one zero one zero')).toEqual('');\n        expect(textToNumberBinary('TWO one zero one one zero one zero one')).toEqual('10110101');\n    });\n});\n"
  },
  {
    "original_code": "function validatePassword(password) {\n  \n}",
    "new_code": "function validatePassword(password) {\n  // Your code here.\n}\n\nmodule.exports = validatePassword;\n",
    "original_tests": "// Invalid passwords\nTest.assertEquals(validatePassword('P1zz@'), false, 'too short');\nTest.assertEquals(validatePassword('P1zz@P1zz@P1zz@P1zz@P1zz@'), false, 'too long');\nTest.assertEquals(validatePassword('mypassword11'), false, 'missing uppercase letter');\nTest.assertEquals(validatePassword('MYPASSWORD11'), false, 'missing lowercase letter');\nTest.assertEquals(validatePassword('iLoveYou'), false, 'missing number');\nTest.assertEquals(validatePassword('P\u00e87$areLove'), false, 'special character \"\u00e8\" disallowed');\nTest.assertEquals(validatePassword(\"Repeeea7!\"), false, 'repeated character \"eee\" disallowed');\n\n// Valid passwords\nTest.assertEquals(validatePassword('H4(k+x0'), true);\nTest.assertEquals(validatePassword('Fhg93@'), true);\nTest.assertEquals(validatePassword('aA0!@#$%^&*()+=_-{}[]:;\u201d'), true);\nTest.assertEquals(validatePassword('zZ9\u2019?<>,.'), true);",
    "new_tests": "const validatePassword = require('./code');\n\ndescribe('Tests', () => {\n    test('too short', () => {\n        expect(validatePassword('P1zz@')).toEqual(false);\n    });\n\ntest('too long', () => {\n        expect(validatePassword('P1zz@P1zz@P1zz@P1zz@P1zz@')).toEqual(false);\n    });\n\ntest('missing uppercase letter', () => {\n        expect(validatePassword('mypassword11')).toEqual(false);\n    });\n\ntest('missing lowercase letter', () => {\n        expect(validatePassword('MYPASSWORD11')).toEqual(false);\n    });\n\ntest('missing number', () => {\n        expect(validatePassword('iLoveYou')).toEqual(false);\n    });\n\ntest('special character \"\u00e8\" disallowed', () => {\n        expect(validatePassword('P\u00e87$areLove')).toEqual(false);\n    });\n\ntest('repeated character \"eee\" disallowed', () => {\n        expect(validatePassword('Repeeea7!')).toEqual(false);\n    });\n    \n    test('the tests', () => {\n        expect(validatePassword('H4(k+x0')).toEqual(true);\n        expect(validatePassword('Fhg93@')).toEqual(true);\n        expect(validatePassword('aA0!@#$%^&*()+=_-{}[]:;\u201d')).toEqual(true);\n        expect(validatePassword('zZ9\u2019?<>,.')).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function primeFactorize(num) {\n  \n}",
    "new_code": "function primeFactorize(num) {\n  // Your code here.\n}\n\nmodule.exports = primeFactorize;\n",
    "original_tests": "Test.assertSimilar(primeFactorize(32), [2, 2, 2, 2, 2]);\nTest.assertSimilar(primeFactorize(17), [17]);\nTest.assertSimilar(primeFactorize(35), [5, 7]);\nTest.assertSimilar(primeFactorize(2), [2]);\nTest.assertNotEquals(primeFactorize(2), [1, 2]);\nTest.assertNotEquals(primeFactorize(1), [1]);\nTest.assertNotEquals(primeFactorize(35), [7, 5]);\nTest.assertSimilar(primeFactorize(2591), [2591]);\nTest.assertSimilar(primeFactorize(2532), [2, 2, 3, 211]);",
    "new_tests": "const primeFactorize = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(primeFactorize(32)).toEqual([2, 2, 2, 2, 2]);\n        expect(primeFactorize(17)).toEqual([17]);\n        expect(primeFactorize(35)).toEqual([5, 7]);\n        expect(primeFactorize(2)).toEqual([2]);\n        expect(primeFactorize(2)).not.toEqual([1, 2]);\n        expect(primeFactorize(1)).not.toEqual([1]);\n        expect(primeFactorize(35)).not.toEqual([7, 5]);\n        expect(primeFactorize(2591)).toEqual([2591]);\n        expect(primeFactorize(2532)).toEqual([2, 2, 3, 211]);\n    });\n});\n"
  },
  {
    "original_code": "function truncate(string, length) {\n  \n}",
    "new_code": "function truncate(string, length) {\n  // Your code here.\n}\n\nmodule.exports = truncate;\n",
    "original_tests": "// \"Clean cut\"\nTest.assertEquals(truncate('Lorem ipsum dolor sit amet.', 11), 'Lorem ipsum');\n\n// \"Dirty cut\", we have to discard the last word\nTest.assertEquals(truncate('Lorem ipsum dolor sit amet.', 16), 'Lorem ipsum');\n\n// If length is greater than the string's length\nTest.assertEquals(truncate('Lorem ipsum', 20), 'Lorem ipsum');\n\n// Some more tests\nTest.assertEquals(truncate('Lorem ipsum', 4), '');\nTest.assertEquals(truncate('Lorem ipsum', 0), '');\nTest.assertEquals(truncate('', 30), '');",
    "new_tests": "const truncate = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(truncate('Lorem ipsum dolor sit amet.', 11)).toEqual('Lorem ipsum');\n        expect(truncate('Lorem ipsum dolor sit amet.', 16)).toEqual('Lorem ipsum');\n        expect(truncate('Lorem ipsum', 20)).toEqual('Lorem ipsum');\n        expect(truncate('Lorem ipsum', 4)).toEqual('');\n        expect(truncate('Lorem ipsum', 0)).toEqual('');\n        expect(truncate('', 30)).toEqual('');\n    });\n});\n"
  },
  {
    "original_code": "function decodeMorse(str){\n  \n}",
    "new_code": "function decodeMorse(str) {\n  // Your code here.\n}\n\nmodule.exports = decodeMorse;\n",
    "original_tests": "Test.assertEquals(decodeMorse(\". -.. .- -... -... .. -   -.-. .... .- .-.. .-.. . -. --. .\"), \"EDABBIT CHALLENGE\");\nTest.assertEquals(decodeMorse(\".... . .-.. .--.   -- .   -.-.--\"), \"HELP ME !\");\nTest.assertEquals(decodeMorse(\"-.-. .... .- .-.. .-.. . -. --. .\"), \"CHALLENGE\");\nTest.assertEquals(decodeMorse(\".----   .- .--. .--. .-.. .   .- -. -..   .....   -.-. .... . .-. .-. -.-- --..--   --...   ... .- -. -.. .-- .. -.-. .... . ... --..--   ..---   - .- -... .-.. . ... --..--   ----.   .. -. ...- .. - . -..   --. ..- -.-- ...   -.-.--   - .... .- - .----. ...   ... ---   -.-. --- --- .-.. .-.-.- .-.-.- .-.-.-\"), \"1 APPLE AND 5 CHERRY, 7 SANDWICHES, 2 TABLES, 9 INVITED GUYS ! THAT'S SO COOL...\");\nTest.assertEquals(decodeMorse(\"-.. .. -..   -.-- --- ..-   --. --- -   -- -.--   -- .- .. .-..   ..--..\"), \"DID YOU GOT MY MAIL ?\");\nTest.assertEquals(decodeMorse(\"- .-- ---   - .... .. -. --. ...   - ---   -.- -. --- .--   ---...   ..   ..-. --- .-. --. . -   - .... . --   ---... -.-.\"), \"TWO THINGS TO KNOW : I FORGET THEM :C\");",
    "new_tests": "const decodeMorse = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(decodeMorse('. -.. .- -... -... .. -   -.-. .... .- .-.. .-.. . -. --. .')).toEqual('EDABBIT CHALLENGE');\n        expect(decodeMorse('.... . .-.. .--.   -- .   -.-.--')).toEqual('HELP ME !');\n        expect(decodeMorse('-.-. .... .- .-.. .-.. . -. --. .')).toEqual('CHALLENGE');\n        expect(decodeMorse('.----   .- .--. .--. .-.. .   .- -. -..   .....   -.-. .... . .-. .-. -.-- --..--   --...   ... .- -. -.. .-- .. -.-. .... . ... --..--   ..---   - .- -... .-.. . ... --..--   ----.   .. -. ...- .. - . -..   --. ..- -.-- ...   -.-.--   - .... .- - .----. ...   ... ---   -.-. --- --- .-.. .-.-.- .-.-.- .-.-.-')).toEqual('1 APPLE AND 5 CHERRY, 7 SANDWICHES, 2 TABLES, 9 INVITED GUYS ! THAT\\'S SO COOL...');\n        expect(decodeMorse('-.. .. -..   -.-- --- ..-   --. --- -   -- -.--   -- .- .. .-..   ..--..')).toEqual('DID YOU GOT MY MAIL ?');\n        expect(decodeMorse('- .-- ---   - .... .. -. --. ...   - ---   -.- -. --- .--   ---...   ..   ..-. --- .-. --. . -   - .... . --   ---... -.-.')).toEqual('TWO THINGS TO KNOW : I FORGET THEM :C');\n    });\n});\n"
  },
  {
    "original_code": "function allAboutStrings(str) {\n  \n}",
    "new_code": "function allAboutStrings(str) {\n  // Your code here.\n}\n\nmodule.exports = allAboutStrings;\n",
    "original_tests": "Test.assertSimilar(allAboutStrings('LASA'), [4, 'L', 'A', 'AS', '@ index 3']);\nTest.assertSimilar(allAboutStrings('Computer'), [8, 'C', 'r', 'pu', 'not found']);\nTest.assertSimilar(allAboutStrings('Science'), [7, 'S', 'e', 'e', '@ index 5']);\nTest.assertSimilar(allAboutStrings('homework'), [8, 'h', 'k', 'ew', '@ index 5']);\nTest.assertSimilar(allAboutStrings('spring'), [6, 's', 'g', 'ri', 'not found']);\nTest.assertSimilar(allAboutStrings('break'), [5, 'b', 'k', 'e', 'not found']);\nTest.assertSimilar(allAboutStrings('programming'), [11, 'p', 'g', 'a', '@ index 4']);\nTest.assertSimilar(allAboutStrings('bad'), [3, 'b', 'd', 'a', 'not found']);",
    "new_tests": "const allAboutStrings = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(allAboutStrings('LASA')).toEqual([4, 'L', 'A', 'AS', '@ index 3']);\n        expect(allAboutStrings('Computer')).toEqual([8, 'C', 'r', 'pu', 'not found']);\n        expect(allAboutStrings('Science')).toEqual([7, 'S', 'e', 'e', '@ index 5']);\n        expect(allAboutStrings('homework')).toEqual([8, 'h', 'k', 'ew', '@ index 5']);\n        expect(allAboutStrings('spring')).toEqual([6, 's', 'g', 'ri', 'not found']);\n        expect(allAboutStrings('break')).toEqual([5, 'b', 'k', 'e', 'not found']);\n        expect(allAboutStrings('programming')).toEqual([11, 'p', 'g', 'a', '@ index 4']);\n        expect(allAboutStrings('bad')).toEqual([3, 'b', 'd', 'a', 'not found']);\n    });\n});\n"
  },
  {
    "original_code": "function birdCode(arr) {\n  \n}",
    "new_code": "function birdCode(arr) {\n  // Your code here.\n}\n\nmodule.exports = birdCode;\n",
    "original_tests": "Test.assertSimilar(birdCode([\"Common Tern\", \"Black-Capped Chickadee\"]), [\"COTE\",\"BCCH\"])\nTest.assertSimilar(birdCode([\"American Redstart\", \"Northern Cardinal\", \"Pine Grosbeak\", \"Barred Owl\", \"Starling\", \"Cooper's Hawk\", \"Pigeon\"]), [\"AMRE\",\"NOCA\",\"PIGR\",\"BAOW\",\"STAR\",\"COHA\",\"PIGE\"])\nTest.assertSimilar(birdCode([\"Great Crested Flycatcher\", \"Bobolink\", \"American White Pelican\", \"Red-Tailed Hawk\", \"Eastern Screech Owl\", \"Blue Jay\"]), [\"GCFL\",\"BOBO\",\"AWPE\",\"RTHA\",\"ESOW\",\"BLJA\"])\nTest.assertSimilar(birdCode([\"Black-Crowned Night Heron\", \"Northern Mockingbird\", \"Eastern Meadowlark\", \"Dark-Eyed Junco\", \"Red-Bellied Woodpecker\"]), [\"BCNH\",\"NOMO\",\"EAME\",\"DEJU\",\"RBWO\"])\nTest.assertSimilar(birdCode([\"Scarlet Tanager\", \"Great Blue Heron\", \"Eastern Phoebe\", \"American Black Duck\", \"Mallard\", \"Canvasback\", \"Merlin\", \"Ovenbird\"]), [\"SCTA\",\"GBHE\",\"EAPH\",\"ABDU\",\"MALL\",\"CANV\",\"MERL\",\"OVEN\"])\nTest.assertSimilar(birdCode([\"Fox Sparrow\", \"White-Winged Crossbill\", \"Veery\", \"American Coot\", \"Sora\", \"Northern Rough-Winged Swallow\", \"Purple Martin\"]), [\"FOSP\",\"WWCR\",\"VEER\",\"AMCO\",\"SORA\",\"NRWS\",\"PUMA\"])",
    "new_tests": "const birdCode = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(birdCode(['Common Tern', 'Black-Capped Chickadee'])).toEqual(['COTE', 'BCCH']);\n        expect(birdCode(['American Redstart', 'Northern Cardinal', 'Pine Grosbeak', 'Barred Owl', 'Starling', 'Cooper\\'s Hawk', 'Pigeon'])).toEqual(['AMRE', 'NOCA', 'PIGR', 'BAOW', 'STAR', 'COHA', 'PIGE']);\n        expect(birdCode(['Great Crested Flycatcher', 'Bobolink', 'American White Pelican', 'Red-Tailed Hawk', 'Eastern Screech Owl', 'Blue Jay'])).toEqual(['GCFL', 'BOBO', 'AWPE', 'RTHA', 'ESOW', 'BLJA']);\n        expect(birdCode(['Black-Crowned Night Heron', 'Northern Mockingbird', 'Eastern Meadowlark', 'Dark-Eyed Junco', 'Red-Bellied Woodpecker'])).toEqual(['BCNH', 'NOMO', 'EAME', 'DEJU', 'RBWO']);\n        expect(birdCode(['Scarlet Tanager', 'Great Blue Heron', 'Eastern Phoebe', 'American Black Duck', 'Mallard', 'Canvasback', 'Merlin', 'Ovenbird'])).toEqual(['SCTA', 'GBHE', 'EAPH', 'ABDU', 'MALL', 'CANV', 'MERL', 'OVEN']);\n        expect(birdCode(['Fox Sparrow', 'White-Winged Crossbill', 'Veery', 'American Coot', 'Sora', 'Northern Rough-Winged Swallow', 'Purple Martin'])).toEqual(['FOSP', 'WWCR', 'VEER', 'AMCO', 'SORA', 'NRWS', 'PUMA']);\n    });\n});\n"
  },
  {
    "original_code": "function timeSum(times) {\n  \n}",
    "new_code": "function timeSum(times) {\n  // Your code here.\n}\n\nmodule.exports = timeSum;\n",
    "original_tests": "Test.assertSimilar(\n  timeSum([]),\n  [0, 0, 0],\n  'Should work with an empty array'\n);\nTest.assertSimilar(\n  timeSum(['1:23:45']),\n  [1, 23, 45],\n  'Should work with a single time'\n);\nTest.assertSimilar(\n  timeSum(['1:03:45', '1:23:05']),\n  [2, 26, 50],\n  'Should work with leading zeroes in minutes/seconds'\n);\nTest.assertSimilar(\n  timeSum(['1:23:45', '0:00:00']),\n  [1, 23, 45],\n  'Should not break if a value is 0:00:00'\n);\nTest.assertSimilar(\n  timeSum(['18:54:02', '0:26:28', '11:48:22', '22:26:16', '7:17:05', '8:01:44', '0:35:24', '16:25:11', '9:11:24', '18:30:46', '3:31:51', '16:55:32', '17:59:00', '11:29:30', '3:19:58', '9:12:27', '22:03:34', '1:06:12', '0:44:07', '4:47:46', '10:38:00', '14:26:51', '10:09:07', '5:08:29', '5:29:57', '22:15:03', '20:52:28', '8:42:20', '17:36:32', '9:36:17']),\n  [329, 41, 43],\n  'Should work with large arrays totaling more than 60 hours'\n);\nTest.assertSimilar(\n  timeSum(['5:39:42', '10:02:08', '8:26:33']),\n  [24, 8, 23]\n);\nTest.assertSimilar(\n  timeSum(['10:11:02', '8:57:30', '10:58:56', '4:04:17', '3:01:13']),\n  [37, 12, 58]\n);\nTest.assertSimilar(\n  timeSum(['10:39:35', '11:33:23', '2:34:52', '9:17:09', '4:41:57', '3:34:19', '1:31:26', '4:06:01']),\n  [47, 58, 42]\n);",
    "new_tests": "const timeSum = require('./code');\n\ndescribe('Tests', () => {\n    test('Should work with an empty array', () => {\n        expect(timeSum([])).toEqual([0, 0, 0]);\n    });\n\ntest('Should work with a single time', () => {\n        expect(timeSum(['1:23:45'])).toEqual([1, 23, 45]);\n    });\n\ntest('Should work with leading zeroes in minutes/seconds', () => {\n        expect(timeSum(['1:03:45', '1:23:05'])).toEqual([2, 26, 50]);\n    });\n\ntest('Should not break if a value is 0:00:00', () => {\n        expect(timeSum(['1:23:45', '0:00:00'])).toEqual([1, 23, 45]);\n    });\n\ntest('Should work with large arrays totaling more than 60 hours', () => {\n        expect(timeSum(['18:54:02', '0:26:28', '11:48:22', '22:26:16', '7:17:05', '8:01:44', '0:35:24', '16:25:11', '9:11:24', '18:30:46', '3:31:51', '16:55:32', '17:59:00', '11:29:30', '3:19:58', '9:12:27', '22:03:34', '1:06:12', '0:44:07', '4:47:46', '10:38:00', '14:26:51', '10:09:07', '5:08:29', '5:29:57', '22:15:03', '20:52:28', '8:42:20', '17:36:32', '9:36:17'])).toEqual([329, 41, 43]);\n    });\n    \n    test('the tests', () => {\n        expect(timeSum(['5:39:42', '10:02:08', '8:26:33'])).toEqual([24, 8, 23]);\n        expect(timeSum(['10:11:02', '8:57:30', '10:58:56', '4:04:17', '3:01:13'])).toEqual([37, 12, 58]);\n        expect(timeSum(['10:39:35', '11:33:23', '2:34:52', '9:17:09', '4:41:57', '3:34:19', '1:31:26', '4:06:01'])).toEqual([47, 58, 42]);\n    });\n});\n"
  },
  {
    "original_code": "function isValidIP(str) {\n  \n}",
    "new_code": "function isValidIP(str) {\n  // Your code here.\n}\n\nmodule.exports = isValidIP;\n",
    "original_tests": "Test.assertEquals(isValidIP(\"12.255.56.1\"), true, \"This is a valid IPv4\");\nTest.assertEquals(isValidIP(\"1.2.3.4\"), true, \"This is a valid IPv4\");\nTest.assertEquals(isValidIP(\"1.2.3\"), false, \"IPv4 contain exactly four octets.\");\nTest.assertEquals(isValidIP(\"1.2.3.4.5\"), false, \"IPv4 contain exactly four octets.\");\nTest.assertEquals(isValidIP(\"123.45.67.89\"), true, \"This is a valid IPv4\");\nTest.assertEquals(isValidIP(\"123.456.78.90\"), false, \"Each octet must be a decimal value between 0 and 255.\");\nTest.assertEquals(isValidIP(\"123.045.067.089\"), false, \"Each octet must be a decimal value between 0 and 255.\");\nTest.assertEquals(isValidIP(\"\"), false, \"An empty string is invalid.\");\nTest.assertEquals(isValidIP(\"abc.def.ghi.jkl\"), false, \"This is not in dot decimal format.\");\nTest.assertEquals(isValidIP(\"123.456.789.0\"), false, \"Each octet must be a decimal value between 0 and 255.\");\nTest.assertEquals(isValidIP(\"12.34.56\"), false, \"IPv4 contain exactly four octets.\");\nTest.assertEquals(isValidIP(\"12.34.56 .1\"), false, \"Check for spaces.\");\nTest.assertEquals(isValidIP(\"12.34.56.-1\"), false, \"Check for invalid characters.\");\nTest.assertEquals(isValidIP(\"123.045.067.089\"), false, \"Each octet must be a decimal value between 0 and 255.\");\nTest.assertEquals(isValidIP(\"192.168.1.1\"), true, \"This is a valid IPv4\");\nTest.assertEquals(isValidIP(\"192.168.1.1  \"), false, \"IPs with trailing spaces are invalid.\");\nTest.assertEquals(isValidIP(\"  192.168.1.1\"), false, \"IPs with leading spaces are invalid.\");\nTest.assertEquals(isValidIP(\"0.232.47.227\"), true, \"This is a valid IPv4\");\nTest.assertEquals(isValidIP(\"1e0.1e0.1e0.1e0\"), false, \"Each octet must be a decimal value between 0 and 255.\");",
    "new_tests": "const isValidIP = require('./code');\n\ndescribe('Tests', () => {\n    test('This is a valid IPv4', () => {\n        expect(isValidIP('12.255.56.1')).toEqual(true);\n    });\n\ntest('This is a valid IPv4', () => {\n        expect(isValidIP('1.2.3.4')).toEqual(true);\n    });\n\ntest('IPv4 contain exactly four octets.', () => {\n        expect(isValidIP('1.2.3')).toEqual(false);\n    });\n\ntest('IPv4 contain exactly four octets.', () => {\n        expect(isValidIP('1.2.3.4.5')).toEqual(false);\n    });\n\ntest('This is a valid IPv4', () => {\n        expect(isValidIP('123.45.67.89')).toEqual(true);\n    });\n\ntest('Each octet must be a decimal value between 0 and 255.', () => {\n        expect(isValidIP('123.456.78.90')).toEqual(false);\n    });\n\ntest('Each octet must be a decimal value between 0 and 255.', () => {\n        expect(isValidIP('123.045.067.089')).toEqual(false);\n    });\n\ntest('An empty string is invalid.', () => {\n        expect(isValidIP('')).toEqual(false);\n    });\n\ntest('This is not in dot decimal format.', () => {\n        expect(isValidIP('abc.def.ghi.jkl')).toEqual(false);\n    });\n\ntest('Each octet must be a decimal value between 0 and 255.', () => {\n        expect(isValidIP('123.456.789.0')).toEqual(false);\n    });\n\ntest('IPv4 contain exactly four octets.', () => {\n        expect(isValidIP('12.34.56')).toEqual(false);\n    });\n\ntest('Check for spaces.', () => {\n        expect(isValidIP('12.34.56 .1')).toEqual(false);\n    });\n\ntest('Check for invalid characters.', () => {\n        expect(isValidIP('12.34.56.-1')).toEqual(false);\n    });\n\ntest('Each octet must be a decimal value between 0 and 255.', () => {\n        expect(isValidIP('123.045.067.089')).toEqual(false);\n    });\n\ntest('This is a valid IPv4', () => {\n        expect(isValidIP('192.168.1.1')).toEqual(true);\n    });\n\ntest('IPs with trailing spaces are invalid.', () => {\n        expect(isValidIP('192.168.1.1  ')).toEqual(false);\n    });\n\ntest('IPs with leading spaces are invalid.', () => {\n        expect(isValidIP('  192.168.1.1')).toEqual(false);\n    });\n\ntest('This is a valid IPv4', () => {\n        expect(isValidIP('0.232.47.227')).toEqual(true);\n    });\n\ntest('Each octet must be a decimal value between 0 and 255.', () => {\n        expect(isValidIP('1e0.1e0.1e0.1e0')).toEqual(false);\n    });\n    \n    test('the tests', () => {\n        \n    });\n});\n"
  },
  {
    "original_code": "function specialReverseString(str) {\n  \n}",
    "new_code": "function specialReverseString(str) {\n  // Your code here.\n}\n\nmodule.exports = specialReverseString;\n",
    "original_tests": "Test.assertEquals(specialReverseString('Edabit'), 'Tibade');\nTest.assertEquals(specialReverseString('UPPER lower'), 'REWOL reppu');\nTest.assertEquals(specialReverseString('1 23 456'), '6 54 321');\nTest.assertEquals(specialReverseString('Hello World!'), '!dlro Wolleh');\nTest.assertEquals(specialReverseString(\"Where's your dog Daisy?\"), \"?ysiadg odru oys 'erehw\");\nTest.assertEquals(specialReverseString('addition(3, 2) \u279e 5'), '5\u279e)2,3(noit id d a');\nTest.assertEquals(specialReverseString(\"It's known that CSS means Cascading Style Sheets\"), \"Stee hsely tsgn IDA csacs Naemsscta Htnwo Nks'ti\");",
    "new_tests": "const specialReverseString = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(specialReverseString('Edabit')).toEqual('Tibade');\n        expect(specialReverseString('UPPER lower')).toEqual('REWOL reppu');\n        expect(specialReverseString('1 23 456')).toEqual('6 54 321');\n        expect(specialReverseString('Hello World!')).toEqual('!dlro Wolleh');\n        expect(specialReverseString('Where\\'s your dog Daisy?')).toEqual('?ysiadg odru oys \\'erehw');\n        expect(specialReverseString('addition(3, 2) \u279e 5')).toEqual('5\u279e)2,3(noit id d a');\n        expect(specialReverseString('It\\'s known that CSS means Cascading Style Sheets')).toEqual('Stee hsely tsgn IDA csacs Naemsscta Htnwo Nks\\'ti');\n    });\n});\n"
  },
  {
    "original_code": "function threeDaysAgo(date) {\n  \n}",
    "new_code": "function threeDaysAgo(date) {\n  // Your code here.\n}\n\nmodule.exports = threeDaysAgo;\n",
    "original_tests": "Test.assertSimilar(threeDaysAgo(new Date(2017, 1, 1)), \"2017-01-29\");\nTest.assertSimilar(threeDaysAgo(new Date(1950, 6, 8)), \"1950-07-05\");\nTest.assertSimilar(threeDaysAgo(new Date(1965, 3, 15)), \"1965-04-12\");\nTest.assertSimilar(threeDaysAgo(new Date(2025, 4, 24)), \"2025-05-21\");\nTest.assertSimilar(threeDaysAgo(new Date(1965, 3, 15)), \"1965-04-12\");\nTest.assertSimilar(threeDaysAgo(new Date(2015, 5, 17)), \"2015-06-14\");",
    "new_tests": "const threeDaysAgo = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(threeDaysAgo(new Date(2017, 1, 1))).toEqual('2017-01-29');\n        expect(threeDaysAgo(new Date(1950, 6, 8))).toEqual('1950-07-05');\n        expect(threeDaysAgo(new Date(1965, 3, 15))).toEqual('1965-04-12');\n        expect(threeDaysAgo(new Date(2025, 4, 24))).toEqual('2025-05-21');\n        expect(threeDaysAgo(new Date(1965, 3, 15))).toEqual('1965-04-12');\n        expect(threeDaysAgo(new Date(2015, 5, 17))).toEqual('2015-06-14');\n    });\n});\n"
  },
  {
    "original_code": "function deleteOccurrences(arr, num) {\n  \n}",
    "new_code": "function deleteOccurrences(arr, num) {\n  // Your code here.\n}\n\nmodule.exports = deleteOccurrences;\n",
    "original_tests": "Test.assertSimilar(deleteOccurrences([1, 1, 1, 1], 2), [1, 1]);\nTest.assertSimilar(deleteOccurrences([true, true, true], 3), [true, true, true]);\nTest.assertSimilar(deleteOccurrences([13, true, 13, null], 1), [13, true, null]);\nTest.assertSimilar(deleteOccurrences([], 100), []);\nTest.assertSimilar(deleteOccurrences([\"John\", \"John\", \"Marry\", \"Marry\"], 1), [\"John\", \"Marry\"]);\nTest.assertSimilar(deleteOccurrences([\"Marry\", \"John\", null, \"John\", false, \"John\", 0, \"John\", \"Marry\", \"Marry\", \"John\"], 3), [\"Marry\", \"John\", null, \"John\", false, \"John\", 0, \"Marry\", \"Marry\"]);\nTest.assertSimilar(deleteOccurrences([20, 37, 20, 21], 1), [20, 37, 21]);\nTest.assertSimilar(deleteOccurrences([1, 1, 3, 3, 7, 2, 2, 2, 2], 3), [1, 1, 3, 3, 7, 2, 2, 2]);\nTest.assertSimilar(deleteOccurrences([1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1],3), [1, 2, 3, 1, 1, 2, 2, 3, 3, 4, 5]);",
    "new_tests": "const deleteOccurrences = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(deleteOccurrences([1, 1, 1, 1], 2)).toEqual([1, 1]);\n        expect(deleteOccurrences([true, true, true], 3)).toEqual([true, true, true]);\n        expect(deleteOccurrences([13, true, 13, undefined], 1)).toEqual([13, true, undefined]);\n        expect(deleteOccurrences([], 100)).toEqual([]);\n        expect(deleteOccurrences(['John', 'John', 'Marry', 'Marry'], 1)).toEqual(['John', 'Marry']);\n        expect(deleteOccurrences(['Marry', 'John', undefined, 'John', false, 'John', 0, 'John', 'Marry', 'Marry', 'John'], 3)).toEqual(['Marry', 'John', undefined, 'John', false, 'John', 0, 'Marry', 'Marry']);\n        expect(deleteOccurrences([20, 37, 20, 21], 1)).toEqual([20, 37, 21]);\n        expect(deleteOccurrences([1, 1, 3, 3, 7, 2, 2, 2, 2], 3)).toEqual([1, 1, 3, 3, 7, 2, 2, 2]);\n        expect(deleteOccurrences([1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1], 3)).toEqual([1, 2, 3, 1, 1, 2, 2, 3, 3, 4, 5]);\n    });\n});\n"
  },
  {
    "original_code": "function textToNum(phone) {\n  \n}",
    "new_code": "function textToNum(phone) {\n  // Your code here.\n}\n\nmodule.exports = textToNum;\n",
    "original_tests": "Test.assertEquals(\"123-647-3937\", textToNum(\"123-647-EYES\"));\nTest.assertEquals(\"(325)444-8378\", textToNum(\"(325)444-TEST\"));\nTest.assertEquals(\"653-879-8447\", textToNum(\"653-TRY-THIS\"));\nTest.assertEquals(\"435-224-7613\", textToNum(\"435-224-7613\"));\nTest.assertEquals(\"(333)668-3245\", textToNum(\"(33D)ONT-FAIL\"));\nTest.assertEquals(\"(025)445-6741\", textToNum(\"(025)445-6741\"));",
    "new_tests": "const textToNum = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect('123-647-3937').toEqual(textToNum('123-647-EYES'));\n        expect('(325)444-8378').toEqual(textToNum('(325)444-TEST'));\n        expect('653-879-8447').toEqual(textToNum('653-TRY-THIS'));\n        expect('435-224-7613').toEqual(textToNum('435-224-7613'));\n        expect('(333)668-3245').toEqual(textToNum('(33D)ONT-FAIL'));\n        expect('(025)445-6741').toEqual(textToNum('(025)445-6741'));\n    });\n});\n"
  },
  {
    "original_code": "function findRepeating(str) {\n  \n}",
    "new_code": "function findRepeating(str) {\n  // Your code here.\n}\n\nmodule.exports = findRepeating;\n",
    "original_tests": "Test.assertSimilar(findRepeating(''), [])\nTest.assertSimilar(findRepeating('a'), [['a', 0, 0, 1]])\nTest.assertSimilar(findRepeating('1337'), [['1', 0, 0, 1], ['3', 1, 2, 2], ['7', 3, 3, 1]])\nTest.assertSimilar(findRepeating('aabbb'), [['a', 0, 1, 2], ['b', 2, 4, 3]])\nTest.assertSimilar(findRepeating('addressee'), [['a', 0, 0, 1], ['d', 1, 2, 2], ['r', 3, 3, 1], ['e', 4, 4, 1], ['s', 5, 6, 2], ['e', 7, 8, 2]])\nTest.assertSimilar(findRepeating('aabbbaabbb'), [['a', 0, 1, 2], ['b', 2, 4, 3], ['a', 5, 6, 2], ['b', 7, 9, 3]])\nTest.assertSimilar(findRepeating('1111222233334444'), [['1', 0, 3, 4], ['2', 4, 7, 4], ['3', 8, 11, 4], ['4', 12, 15, 4]])\nTest.assertSimilar(findRepeating('1000000000000066600000000000001'), [['1', 0, 0, 1], ['0', 1, 13, 13], ['6', 14, 16, 3], ['0', 17, 29, 13], ['1', 30, 30, 1]])\n",
    "new_tests": "const findRepeating = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(findRepeating('')).toEqual([]);\n        expect(findRepeating('a')).toEqual([['a', 0, 0, 1]]);\n        expect(findRepeating('1337')).toEqual([['1', 0, 0, 1], ['3', 1, 2, 2], ['7', 3, 3, 1]]);\n        expect(findRepeating('aabbb')).toEqual([['a', 0, 1, 2], ['b', 2, 4, 3]]);\n        expect(findRepeating('addressee')).toEqual([['a', 0, 0, 1], ['d', 1, 2, 2], ['r', 3, 3, 1], ['e', 4, 4, 1], ['s', 5, 6, 2], ['e', 7, 8, 2]]);\n        expect(findRepeating('aabbbaabbb')).toEqual([['a', 0, 1, 2], ['b', 2, 4, 3], ['a', 5, 6, 2], ['b', 7, 9, 3]]);\n        expect(findRepeating('1111222233334444')).toEqual([['1', 0, 3, 4], ['2', 4, 7, 4], ['3', 8, 11, 4], ['4', 12, 15, 4]]);\n        expect(findRepeating('1000000000000066600000000000001')).toEqual([['1', 0, 0, 1], ['0', 1, 13, 13], ['6', 14, 16, 3], ['0', 17, 29, 13], ['1', 30, 30, 1]]);\n    });\n});\n"
  },
  {
    "original_code": "function replaceNth(str, nth, oldChar, newChar) {\n  \n}",
    "new_code": "function replaceNth(str, nth, oldChar, newChar) {\n  // Your code here.\n}\n\nmodule.exports = replaceNth;\n",
    "original_tests": "Test.assertEquals(replaceNth(\"Sometimes it is better to just walk away from things and go back to them later when you\u2019re in a better frame of mind.\", 3, \"e\", \"_\"), \"Sometimes it is b_tter to just walk away from things and go back to them lat_r when you\u2019re in a b_tter frame of mind.\");\nTest.assertEquals(replaceNth(\"The clock within this blog and the clock on my laptop are 1 hour different from each other.\", 1, \"o\", \"@\"), \"The cl@ck within this bl@g and the cl@ck @n my lapt@p are 1 h@ur different fr@m each @ther.\");\nTest.assertEquals(replaceNth(\"Lets all be unique together until we realise we are all the same.\", 4, \"l\", \"#\"), \"Lets all be unique together until we rea#ise we are all the same.\");\nTest.assertEquals(replaceNth(\"Sometimes, all you NEED to do is completely make an ass of yourself and laugh it off to realise that LIFE isn\u2019t so bad AFTER all.\", 2, \"E\", \"x\"), \"Sometimes, all you NExD to do is completely make an ass of yourself and laugh it off to realise that LIFE isn\u2019t so bad AFTxR all.\", \"Tests are case sensative.\");\nTest.assertEquals(replaceNth(\"Is it free?\", 100, \"e\", \"Y\"), \"Is it free?\");\nTest.assertEquals(replaceNth(\"A glittering gem is not enough.\", 0, \"o\", \"-\"), \"A glittering gem is not enough.\");\nTest.assertEquals(replaceNth(\"Please wait outside of the house.\", -3, \"s\", \"s\"), \"Please wait outside of the house.\");\nTest.assertEquals(replaceNth(\"Joe made the sugar cookies; Susan decorated them.\", 5, \"e\", \"*\"), \"Joe made the sugar cookies; Susan d*corated them.\");\nTest.assertEquals(replaceNth(\"Writing a list of random sentences is harder than I initially thought it would be.\", 2, \"i\", \"3\"), \"Writ3ng a list of random sentences 3s harder than I in3tially thought 3t would be.\");\nTest.assertEquals(replaceNth(\"The book is in front of the table.\", 3, \"f\", \"K\"), \"The book is in front of the table.\");",
    "new_tests": "const replaceNth = require('./code');\n\ndescribe('Tests', () => {\n    test('Tests are case sensative.', () => {\n        expect(replaceNth('Sometimes, all you NEED to do is completely make an ass of yourself and laugh it off to realise that LIFE isn\u2019t so bad AFTER all.', 2, 'E', 'x')).toEqual('Sometimes, all you NExD to do is completely make an ass of yourself and laugh it off to realise that LIFE isn\u2019t so bad AFTxR all.');\n    });\n    \n    test('the tests', () => {\n        expect(replaceNth('Sometimes it is better to just walk away from things and go back to them later when you\u2019re in a better frame of mind.', 3, 'e', '_')).toEqual('Sometimes it is b_tter to just walk away from things and go back to them lat_r when you\u2019re in a b_tter frame of mind.');\n        expect(replaceNth('The clock within this blog and the clock on my laptop are 1 hour different from each other.', 1, 'o', '@')).toEqual('The cl@ck within this bl@g and the cl@ck @n my lapt@p are 1 h@ur different fr@m each @ther.');\n        expect(replaceNth('Lets all be unique together until we realise we are all the same.', 4, 'l', '#')).toEqual('Lets all be unique together until we rea#ise we are all the same.');\n        expect(replaceNth('Is it free?', 100, 'e', 'Y')).toEqual('Is it free?');\n        expect(replaceNth('A glittering gem is not enough.', 0, 'o', '-')).toEqual('A glittering gem is not enough.');\n        expect(replaceNth('Please wait outside of the house.', -3, 's', 's')).toEqual('Please wait outside of the house.');\n        expect(replaceNth('Joe made the sugar cookies; Susan decorated them.', 5, 'e', '*')).toEqual('Joe made the sugar cookies; Susan d*corated them.');\n        expect(replaceNth('Writing a list of random sentences is harder than I initially thought it would be.', 2, 'i', '3')).toEqual('Writ3ng a list of random sentences 3s harder than I in3tially thought 3t would be.');\n        expect(replaceNth('The book is in front of the table.', 3, 'f', 'K')).toEqual('The book is in front of the table.');\n    });\n});\n"
  },
  {
    "original_code": "function sharedLetters(str1, str2) {\n  \n}",
    "new_code": "function sharedLetters(str1, str2) {\n  // Your code here.\n}\n\nmodule.exports = sharedLetters;\n",
    "original_tests": "Test.assertEquals(sharedLetters('house', 'home'), 'eho');\nTest.assertEquals(sharedLetters('Micky', 'mouse'), 'm');\nTest.assertEquals(sharedLetters('house', 'villa'), '');\nTest.assertEquals(sharedLetters('Aa', 'aA'), 'a');\nTest.assertEquals(sharedLetters('https://www.example.com', 'https://www.canada.ca'), './:achpstw');\nTest.assertEquals(sharedLetters('Edabit', 'Matt'), 'at');\nTest.assertEquals(sharedLetters('\ud83d\ude42\ud83d\ude00\ud83d\ude04\ud83d\ude01', '\ud83d\ude42\ud83d\ude1e\ud83d\ude14\ud83d\ude23'), '\ud83d\ude42');\nTest.assertEquals(sharedLetters('Javascript', 'Swift'), 'ist');\nTest.assertEquals(sharedLetters('Functional programming', 'Object oriented programming'), ' acgimnoprt');\nTest.assertEquals(sharedLetters('My dog is a GOOD BOY \ud83d\udc36', 'Do you like ice cream? \ud83c\udf66'), ' adimoy');",
    "new_tests": "const sharedLetters = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(sharedLetters('house', 'home')).toEqual('eho');\n        expect(sharedLetters('Micky', 'mouse')).toEqual('m');\n        expect(sharedLetters('house', 'villa')).toEqual('');\n        expect(sharedLetters('Aa', 'aA')).toEqual('a');\n        expect(sharedLetters('https://www.example.com', 'https://www.canada.ca')).toEqual('./:achpstw');\n        expect(sharedLetters('Edabit', 'Matt')).toEqual('at');\n        expect(sharedLetters('\ud83d\ude42\ud83d\ude00\ud83d\ude04\ud83d\ude01', '\ud83d\ude42\ud83d\ude1e\ud83d\ude14\ud83d\ude23')).toEqual('\ud83d\ude42');\n        expect(sharedLetters('Javascript', 'Swift')).toEqual('ist');\n        expect(sharedLetters('Functional programming', 'Object oriented programming')).toEqual(' acgimnoprt');\n        expect(sharedLetters('My dog is a GOOD BOY \ud83d\udc36', 'Do you like ice cream? \ud83c\udf66')).toEqual(' adimoy');\n    });\n});\n"
  },
  {
    "original_code": "function overlap(str1, str2) {\n  \n}",
    "new_code": "function overlap(str1, str2) {\n  // Your code here.\n}\n\nmodule.exports = overlap;\n",
    "original_tests": "Test.assertEquals(overlap(\"ABC\", \"Ican'tsingmyABC\"), true);\nTest.assertEquals(overlap(\"abc\", \"Ican'tsingmyABC\"), true);\nTest.assertEquals(overlap(\"Ican'tsingmyABC\", \"abc\"), true);\nTest.assertEquals(overlap(\"*bc\", \"Ican'tsingmyABC\"), true);\nTest.assertEquals(overlap(\"abc\", \"Ican'tsingmy***\"), true);\nTest.assertEquals(overlap(\"ab\", \"Ican'tsingmy**c\"), false);\nTest.assertEquals(overlap(\"hello world\", \"hello\"), false);\nTest.assertEquals(overlap(\"+=\", \"this should work too +=\"), true);\nTest.assertEquals(overlap(\"don't forget hyphens-\", \"-\"), true);\nTest.assertEquals(overlap(\"don't forget periods \", \".\"), false);\nTest.assertEquals(overlap(\"this will always be true\", \"*\"), true);\nTest.assertEquals(overlap(\"this will always be false\", \"F\"), false);\nTest.assertEquals(overlap(\"hey\", \"*********\"), true);\nTest.assertEquals(overlap(\"a*c\", \"*b*\"), true);\nTest.assertEquals(overlap(\"last test\", \"congrats you passed the last test\"), true);",
    "new_tests": "const overlap = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(overlap('ABC', 'Ican\\'tsingmyABC')).toEqual(true);\n        expect(overlap('abc', 'Ican\\'tsingmyABC')).toEqual(true);\n        expect(overlap('Ican\\'tsingmyABC', 'abc')).toEqual(true);\n        expect(overlap('*bc', 'Ican\\'tsingmyABC')).toEqual(true);\n        expect(overlap('abc', 'Ican\\'tsingmy***')).toEqual(true);\n        expect(overlap('ab', 'Ican\\'tsingmy**c')).toEqual(false);\n        expect(overlap('hello world', 'hello')).toEqual(false);\n        expect(overlap('+=', 'this should work too +=')).toEqual(true);\n        expect(overlap('don\\'t forget hyphens-', '-')).toEqual(true);\n        expect(overlap('don\\'t forget periods ', '.')).toEqual(false);\n        expect(overlap('this will always be true', '*')).toEqual(true);\n        expect(overlap('this will always be false', 'F')).toEqual(false);\n        expect(overlap('hey', '*********')).toEqual(true);\n        expect(overlap('a*c', '*b*')).toEqual(true);\n        expect(overlap('last test', 'congrats you passed the last test')).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function isBalanced(str) {\n  \n}",
    "new_code": "function isBalanced(str) {\n  // Your code here.\n}\n\nmodule.exports = isBalanced;\n",
    "original_tests": "Test.assertEquals(isBalanced('()'), true);\nTest.assertEquals(isBalanced('{[()]}'), true);\nTest.assertEquals(isBalanced('{{[[(())]]}}'), true);\nTest.assertEquals(isBalanced('{{[[(())[]]]}}'), true);\nTest.assertEquals(isBalanced('[()]{}{[()()]()}'), true);\nTest.assertEquals(isBalanced('{[([)]]}'), false);\nTest.assertEquals(isBalanced('{[('), false);\nTest.assertEquals(isBalanced('])}'), false);\nTest.assertEquals(isBalanced('[[]'), false);\nTest.assertEquals(isBalanced('{)(}'), false);\nTest.assertEquals(isBalanced('{{[[([())]]]}}'), false);\nTest.assertEquals(isBalanced(), undefined);",
    "new_tests": "const isBalanced = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(isBalanced('()')).toEqual(true);\n        expect(isBalanced('{[()]}')).toEqual(true);\n        expect(isBalanced('{{[[(())]]}}')).toEqual(true);\n        expect(isBalanced('{{[[(())[]]]}}')).toEqual(true);\n        expect(isBalanced('[()]{}{[()()]()}')).toEqual(true);\n        expect(isBalanced('{[([)]]}')).toEqual(false);\n        expect(isBalanced('{[(')).toEqual(false);\n        expect(isBalanced('])}')).toEqual(false);\n        expect(isBalanced('[[]')).toEqual(false);\n        expect(isBalanced('{)(}')).toEqual(false);\n        expect(isBalanced('{{[[([())]]]}}')).toEqual(false);\n        expect(isBalanced()).toEqual(undefined);\n    });\n});\n"
  },
  {
    "original_code": "function checkIfDannyIsHere(str) {\n  \n}",
    "new_code": "function checkIfDannyIsHere(str) {\n  // Your code here.\n}\n\nmodule.exports = checkIfDannyIsHere;\n",
    "original_tests": "Test.assertEquals(checkIfDannyIsHere('is there dan here ?'), false);\nTest.assertEquals(checkIfDannyIsHere('and here dan ny ?'), false);\nTest.assertEquals(checkIfDannyIsHere('I found you d4nny '), true);\nTest.assertEquals(checkIfDannyIsHere('danny is here'), true);\nTest.assertEquals(checkIfDannyIsHere('best still sitting |\\\\|ot cut main computer mouse film cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('cheers ever her should child record beat [)4/\\\\/n`/ beat alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('mouse should are mouse tree tree character record main and.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent ever computer and keyboard cooking [)^n/\\\\/`/ vine mouse mouse.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard 1)/-\\\\n(\\\\)`/ cheers his best with karma |\\\\|ot beat sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('[)A/\\\\/|\\\\|\u00b0/ beat film mouse cheers karma |\\\\|ot they ever none.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive her child you DAn/\\\\/\u00b0/ his represent his friends mouse.'), true);\nTest.assertEquals(checkIfDannyIsHere('you dan keyboard best none seen chair should house his.'), false);\nTest.assertEquals(checkIfDannyIsHere('and cheers love record sitting you record represent tree karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('love tree Da|\\\\||\\\\|y character vine mouse they computer main sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends friends sitting record dan karma are ever they his.'), false);\nTest.assertEquals(checkIfDannyIsHere('best film house we sitting we his d4(\\\\)ny |\\\\|ot seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer with friends seen vine none vine da(\\\\)n\u00b0/ karma best.'), true);\nTest.assertEquals(checkIfDannyIsHere('you child dan house computer [)4n/\\\\/\\'/ mouse seen character and.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting alive represent |\\\\|ot computer house computer cheers child film.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma main her child with is |\\\\|ot you love represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut dAn|\\\\|y keyboard vine sitting keyboard chair ever house beat.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine things film sitting computer tree her seen sitting keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('still represent seen record beat is film represent they alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('best house her her mouse [)An/\\\\/`/ computer should ever tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot |\\\\|ot they are record computer we represent |]/\\\\|\\\\|/\\\\/\u00b0/ film.'), true);\nTest.assertEquals(checkIfDannyIsHere('we cut cut record best you character we cheers his.'), false);\nTest.assertEquals(checkIfDannyIsHere('you chair friends friends main child things seen love computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen karma we his best best [)@|\\\\|n`/ best cut |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('dan friends alive still |\\\\|ot represent things is none computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer still ever d4(\\\\)(\\\\)y you his seen best are her.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent mouse we should beat love ever love best best.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends friends her vine cheers da|\\\\|n\u00b0/ mouse alive best cooking.'), true);\nTest.assertEquals(checkIfDannyIsHere('best |\\\\|ot |)/\\\\(\\\\)n`/ represent friends his his cut with tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('with love chair house is you are things with you.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan cheers his computer d^|\\\\|ny film we record his cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('none none we his child mouse cut house cooking mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting cooking represent vine is cheers cooking represent none tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer computer |\\\\|ot alive seen none [)^n/\\\\/y friends her his.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer computer |\\\\|ot character vine mouse we cooking none karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('best should represent house love love you record tree represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('record cheers |)a(\\\\)(\\\\)`/ |\\\\|ot cheers keyboard tree beat child seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('dan mouse beat are |\\\\|ot tree computer beat sitting her.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan her film we his things computer with friends main.'), false);\nTest.assertEquals(checkIfDannyIsHere('love you computer dan keyboard you tree seen vine vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan film her sitting chair and is character 1)A|\\\\|(\\\\)\\'/ dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('house mouse her film is computer none represent |\\\\|ot none.'), false);\nTest.assertEquals(checkIfDannyIsHere('her love film her |)/-\\\\(\\\\)ny you house you cheers house.'), true);\nTest.assertEquals(checkIfDannyIsHere('main sitting seen 1)4/\\\\//\\\\/`/ record mouse you they you film.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen alive alive tree his cut his should none things.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat we computer sitting chair things beat and love sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('film they main vine we they ever character mouse chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('are karma they film film things and we |\\\\|ot |\\\\|ot.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends mouse vine cheers alive [)a|\\\\|/\\\\/y they film is alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('ever his chair dA/\\\\/(\\\\)\u00b0/ things friends seen computer still sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('should film cut tree film is represent love mouse tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends still child still are friends main chair tree child.'), false);\nTest.assertEquals(checkIfDannyIsHere('things computer represent cheers and mouse |\\\\|ot represent mouse cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('cooking are character computer sitting still with 1)@(\\\\)n\\'/ |\\\\|ot karma.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot love vine best child her seen tree still computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('cooking vine still keyboard should and dan with you you.'), false);\nTest.assertEquals(checkIfDannyIsHere('none they child her cooking cooking cheers child none still.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever d@(\\\\)/\\\\/\u00b0/ things child dan dan none ever are ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat represent her tree things friends chair karma cheers sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('child main record vine cheers they love child things vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends house seen her are keyboard cut karma house dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('they beat cut keyboard are child keyboard D@n|\\\\|\\'/ house vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('we are seen tree cut |)^/\\\\/|\\\\|`/ keyboard computer cooking you.'), true);\nTest.assertEquals(checkIfDannyIsHere('record chair character you cut computer beat mouse they child.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting things house and are ever mouse cooking alive keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('we we cheers represent |)@/\\\\/|\\\\|`/ computer none mouse and cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive represent dan |\\\\|ot record represent vine |]4(\\\\)n\u00b0/ is keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree main still we her main still chair |)A|\\\\|(\\\\)\\'/ dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('his they house friends you is main cheers they cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot with and still film none alive ever child computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('we should we alive child should and his alive with.'), false);\nTest.assertEquals(checkIfDannyIsHere('still ever karma you sitting main house child computer friends.'), false);\nTest.assertEquals(checkIfDannyIsHere('none main vine represent they child keyboard d4n(\\\\)`/ you still.'), true);\nTest.assertEquals(checkIfDannyIsHere('child computer house love should is main still house still.'), false);\nTest.assertEquals(checkIfDannyIsHere('with dan vine mouse cut best cut computer with and.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard character represent sitting friends friends cut are |\\\\|ot ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('1)an/\\\\/y cut things her film child main love |\\\\|ot sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('still alive and film sitting |]/-\\\\n/\\\\/\u00b0/ is his cheers cooking.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut best love ever keyboard love and mouse they her.'), false);\nTest.assertEquals(checkIfDannyIsHere('best her sitting her seen child her cooking none her.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends mouse DAn|\\\\|\\'/ still are film love character seen child.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair cooking karma is keyboard computer |)@(\\\\)(\\\\)\\'/ tree child karma.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive main house none film friends with film represent represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('her main things character chair main seen dan |\\\\|ot cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('alive love |)/\\\\|\\\\|/\\\\/`/ computer cooking and with alive sitting best.'), true);\nTest.assertEquals(checkIfDannyIsHere('karma seen and beat still mouse ever best we beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting film chair represent film you vine still |\\\\|ot his.'), false);\nTest.assertEquals(checkIfDannyIsHere('are friends house ever film dan love cheers seen dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('you main dan cheers beat sitting |]a/\\\\//\\\\/\\'/ |\\\\|ot sitting record.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen still things tree character |\\\\|ot dan should record they.'), false);\nTest.assertEquals(checkIfDannyIsHere('main karma best is karma character we friends vine should.'), false);\nTest.assertEquals(checkIfDannyIsHere('they record record keyboard beat character house his love film.'), false);\nTest.assertEquals(checkIfDannyIsHere('should you none with seen keyboard |)/-\\\\(\\\\)(\\\\)\\'/ main mouse alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine karma seen sitting beat record and 1)a/\\\\//\\\\/`/ vine |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent keyboard best still none sitting things love represent mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('main |]A|\\\\|(\\\\)\u00b0/ sitting love karma child beat chair should you.'), true);\nTest.assertEquals(checkIfDannyIsHere('record record child d/-\\\\/\\\\/|\\\\|`/ friends cheers none friends mouse we.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer they child house things we house are are mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('|)^(\\\\)n`/ main keyboard love cooking best none chair character mouse.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree love friends things cheers we represent sitting mouse cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine vine dan cut represent beat record [)/-\\\\(\\\\)(\\\\)\\'/ cut film.'), true);\nTest.assertEquals(checkIfDannyIsHere('still character should chair tree vine main things computer karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat record tree film his cooking we mouse sitting you.'), false);\nTest.assertEquals(checkIfDannyIsHere('record we his dan ever is D/\\\\|\\\\|/\\\\/y represent mouse her.'), true);\nTest.assertEquals(checkIfDannyIsHere('none none seen love main character ever computer main ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('are |]/-\\\\/\\\\//\\\\/\\'/ we child mouse character |\\\\|ot ever film we.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking ever her you still are things character should love.'), false);\nTest.assertEquals(checkIfDannyIsHere('is seen chair alive dan beat and love D^n/\\\\/y his.'), true);\nTest.assertEquals(checkIfDannyIsHere('is none [)4n/\\\\/y her tree |\\\\|ot his are you still.'), true);\nTest.assertEquals(checkIfDannyIsHere('we love friends karma things cut computer cheers his and.'), false);\nTest.assertEquals(checkIfDannyIsHere('main represent |)A(\\\\)ny keyboard is karma love sitting dan |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('karma cut seen karma cheers represent keyboard are none with.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut |]a/\\\\/|\\\\|\\'/ dan vine record cooking we friends love computer.'), true);\nTest.assertEquals(checkIfDannyIsHere('karma dan computer |\\\\|ot best [)A(\\\\)(\\\\)y ever friends karma her.'), true);\nTest.assertEquals(checkIfDannyIsHere('house sitting main love friends should and and record house.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma and we tree karma beat cheers none best ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('his her record [)@(\\\\)/\\\\/`/ seen still are beat mouse house.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends tree you main you main computer are her you.'), false);\nTest.assertEquals(checkIfDannyIsHere('is mouse beat ever record karma D^n(\\\\)\u00b0/ ever represent her.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking are chair they best should friends you computer best.'), false);\nTest.assertEquals(checkIfDannyIsHere('chair should ever alive cooking we [)A/\\\\/|\\\\|\\'/ alive and vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('ever her sitting ever they his they main computer sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('cheers friends cheers dan is is character [)A|\\\\|/\\\\/y dan computer.'), true);\nTest.assertEquals(checkIfDannyIsHere('with main record main beat friends ever sitting vine friends.'), false);\nTest.assertEquals(checkIfDannyIsHere('love vine record sitting we still things still main things.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan cooking vine alive beat friends love chair vine vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut child with Dan/\\\\/`/ still they ever none his vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('are seen sitting we dan record 1)a|\\\\|/\\\\/\\'/ still cut tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('his best best mouse |\\\\|ot keyboard we vine record child.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard is friends karma Da|\\\\||\\\\|`/ love is tree sitting with.'), true);\nTest.assertEquals(checkIfDannyIsHere('none chair with alive none D^|\\\\|n\\'/ represent vine we you.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree film mouse beat karma |]@n(\\\\)`/ you you keyboard main.'), true);\nTest.assertEquals(checkIfDannyIsHere('character beat represent tree cooking still is best child keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('are sitting dan are best none vine friends cooking character.'), false);\nTest.assertEquals(checkIfDannyIsHere('should you |)/\\\\|\\\\||\\\\|\u00b0/ is are seen we character and they.'), true);\nTest.assertEquals(checkIfDannyIsHere('they house dan cut best character computer best should seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('and character his seen sitting none mouse karma still still.'), false);\nTest.assertEquals(checkIfDannyIsHere('alive they main none cheers dan alive her with best.'), false);\nTest.assertEquals(checkIfDannyIsHere('1)@(\\\\)|\\\\|y things is sitting his love friends vine beat we.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut karma love tree cooking sitting beat still sitting cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('|]A/\\\\/ny |\\\\|ot we main house with computer |\\\\|ot alive her.'), true);\nTest.assertEquals(checkIfDannyIsHere('love |]4(\\\\)/\\\\/`/ cheers chair main love film her keyboard you.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends |\\\\|ot computer they ever |]A/\\\\/|\\\\|y sitting none karma represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('none d/-\\\\/\\\\/|\\\\|y chair keyboard film karma represent film is main.'), true);\nTest.assertEquals(checkIfDannyIsHere('with and mouse none none should sitting film his keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma cut things vine her should |\\\\|ot computer sitting and.'), false);\nTest.assertEquals(checkIfDannyIsHere('record cut represent child cheers are seen film main chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree his is seen his cooking beat record we ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard you mouse tree |]^/\\\\/n`/ his seen her house house.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive should love her best karma character karma we main.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine chair is keyboard main her we with still cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent film character keyboard D^|\\\\|/\\\\/`/ represent we keyboard you record.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends is keyboard and vine house you love beat ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan represent still tree [)@n|\\\\|\u00b0/ things still none represent you.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends and love they you cut are karma still cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('they represent dan seen his best beat house karma tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut karma with is |\\\\|ot |\\\\|ot dan sitting is child.'), false);\nTest.assertEquals(checkIfDannyIsHere('none 1)/\\\\nn\u00b0/ his his they ever tree friends his and.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive |)4n/\\\\/\u00b0/ beat sitting should mouse none cooking is none.'), true);\nTest.assertEquals(checkIfDannyIsHere('record are are with computer and cut none represent things.'), false);\nTest.assertEquals(checkIfDannyIsHere('his friends vine alive are represent cut you cut mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer things friends still alive cheers karma friends cheers represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('cheers seen should cut mouse [)a|\\\\||\\\\|y chair computer computer should.'), true);\nTest.assertEquals(checkIfDannyIsHere('1)^n/\\\\/`/ sitting friends main record sitting dan chair alive her.'), true);\nTest.assertEquals(checkIfDannyIsHere('still are mouse we seen we house alive we keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('you D4(\\\\)|\\\\|\u00b0/ beat cut we keyboard his her record cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('is |\\\\|ot his mouse dan child and still cooking seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('we child cooking main keyboard is character |\\\\|ot are friends.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan we none cut |\\\\|ot film vine they cut beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('none still represent things chair represent you his d^n|\\\\|\\'/ best.'), true);\nTest.assertEquals(checkIfDannyIsHere('we represent and chair you [)/\\\\n(\\\\)\u00b0/ child ever chair character.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive seen tree is chair seen still represent |\\\\|ot child.'), false);\nTest.assertEquals(checkIfDannyIsHere('[)/\\\\/\\\\/|\\\\|`/ tree house we computer with beat his love cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('still her cut cooking main chair cut character child seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever we things should represent still they are his they.'), false);\nTest.assertEquals(checkIfDannyIsHere('best you things keyboard we best represent record cooking none.'), false);\nTest.assertEquals(checkIfDannyIsHere('and tree cooking with film vine is you ever character.'), false);\nTest.assertEquals(checkIfDannyIsHere('[)/-\\\\n/\\\\/`/ |\\\\|ot character record still and child keyboard seen none.'), true);\nTest.assertEquals(checkIfDannyIsHere('film cut love his sitting house are his none cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('should record chair alive are cheers vine |\\\\|ot dan cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('mouse love alive still child cheers they is cooking alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends house house you sitting best film sitting seen cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('still 1)A(\\\\)n\u00b0/ should should cheers alive film keyboard cooking tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut things is keyboard his none sitting things film computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot they vine best should sitting friends |]@(\\\\)|\\\\|y child you.'), true);\nTest.assertEquals(checkIfDannyIsHere('they you |\\\\|ot represent none ever 1)An|\\\\|\\'/ tree still best.'), true);\nTest.assertEquals(checkIfDannyIsHere('and character karma vine house you chair vine they keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('mouse you his still love her mouse mouse we film.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree friends child Da|\\\\|ny his tree his child is chair.'), true);\nTest.assertEquals(checkIfDannyIsHere('still represent is cheers dAn/\\\\/\u00b0/ house computer alive character tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('d^|\\\\|(\\\\)\u00b0/ |\\\\|ot keyboard house character represent |\\\\|ot seen none film.'), true);\nTest.assertEquals(checkIfDannyIsHere('|]A(\\\\)/\\\\/`/ sitting friends you tree dan her still and is.'), true);\nTest.assertEquals(checkIfDannyIsHere('child cheers child best and alive record best record sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('cooking we his cut computer cooking represent mouse chair film.'), false);\nTest.assertEquals(checkIfDannyIsHere('best we alive karma tree is character beat da(\\\\)/\\\\/y ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('child none [)A(\\\\)|\\\\|\u00b0/ mouse keyboard none is vine character computer.'), true);\nTest.assertEquals(checkIfDannyIsHere('karma computer record ever 1)/\\\\|\\\\|/\\\\/`/ vine you ever is cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard his seen [)A(\\\\)/\\\\/\u00b0/ with computer seen character beat still.'), true);\nTest.assertEquals(checkIfDannyIsHere('child sitting still mouse cooking mouse her none computer computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('love tree d^|\\\\|n\\'/ represent child still |\\\\|ot child they keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('things his karma alive [)^n(\\\\)\u00b0/ represent seen are none her.'), true);\nTest.assertEquals(checkIfDannyIsHere('we represent d4n/\\\\/\\'/ her film her seen |\\\\|ot his his.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard sitting sitting vine ever mouse best film karma sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat things we they things character friends mouse mouse karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan seen karma main cut karma his d/\\\\|\\\\||\\\\|\u00b0/ best record.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer film friends character best DA/\\\\/|\\\\|y cheers with things his.'), true);\nTest.assertEquals(checkIfDannyIsHere('character still should D@(\\\\)/\\\\/\\'/ cut seen sitting record with record.'), true);\nTest.assertEquals(checkIfDannyIsHere('karma and cooking her best her you karma beat none.'), false);\nTest.assertEquals(checkIfDannyIsHere('cooking love 1)/-\\\\/\\\\/n`/ his still mouse should and mouse ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot dan none film record dan computer cut vine cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('Da|\\\\|(\\\\)y record vine her computer and things vine are ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('you house cheers and none cooking we record vine cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan alive her dan child tree child we vine sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('none main alive tree none tree they should cooking love.'), false);\nTest.assertEquals(checkIfDannyIsHere('none child chair friends [)/\\\\(\\\\)|\\\\|`/ record you you cheers love.'), true);\nTest.assertEquals(checkIfDannyIsHere('1)an(\\\\)\\'/ child should his you is dan main are house.'), true);\nTest.assertEquals(checkIfDannyIsHere('best his seen alive karma keyboard are house cooking beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever cut none record keyboard none ever mouse friends is.'), false);\nTest.assertEquals(checkIfDannyIsHere('and karma seen cheers main keyboard child should 1)/\\\\/\\\\/n\\'/ keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('none cooking alive dan sitting |]^|\\\\||\\\\|`/ mouse her is friends.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine |\\\\|ot tree things computer still vine Dan/\\\\/\u00b0/ computer child.'), true);\nTest.assertEquals(checkIfDannyIsHere('are vine film beat friends ever beat love beat and.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat is DA|\\\\|/\\\\/`/ things main house vine his main cooking.'), true);\nTest.assertEquals(checkIfDannyIsHere('d@(\\\\)|\\\\|y her vine cut and and tree ever best main.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard tree D/-\\\\/\\\\//\\\\/\u00b0/ house computer chair represent tree dan represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking beat alive mouse mouse best film cooking is are.'), false);\nTest.assertEquals(checkIfDannyIsHere('they tree cheers |\\\\|ot seen should they sitting seen cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen best should love they house love dan we |\\\\|ot.'), false);\nTest.assertEquals(checkIfDannyIsHere('is child seen her are |)A|\\\\|/\\\\/\u00b0/ represent we are best.'), true);\nTest.assertEquals(checkIfDannyIsHere('[)^(\\\\)/\\\\/`/ should still alive you child |\\\\|ot we we |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('with dan her beat his |\\\\|ot and child D@(\\\\)/\\\\/\\'/ ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('ever tree alive D4|\\\\|ny none cooking and house record we.'), true);\nTest.assertEquals(checkIfDannyIsHere('character cheers alive his alive you film are karma none.'), false);\nTest.assertEquals(checkIfDannyIsHere('best friends chair friends love we |)^nn`/ should love tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('none is love should tree is computer d@|\\\\|/\\\\/y chair and.'), true);\nTest.assertEquals(checkIfDannyIsHere('cheers and vine friends is d^(\\\\)/\\\\/`/ computer her vine chair.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot mouse karma keyboard things you love child computer mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('cooking karma |\\\\|ot things friends represent should record keyboard character.'), false);\nTest.assertEquals(checkIfDannyIsHere('film computer cheers they child cooking is ever cut none.'), false);\nTest.assertEquals(checkIfDannyIsHere('none is record alive cooking they still we karma child.'), false);\nTest.assertEquals(checkIfDannyIsHere('things and |)^/\\\\/ny is love film cheers mouse is love.'), true);\nTest.assertEquals(checkIfDannyIsHere('karma best karma seen we |\\\\|ot cheers her karma computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('best should friends |)an/\\\\/\\'/ tree sitting cooking computer computer is.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent friends film vine and sitting friends |)a(\\\\)|\\\\|\\'/ chair |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('with computer child her mouse child vine best |\\\\|ot film.'), false);\nTest.assertEquals(checkIfDannyIsHere('his tree character should best and you we ever you.'), false);\nTest.assertEquals(checkIfDannyIsHere('things friends are best cheers they her [)A/\\\\/n\u00b0/ |\\\\|ot his.'), true);\nTest.assertEquals(checkIfDannyIsHere('dan still we keyboard karma ever house main seen computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('1)/-\\\\/\\\\/n`/ sitting cooking character dan tree and you represent alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('is beat beat child character friends record with computer vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer ever computer 1)A(\\\\)/\\\\/y computer still none things house sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('should |\\\\|ot dan they things |)/\\\\|\\\\|(\\\\)y her computer cooking karma.'), true);\nTest.assertEquals(checkIfDannyIsHere('none we main |\\\\|ot karma film things with we |\\\\|ot.'), false);\nTest.assertEquals(checkIfDannyIsHere('1)/-\\\\|\\\\|ny child child child karma they tree his friends keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('they are seen |)an|\\\\|y friends cut ever tree friends are.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard seen best love best 1)^n/\\\\/y are main seen tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('d^/\\\\//\\\\/\\'/ film none tree computer and |\\\\|ot main and |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('main 1)/-\\\\n|\\\\|\u00b0/ his sitting main still keyboard things none should.'), true);\nTest.assertEquals(checkIfDannyIsHere('things ever they beat house cheers seen should cut vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('cheers dan child tree cut beat |]^/\\\\/n`/ ever seen represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('Da(\\\\)/\\\\/`/ character film love none chair is things his mouse.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot still still |\\\\|ot tree character ever cut DA(\\\\)(\\\\)\\'/ seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive his keyboard mouse tree beat |\\\\|ot cheers his cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('love karma mouse [)/\\\\/\\\\/|\\\\|y and house none things cut cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('we none beat friends we beat D@/\\\\/ny you alive film.'), true);\nTest.assertEquals(checkIfDannyIsHere('[)/\\\\(\\\\)(\\\\)y beat is house her represent computer house mouse vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen best |\\\\|ot represent vine sitting child child best cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('things should d/\\\\n(\\\\)`/ cooking house tree and we and record.'), true);\nTest.assertEquals(checkIfDannyIsHere('is vine |)@n/\\\\/y house vine represent best best cheers tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard love we |)/\\\\n/\\\\/\u00b0/ with house none none cooking best.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer chair his and friends |]A|\\\\|/\\\\/\u00b0/ none friends none computer.'), true);\nTest.assertEquals(checkIfDannyIsHere('main dan alive we still sitting best cooking none child.'), false);\nTest.assertEquals(checkIfDannyIsHere('child none main dan cheers keyboard things alive |)/\\\\|\\\\|(\\\\)`/ they.'), true);\nTest.assertEquals(checkIfDannyIsHere('none dan D/-\\\\(\\\\)|\\\\|\\'/ tree we cut her main child dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('film sitting are represent chair alive they seen you represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('they alive |]a(\\\\)(\\\\)\\'/ and main vine seen his vine alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree ever character cut friends |\\\\|ot dan friends her tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('they tree 1)/\\\\/\\\\/|\\\\|\\'/ karma ever vine child tree they cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('main main is is represent sitting seen love none film.'), false);\nTest.assertEquals(checkIfDannyIsHere('cheers and mouse and is dan beat you best best.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree child computer 1)A|\\\\|/\\\\/\\'/ record computer beat house alive house.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat keyboard |\\\\|ot we house mouse chair |]/-\\\\n/\\\\/y represent beat.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer dAnn\u00b0/ his best her |\\\\|ot with still tree record.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot they we represent you computer character we chair with.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen with character house computer friends child beat with cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('is tree still |]a(\\\\)/\\\\/\\'/ none chair character ever friends dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen |\\\\|ot tree main none mouse chair dan things cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('none ever still keyboard his seen keyboard |\\\\|ot cut and.'), false);\nTest.assertEquals(checkIfDannyIsHere('should we cheers dan none cooking her film sitting record.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine with sitting cooking best none his dan film friends.'), false);\nTest.assertEquals(checkIfDannyIsHere('character cooking and computer cheers we film you vine character.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends |\\\\|ot his none best house [)^(\\\\)|\\\\|`/ none represent friends.'), true);\nTest.assertEquals(checkIfDannyIsHere('love represent best friends keyboard they represent his sitting character.'), false);\nTest.assertEquals(checkIfDannyIsHere('chair seen record cheers things d/-\\\\(\\\\)/\\\\/\\'/ character house beat cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('child and represent friends you keyboard tree house they we.'), false);\nTest.assertEquals(checkIfDannyIsHere('still karma should his d/\\\\(\\\\)(\\\\)y chair alive you none you.'), true);\nTest.assertEquals(checkIfDannyIsHere('ever ever best vine best ever with her friends tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan is sitting 1)^n|\\\\|\\'/ sitting house cooking main is child.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent cheers karma beat we d4n/\\\\/`/ mouse child house they.'), true);\nTest.assertEquals(checkIfDannyIsHere('cheers film her keyboard friends D^(\\\\)/\\\\/\u00b0/ best his represent child.'), true);\nTest.assertEquals(checkIfDannyIsHere('they is computer alive things mouse and main karma vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('things his vine with and d/-\\\\|\\\\||\\\\|`/ and alive are we.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent and sitting alive [)Ann\u00b0/ alive sitting best still cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('they her karma none friends best love is 1)a/\\\\/(\\\\)`/ love.'), true);\nTest.assertEquals(checkIfDannyIsHere('still we are tree character is da/\\\\/n`/ mouse ever are.'), true);\nTest.assertEquals(checkIfDannyIsHere('mouse and with dan are and you |\\\\|ot tree cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('with karma keyboard friends none karma main best |\\\\|ot vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan |\\\\|ot they are d/\\\\|\\\\|ny best cut ever main represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('and character house mouse cooking mouse dan child they chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard mouse represent karma computer seen best keyboard sitting child.'), false);\nTest.assertEquals(checkIfDannyIsHere('none main are beat beat are film ever vine child.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen tree computer chair none none should mouse ever with.'), false);\nTest.assertEquals(checkIfDannyIsHere('they they still dan cut they cooking mouse represent things.'), false);\nTest.assertEquals(checkIfDannyIsHere('we you sitting is alive character dan love main we.'), false);\nTest.assertEquals(checkIfDannyIsHere('best record cut mouse seen karma you represent things with.'), false);\nTest.assertEquals(checkIfDannyIsHere('alive beat child should ever house beat are his represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('should they beat represent [)^(\\\\)|\\\\|\u00b0/ her chair main cooking |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('cheers cheers keyboard vine cooking still computer things love tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent seen karma dan tree dan represent [)@|\\\\|/\\\\/\u00b0/ still dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('record cheers cooking best cut cooking still alive chair character.'), false);\nTest.assertEquals(checkIfDannyIsHere('alive |\\\\|ot represent sitting keyboard none da|\\\\|/\\\\/\u00b0/ character and alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('house and mouse dan her child friends friends is main.'), false);\nTest.assertEquals(checkIfDannyIsHere('they computer represent dan house her cut should record child.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree main with mouse beat his vine keyboard cooking should.'), false);\nTest.assertEquals(checkIfDannyIsHere('still cheers 1)/-\\\\(\\\\)/\\\\/`/ should ever house represent represent character seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent tree they best you love alive film character tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('are tree 1)4n/\\\\/`/ and character |\\\\|ot should alive sitting best.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent karma keyboard sitting is |\\\\|ot beat her karma alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('character chair child alive you film with vine cheers her.'), false);\nTest.assertEquals(checkIfDannyIsHere('still friends are with main mouse they |\\\\|ot we beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma |\\\\|ot you his and and sitting love they alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma main tree things they love best |]ann\u00b0/ cheers his.'), true);\nTest.assertEquals(checkIfDannyIsHere('house karma still is tree sitting chair and beat tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('record love they friends character d/-\\\\(\\\\)(\\\\)\u00b0/ cut karma and you.'), true);\nTest.assertEquals(checkIfDannyIsHere('|)A|\\\\||\\\\|y cooking they child cut represent character best cooking |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut beat keyboard keyboard main seen character are |)A(\\\\)n\\'/ alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking dan child best |]a(\\\\)(\\\\)\u00b0/ cooking ever record are main.'), true);\nTest.assertEquals(checkIfDannyIsHere('child his they and keyboard tree none best alive you.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma is d@|\\\\|/\\\\/`/ cooking chair house main computer cooking represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('is still child they dan none beat record her we.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat vine beat they his record alive karma record still.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut her her sitting mouse karma is mouse none they.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard child cut represent and things child house 1)a/\\\\/|\\\\|\u00b0/ and.'), true);\nTest.assertEquals(checkIfDannyIsHere('house house still beat ever still with dan you keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever should represent beat computer Dan/\\\\/`/ with record should they.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut his chair karma |]@n(\\\\)`/ ever dan should are dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair cheers cut sitting beat computer his [)An|\\\\|\\'/ keyboard we.'), true);\nTest.assertEquals(checkIfDannyIsHere('|]/-\\\\/\\\\/(\\\\)y they film you film are cheers mouse best child.'), true);\nTest.assertEquals(checkIfDannyIsHere('|)^n(\\\\)`/ his ever record record vine beat none are alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('child |\\\\|ot tree house |\\\\|ot main computer we best |\\\\|ot.'), false);\nTest.assertEquals(checkIfDannyIsHere('character is represent computer alive none is film child record.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut dan love |)/-\\\\/\\\\/(\\\\)y record karma none love is cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('|)@/\\\\/n\\'/ you cooking ever they still sitting friends house cooking.'), true);\nTest.assertEquals(checkIfDannyIsHere('|)/-\\\\(\\\\)|\\\\|`/ keyboard karma |\\\\|ot they you beat is things beat.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen alive cut house child house none film cheers character.'), false);\nTest.assertEquals(checkIfDannyIsHere('is |\\\\|ot main mouse |\\\\|ot alive karma you represent none.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer character child is is mouse house her record chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('character are best they they karma sitting chair |)a|\\\\|/\\\\/y seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('house you sitting sitting main still cheers love represent his.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree keyboard chair record seen character we cheers chair her.'), false);\nTest.assertEquals(checkIfDannyIsHere('and mouse vine and friends you friends cut his chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('things friends character chair ever tree beat dan record represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent should 1)/\\\\|\\\\|(\\\\)`/ chair best computer tree karma beat we.'), true);\nTest.assertEquals(checkIfDannyIsHere('best karma beat love Da(\\\\)/\\\\/`/ cooking vine karma are you.'), true);\nTest.assertEquals(checkIfDannyIsHere('her friends things still karma none record main cooking karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard with seen things cheers house record we d/-\\\\|\\\\|/\\\\/`/ main.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat represent dan chair is keyboard sitting [)a/\\\\/n\u00b0/ main beat.'), true);\nTest.assertEquals(checkIfDannyIsHere('record house ever his keyboard and ever his is seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends things is sitting character keyboard mouse tree we house.'), false);\nTest.assertEquals(checkIfDannyIsHere('[)/-\\\\|\\\\|/\\\\/y we you film are are seen friends computer things.'), true);\nTest.assertEquals(checkIfDannyIsHere('character record they her record dan cooking represent represent with.'), false);\nTest.assertEquals(checkIfDannyIsHere('still love ever karma still dan beat child ever mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('best with child cut still love keyboard represent character ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('Da/\\\\/n\u00b0/ they chair represent with alive you mouse still keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('you house alive none her mouse cheers friends 1)4(\\\\)|\\\\|y main.'), true);\nTest.assertEquals(checkIfDannyIsHere('child house D^/\\\\//\\\\/\u00b0/ things things sitting ever they cut tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair they her her vine dan film things keyboard none.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut computer still are you seen |]/\\\\(\\\\)(\\\\)\\'/ her house you.'), true);\nTest.assertEquals(checkIfDannyIsHere('record are things things is |)^nn\\'/ they main they dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('record keyboard vine ever love her computer we you chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma vine his love best and her love love computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('mouse film her are represent you friends with her things.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine cheers we still alive things character |\\\\|ot house child.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat dan you child best is none beat you is.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine dAn/\\\\/\u00b0/ sitting cut best dan his we and sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('dan cheers cut represent with chair his vine ever main.'), false);\nTest.assertEquals(checkIfDannyIsHere('house keyboard vine chair you with cooking they you cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('is you house 1)@(\\\\)n\u00b0/ mouse friends dan beat should should.'), true);\nTest.assertEquals(checkIfDannyIsHere('you film with |]/\\\\(\\\\)/\\\\/y karma computer best keyboard keyboard seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('you |]A/\\\\/|\\\\|`/ keyboard ever cut represent beat represent you main.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree cheers sitting chair mouse we cheers [)A(\\\\)(\\\\)\\'/ friends they.'), true);\nTest.assertEquals(checkIfDannyIsHere('should things sitting record |\\\\|ot |\\\\|ot house [)An(\\\\)y and you.'), true);\nTest.assertEquals(checkIfDannyIsHere('dan [)@/\\\\/n\u00b0/ her they house best chair still character things.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot seen his |\\\\|ot seen cooking you chair should beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('are cheers mouse [)An|\\\\|y tree still |\\\\|ot his we are.'), true);\nTest.assertEquals(checkIfDannyIsHere('love beat best represent cut his should alive and karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat beat things they character none ever cooking friends sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('alive cooking with 1)/-\\\\|\\\\||\\\\|\\'/ still her you her we alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot child karma is karma cheers cooking his they cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard is tree sitting character beat is cut they record.'), false);\nTest.assertEquals(checkIfDannyIsHere('best house things character love none are love still keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('things cooking beat ever vine sitting child record sitting her.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting his friends cooking his you alive is still cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot keyboard computer and things his film alive and record.'), false);\nTest.assertEquals(checkIfDannyIsHere('best cheers ever is character love cooking ever seen still.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever cheers chair D^(\\\\)|\\\\|\u00b0/ |\\\\|ot none they we with |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('record main chair with 1)@(\\\\)/\\\\/y love should chair tree main.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree ever keyboard best sitting her represent computer ever seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('1)@n|\\\\|`/ her friends best you alive none dan her record.'), true);\nTest.assertEquals(checkIfDannyIsHere('film are should computer are character mouse keyboard |]/-\\\\(\\\\)ny ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('are film karma beat they |)4(\\\\)(\\\\)\\'/ friends |\\\\|ot computer mouse.'), true);\nTest.assertEquals(checkIfDannyIsHere('they house ever film represent seen main are are cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('things you beat still computer chair d/-\\\\/\\\\/(\\\\)`/ child his best.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut should with film karma is they and computer friends.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine alive tree mouse with things his friends [)4/\\\\/|\\\\|`/ vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('character film main sitting chair sitting D/-\\\\/\\\\/n\u00b0/ you main none.'), true);\nTest.assertEquals(checkIfDannyIsHere('they chair house seen cooking alive you alive alive child.'), false);\nTest.assertEquals(checkIfDannyIsHere('her keyboard child none things is are his we are.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut dan you seen cheers her computer D^|\\\\|(\\\\)\\'/ |\\\\|ot his.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat D^/\\\\/|\\\\|`/ still ever with cooking cut main you mouse.'), true);\nTest.assertEquals(checkIfDannyIsHere('still her are her |\\\\|ot his should cooking beat seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('we house house and her friends [)a(\\\\)n\u00b0/ cooking sitting represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('best film is cut karma sitting with tree beat beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen karma we should child keyboard vine things beat is.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan you we cut still dan we should they dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree main keyboard they child best is beat friends computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent sitting ever keyboard his child 1)/-\\\\n(\\\\)\\'/ karma with seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('with record record represent should child tree [)a|\\\\|/\\\\/\\'/ you things.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine child cheers seen character are dan main tree |\\\\|ot.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer love with is character is seen are is mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever is cheers none ever main best his |]A/\\\\/n\\'/ sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair and seen we mouse karma child sitting are dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('|]/-\\\\|\\\\|ny none character tree ever her chair ever none house.'), true);\nTest.assertEquals(checkIfDannyIsHere('and record we beat things |\\\\|ot best dan film ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('his with none |\\\\|ot things karma his still still dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('best you cooking alive chair friends cooking still child dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('you are his |)/\\\\(\\\\)/\\\\/`/ vine things her chair |\\\\|ot still.'), true);\nTest.assertEquals(checkIfDannyIsHere('karma seen [)@|\\\\|/\\\\/\u00b0/ |\\\\|ot with film love best are vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('with is cut beat ever film is chair seen they.'), false);\nTest.assertEquals(checkIfDannyIsHere('her is dan vine should |\\\\|ot main still karma alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting with is |)^/\\\\/(\\\\)\\'/ things ever cooking main dan is.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer her we and cut ever 1)/-\\\\(\\\\)(\\\\)y record main film.'), true);\nTest.assertEquals(checkIfDannyIsHere('ever beat things cut alive and cooking should dan dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree none her love and are beat keyboard beat and.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent his character we cheers |\\\\|ot sitting cooking alive seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('should things D^(\\\\)(\\\\)`/ and karma karma are none best we.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends are represent friends alive sitting chair film main is.'), false);\nTest.assertEquals(checkIfDannyIsHere('character they seen love child tree character D/\\\\nn\\'/ they cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('mouse vine chair represent computer best dan cut still is.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat chair ever 1)/\\\\|\\\\|(\\\\)\u00b0/ represent child computer love are friends.'), true);\nTest.assertEquals(checkIfDannyIsHere('1)^(\\\\)|\\\\|\u00b0/ her things we alive character chair vine is love.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent should computer karma beat alive tree things her you.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan [)/-\\\\/\\\\/|\\\\|y ever seen her they with main keyboard main.'), true);\nTest.assertEquals(checkIfDannyIsHere('none computer and her should with sitting are cut with.'), false);\nTest.assertEquals(checkIfDannyIsHere('her character child tree house friends beat seen house seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('character his with child represent computer child record is still.'), false);\nTest.assertEquals(checkIfDannyIsHere('things friends alive are chair represent and child computer her.'), false);\nTest.assertEquals(checkIfDannyIsHere('film record should is love alive are sitting child best.'), false);\nTest.assertEquals(checkIfDannyIsHere('cooking character his represent chair character with you love you.'), false);\nTest.assertEquals(checkIfDannyIsHere('his cooking his vine best film none |\\\\|ot record child.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen record sitting with cut her record love cooking vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('none vine computer represent alive and computer things and still.'), false);\nTest.assertEquals(checkIfDannyIsHere('alive dan and best should should with chair dan and.'), false);\nTest.assertEquals(checkIfDannyIsHere('none computer dann\\'/ represent alive represent keyboard cut keyboard cooking.'), true);\nTest.assertEquals(checkIfDannyIsHere('things best 1)/-\\\\(\\\\)(\\\\)\u00b0/ seen are |\\\\|ot karma karma mouse they.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair house his dan cooking things they main they her.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine love and tree karma main love you his his.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma seen and seen cheers seen still cooking best none.'), false);\nTest.assertEquals(checkIfDannyIsHere('you cooking tree dA(\\\\)/\\\\/y keyboard they vine beat is none.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive we vine karma still we vine we sitting should.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent her ever [)@n/\\\\/\\'/ main record represent record are alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('child none his 1)@n/\\\\/y tree seen her should beat cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('film child |)4n/\\\\/y cheers |\\\\|ot friends none house dan his.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut record ever 1)A(\\\\)ny beat karma alive cooking chair they.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine and they character record keyboard |)4/\\\\/(\\\\)`/ none are vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('and film film character represent best cut ever chair love.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan represent seen keyboard seen beat they |)An(\\\\)y vine sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot seen should |]A|\\\\|(\\\\)`/ seen main karma represent film is.'), true);\nTest.assertEquals(checkIfDannyIsHere('record should and alive is |)An|\\\\|y film chair computer still.'), true);\nTest.assertEquals(checkIfDannyIsHere('D/\\\\/\\\\//\\\\/\u00b0/ friends ever computer with love we |\\\\|ot you with.'), true);\nTest.assertEquals(checkIfDannyIsHere('cheers tree beat things tree they karma record and her.'), false);\nTest.assertEquals(checkIfDannyIsHere('should mouse her things seen dan friends sitting friends keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent child and her cooking they you keyboard seen character.'), false);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot tree cut represent seen cut keyboard dan friends her.'), false);\nTest.assertEquals(checkIfDannyIsHere('they and are main should we are |)^|\\\\|ny character ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer D^/\\\\/|\\\\|\\'/ tree computer friends chair with mouse sitting still.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard chair 1)/\\\\nn\\'/ we are mouse still still beat child.'), true);\nTest.assertEquals(checkIfDannyIsHere('mouse you dan|\\\\|y |\\\\|ot cheers sitting character are dan ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree seen chair should cut chair 1)@/\\\\/|\\\\|`/ record represent keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('is |\\\\|ot friends [)Ann`/ sitting mouse friends her you cooking.'), true);\nTest.assertEquals(checkIfDannyIsHere('her sitting keyboard should beat vine friends ever and beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat cooking love you his |)A|\\\\|/\\\\/\\'/ karma ever love tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard character character cooking |]/\\\\n(\\\\)y should cheers record sitting represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('mouse computer cheers is best friends beat mouse mouse child.'), false);\nTest.assertEquals(checkIfDannyIsHere('still cut karma alive ever friends with cheers chair ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut we karma character keyboard friends |)@n/\\\\/\\'/ still love and.'), true);\nTest.assertEquals(checkIfDannyIsHere('and is with house her character tree tree things with.'), false);\nTest.assertEquals(checkIfDannyIsHere('things and |\\\\|ot with |\\\\|ot seen still ever child chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('best beat house sitting house seen love [)@n|\\\\|`/ child and.'), true);\nTest.assertEquals(checkIfDannyIsHere('we karma mouse friends best her keyboard best chair her.'), false);\nTest.assertEquals(checkIfDannyIsHere('best karma still they cheers child beat represent her mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer mouse beat tree tree love d/-\\\\/\\\\//\\\\/\\'/ you they keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('her friends with seen character best dan keyboard and her.'), false);\nTest.assertEquals(checkIfDannyIsHere('with things you karma mouse beat cooking 1)^/\\\\/(\\\\)\u00b0/ tree they.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting beat with things keyboard seen tree house tree computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('film beat love child child character love you |\\\\|ot karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('chair karma is love cheers character we D^|\\\\|/\\\\/\\'/ cut none.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree ever house we computer cooking child vine dan house.'), false);\nTest.assertEquals(checkIfDannyIsHere('Dan|\\\\|\u00b0/ karma |\\\\|ot karma seen chair represent keyboard with with.'), true);\nTest.assertEquals(checkIfDannyIsHere('love best film sitting cut you record house they keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('best tree seen are character child D@(\\\\)|\\\\|y you ever karma.'), true);\nTest.assertEquals(checkIfDannyIsHere('his 1)A(\\\\)|\\\\|\u00b0/ record main alive chair his tree karma chair.'), true);\nTest.assertEquals(checkIfDannyIsHere('is still with they tree tree his his love house.'), false);\nTest.assertEquals(checkIfDannyIsHere('main D@|\\\\||\\\\|y main none are |\\\\|ot they computer you seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent things mouse house her friends best things beat keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('things keyboard computer with house child still vine film her.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut still child tree keyboard her character still D/-\\\\/\\\\/(\\\\)`/ |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair child record character you still with |)A|\\\\||\\\\|\u00b0/ keyboard represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('|]@n|\\\\|`/ vine with love beat should his seen house represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('her seen still D/\\\\|\\\\|/\\\\/`/ friends we alive we beat house.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer and alive mouse |\\\\|ot best mouse vine represent film.'), false);\nTest.assertEquals(checkIfDannyIsHere('record you love main |\\\\|ot cooking is represent with they.'), false);\nTest.assertEquals(checkIfDannyIsHere('we cut film his house best chair seen still karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('her and his dan seen [)^n/\\\\/y dan is house they.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine film none house house keyboard |\\\\|ot keyboard beat we.'), false);\nTest.assertEquals(checkIfDannyIsHere('we |\\\\|ot house character keyboard you things his seen seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('house things |\\\\|ot karma character ever seen seen chair main.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine record chair are cut tree |)a(\\\\)/\\\\/`/ with ever her.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine best house vine record cheers with you child seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('they her seen none mouse things karma karma sitting none.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut |]a/\\\\/n`/ dan cheers alive her cooking |\\\\|ot karma and.'), true);\nTest.assertEquals(checkIfDannyIsHere('you love things chair cooking are sitting his beat film.'), false);\nTest.assertEquals(checkIfDannyIsHere('record friends none |\\\\|ot 1)4nny and we friends beat film.'), true);\nTest.assertEquals(checkIfDannyIsHere('cheers computer we ever 1)A|\\\\|/\\\\/\u00b0/ child cheers they we child.'), true);\nTest.assertEquals(checkIfDannyIsHere('they beat |\\\\|ot cheers dan they you tree record still.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat vine is seen da/\\\\/ny tree sitting her with |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer main record best sitting |)A(\\\\)n\\'/ cheers is film alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('should cooking we film chair seen and none |]^(\\\\)n`/ none.'), true);\nTest.assertEquals(checkIfDannyIsHere('things character are karma her ever you cooking beat still.'), false);\nTest.assertEquals(checkIfDannyIsHere('|)a|\\\\|/\\\\/\\'/ none seen character still alive record love main represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('|]/\\\\|\\\\|/\\\\/`/ |\\\\|ot her house dan should tree karma computer love.'), true);\nTest.assertEquals(checkIfDannyIsHere('things her tree her love |\\\\|ot alive with cheers friends.'), false);\nTest.assertEquals(checkIfDannyIsHere('are ever friends mouse [)a|\\\\|(\\\\)`/ they ever ever we tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard should computer house character we best they with cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends best |]^n|\\\\|\u00b0/ they represent seen and should vine film.'), true);\nTest.assertEquals(checkIfDannyIsHere('film house cut chair with dan you love none house.'), false);\nTest.assertEquals(checkIfDannyIsHere('love things cut |]a|\\\\|/\\\\/y is friends her is cheers and.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent mouse should chair things chair cheers friends cut dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('record his karma is tree cut [)@|\\\\||\\\\|\\'/ sitting vine you.'), true);\nTest.assertEquals(checkIfDannyIsHere('love main alive d/\\\\(\\\\)(\\\\)`/ house child mouse cheers you child.'), true);\nTest.assertEquals(checkIfDannyIsHere('things and main dan they beat dAn(\\\\)y sitting computer ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent keyboard character mouse record sitting vine should with main.'), false);\nTest.assertEquals(checkIfDannyIsHere('chair with tree none |)A|\\\\|n\u00b0/ still record alive should house.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends mouse and cut sitting represent her none chair still.'), false);\nTest.assertEquals(checkIfDannyIsHere('mouse main seen seen main character alive with vine tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('cheers they with friends friends best tree keyboard should mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat friends her things tree main tree love film karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever you |]/-\\\\n(\\\\)y beat are ever best you main cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends best beat none none we seen house |]an(\\\\)\\'/ house.'), true);\nTest.assertEquals(checkIfDannyIsHere('dan things vine things cooking chair are film should chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('best 1)^/\\\\/ny they film sitting |\\\\|ot sitting character film seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('still things we love computer mouse main mouse are cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('house you is mouse child child her is |\\\\|ot alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('|)/\\\\|\\\\|(\\\\)\u00b0/ sitting none beat |\\\\|ot still chair main love cooking.'), true);\nTest.assertEquals(checkIfDannyIsHere('karma film still keyboard computer vine film vine child film.'), false);\nTest.assertEquals(checkIfDannyIsHere('love are you you dan house |]A(\\\\)|\\\\|`/ still seen you.'), true);\nTest.assertEquals(checkIfDannyIsHere('his sitting should child house are karma should ever with.'), false);\nTest.assertEquals(checkIfDannyIsHere('character love film beat karma sitting mouse |\\\\|ot ever dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('cooking D/\\\\(\\\\)|\\\\|y beat are still friends ever record cut keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting represent friends you vine mouse his |)/-\\\\/\\\\/(\\\\)y character main.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive keyboard love cooking tree and his film and keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('character dan vine with dan chair represent none things cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting main should is character best house computer cut love.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer ever you represent sitting cheers keyboard represent ever is.'), false);\nTest.assertEquals(checkIfDannyIsHere('main things seen friends we sitting sitting child is record.'), false);\nTest.assertEquals(checkIfDannyIsHere('film main his beat dA(\\\\)|\\\\|`/ things we is with child.'), true);\nTest.assertEquals(checkIfDannyIsHere('best alive mouse character keyboard film main best main keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('are karma friends cooking friends love dan his record cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('should is chair film vine her cooking 1)/\\\\|\\\\||\\\\|\\'/ sitting sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair child is chair are should and computer sitting is.'), false);\nTest.assertEquals(checkIfDannyIsHere('her keyboard main her cheers they love and friends computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen character should |]@nn\u00b0/ none alive is cooking beat friends.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard with record they house we ever child love best.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma cooking represent |)A|\\\\|/\\\\/y seen none his cooking alive her.'), true);\nTest.assertEquals(checkIfDannyIsHere('and keyboard things with |\\\\|ot vine seen child represent none.'), false);\nTest.assertEquals(checkIfDannyIsHere('D/\\\\/\\\\/(\\\\)\\'/ are keyboard best love represent beat his house cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking his is represent her cheers karma sitting with are.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine main dan |]@(\\\\)n\u00b0/ none things |\\\\|ot still main karma.'), true);\nTest.assertEquals(checkIfDannyIsHere('child keyboard computer chair best house they still tree they.'), false);\nTest.assertEquals(checkIfDannyIsHere('are best and his main love we her her best.'), false);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot cheers main represent sitting cooking love cheers tree none.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting cut film still karma friends his keyboard beat character.'), false);\nTest.assertEquals(checkIfDannyIsHere('with record things ever love |\\\\|ot [)/-\\\\(\\\\)|\\\\|\\'/ represent tree ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('you you chair is keyboard chair |\\\\|ot cut computer main.'), false);\nTest.assertEquals(checkIfDannyIsHere('are and alive keyboard |)A|\\\\|/\\\\/\u00b0/ should film we cut record.'), true);\nTest.assertEquals(checkIfDannyIsHere('with film seen friends child child beat child they child.'), false);\nTest.assertEquals(checkIfDannyIsHere('house |\\\\|ot none tree and film main friends vine keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('main cheers keyboard character best chair 1)^|\\\\|(\\\\)`/ with karma we.'), true);\nTest.assertEquals(checkIfDannyIsHere('character tree computer keyboard should things computer beat her are.'), false);\nTest.assertEquals(checkIfDannyIsHere('best house his seen tree with represent film karma still.'), false);\nTest.assertEquals(checkIfDannyIsHere('her house chair are tree character still things computer and.'), false);\nTest.assertEquals(checkIfDannyIsHere('none keyboard computer cut |\\\\|ot his seen dan |]4/\\\\/|\\\\|\u00b0/ none.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends should |\\\\|ot [)^(\\\\)/\\\\/\\'/ his karma cheers cooking with are.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent are his karma 1)4|\\\\||\\\\|`/ keyboard main child you child.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard with house 1)/-\\\\/\\\\//\\\\/\u00b0/ computer they dan his tree film.'), true);\nTest.assertEquals(checkIfDannyIsHere('things still mouse they vine you cooking 1)@/\\\\/(\\\\)y keyboard his.'), true);\nTest.assertEquals(checkIfDannyIsHere('record they cooking none should her |)^n(\\\\)`/ tree child dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('character alive film record is seen beat child represent cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('we her house main seen 1)An/\\\\/`/ ever chair house her.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut ever is house seen still beat tree are mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('is represent love keyboard friends dan we [)4|\\\\|(\\\\)\u00b0/ karma and.'), true);\nTest.assertEquals(checkIfDannyIsHere('ever should seen tree his love dan chair character house.'), false);\nTest.assertEquals(checkIfDannyIsHere('cheers cut and none still 1)4n(\\\\)\u00b0/ best main they film.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut tree cooking mouse with beat |\\\\|ot love her is.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen |)a(\\\\)/\\\\/`/ represent you karma child chair child friends best.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot his friends house vine vine dan vine are house.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan record love 1)/-\\\\|\\\\|/\\\\/y they dan character cut keyboard tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('and vine friends beat child friends beat is dan |\\\\|ot.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen keyboard we her alive record child child with cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('|]A|\\\\|/\\\\/\u00b0/ child |\\\\|ot friends record you you none tree sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent beat film character house his none and child beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('none cooking cooking alive chair represent tree seen ever are.'), false);\nTest.assertEquals(checkIfDannyIsHere('things mouse best cooking main best child represent cooking child.'), false);\nTest.assertEquals(checkIfDannyIsHere('we her computer record character seen with character vine chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('1)4n|\\\\|\u00b0/ and house cut cut with they film love dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('|)an/\\\\/`/ karma computer film cut you ever love film we.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat chair are main they ever karma keyboard best seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('best should character things with alive ever tree and you.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine vine [)/-\\\\(\\\\)(\\\\)`/ ever you his film dan best cooking.'), true);\nTest.assertEquals(checkIfDannyIsHere('is with ever keyboard cooking represent we represent ever main.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen we and computer computer none represent 1)/-\\\\|\\\\||\\\\|`/ friends dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('dan dan keyboard chair alive ever record mouse represent none.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine love you [)@/\\\\/ny is |\\\\|ot love vine love is.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree represent film record things and karma sitting child ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('best |\\\\|ot still character friends D@|\\\\|/\\\\/\u00b0/ should |\\\\|ot things keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut keyboard mouse karma best keyboard things ever sitting alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('we cooking keyboard is things her is best is house.'), false);\nTest.assertEquals(checkIfDannyIsHere('you alive computer chair his is keyboard beat Dan|\\\\|`/ chair.'), true);\nTest.assertEquals(checkIfDannyIsHere('her things computer best film record computer D/\\\\n|\\\\|\\'/ ever is.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen love karma we main sitting and karma friends film.'), false);\nTest.assertEquals(checkIfDannyIsHere('and mouse dan house are his record beat mouse vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('we dA|\\\\|(\\\\)y represent and cooking cooking cooking |\\\\|ot with beat.'), true);\nTest.assertEquals(checkIfDannyIsHere('mouse sitting sitting love mouse |\\\\|ot you is things karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('you his seen film |)@|\\\\|n`/ love cooking beat they her.'), true);\nTest.assertEquals(checkIfDannyIsHere('ever cooking cooking you cooking film child his character you.'), false);\nTest.assertEquals(checkIfDannyIsHere('you chair we d^/\\\\/n\\'/ keyboard karma we are his best.'), true);\nTest.assertEquals(checkIfDannyIsHere('you her |]/\\\\nn\u00b0/ things vine with cooking things ever is.'), true);\nTest.assertEquals(checkIfDannyIsHere('D4|\\\\|(\\\\)\\'/ none house computer her ever chair are should friends.'), true);\nTest.assertEquals(checkIfDannyIsHere('record mouse record you and with chair sitting love chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('main love is computer film friends film D@(\\\\)/\\\\/`/ computer alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('we vine seen cooking best none film with cheers her.'), false);\nTest.assertEquals(checkIfDannyIsHere('love his cooking you [)A(\\\\)(\\\\)y friends beat seen we beat.'), true);\nTest.assertEquals(checkIfDannyIsHere('film best dAn/\\\\/y film vine are tree is cut things.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard computer mouse we alive his best her d/\\\\|\\\\|/\\\\/`/ should.'), true);\nTest.assertEquals(checkIfDannyIsHere('we cooking beat they |\\\\|ot dan alive still mouse things.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree computer |]@/\\\\/|\\\\|\\'/ record her cooking they still best record.'), true);\nTest.assertEquals(checkIfDannyIsHere('with you child chair computer beat |]4n(\\\\)`/ child record none.'), true);\nTest.assertEquals(checkIfDannyIsHere('we is tree things you and is are best love.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent friends record mouse love best and represent mouse none.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma sitting seen with we beat computer we tree still.'), false);\nTest.assertEquals(checkIfDannyIsHere('things record character alive sitting sitting cheers her record with.'), false);\nTest.assertEquals(checkIfDannyIsHere('they chair mouse main chair they mouse still D@/\\\\/n\\'/ house.'), true);\nTest.assertEquals(checkIfDannyIsHere('best mouse love keyboard represent record tree |\\\\|ot friends we.'), false);\nTest.assertEquals(checkIfDannyIsHere('record his and things mouse |]a/\\\\/n`/ seen mouse and should.'), true);\nTest.assertEquals(checkIfDannyIsHere('are are seen friends sitting mouse her record karma still.'), false);\nTest.assertEquals(checkIfDannyIsHere('should computer seen love with her friends mouse alive keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan|\\\\|y is still love best her computer none still film.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut ever love still [)^/\\\\/(\\\\)`/ should cheers computer chair chair.'), true);\nTest.assertEquals(checkIfDannyIsHere('karma child tree mouse record dan love mouse alive film.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent still dan is cut we and chair mouse alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('should [)4(\\\\)|\\\\|y film best house friends best friends keyboard and.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen things chair represent we cut house represent sitting are.'), false);\nTest.assertEquals(checkIfDannyIsHere('house house karma and friends child child vine chair chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('things is are character record chair dan computer still dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('house keyboard tree friends seen ever cut 1)A|\\\\|(\\\\)y things karma.'), true);\nTest.assertEquals(checkIfDannyIsHere('d4|\\\\||\\\\|`/ karma and ever you alive main best tree with.'), true);\nTest.assertEquals(checkIfDannyIsHere('still sitting and alive friends love things mouse |\\\\|ot alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('record none 1)/-\\\\/\\\\/ny mouse you alive is vine things still.'), true);\nTest.assertEquals(checkIfDannyIsHere('best chair ever record main film film best cheers should.'), false);\nTest.assertEquals(checkIfDannyIsHere('we character karma mouse represent should none house best love.'), false);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot is are mouse cooking none seen 1)a(\\\\)n\u00b0/ alive tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('|]A/\\\\/|\\\\|\u00b0/ sitting tree with with his tree beat mouse with.'), true);\nTest.assertEquals(checkIfDannyIsHere('main mouse |\\\\|ot house represent vine best character ever alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('still record none vine beat cut they karma house main.'), false);\nTest.assertEquals(checkIfDannyIsHere('character seen film with alive best cheers with dan house.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat cheers karma 1)/\\\\(\\\\)|\\\\|`/ house main dan vine dan mouse.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking character is child with her |\\\\|ot |)/-\\\\(\\\\)|\\\\|y should keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('still alive karma should child represent should his and still.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree house cheers sitting 1)/\\\\/\\\\/|\\\\|\\'/ still sitting dan record with.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot tree vine D/\\\\n(\\\\)\\'/ mouse house character best cheers |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting vine cooking character you [)An(\\\\)`/ vine her main cooking.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent you house karma they chair karma child house with.'), false);\nTest.assertEquals(checkIfDannyIsHere('child computer keyboard beat dan tree cooking da(\\\\)(\\\\)`/ house sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut seen vine sitting 1)@|\\\\|/\\\\/`/ |\\\\|ot sitting mouse and still.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking best should child we house record record with beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard child |\\\\|ot should none tree Dan/\\\\/\\'/ you alive her.'), true);\nTest.assertEquals(checkIfDannyIsHere('|]@nn\u00b0/ beat we computer represent none vine his her record.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat house computer main with film love we chair represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('things cheers film main mouse alive 1)/-\\\\|\\\\|(\\\\)y mouse best keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer his best [)/\\\\/\\\\//\\\\/\u00b0/ computer cooking love seen friends karma.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends none you his [)/\\\\|\\\\||\\\\|\u00b0/ house they cut child friends.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking none best film is tree film his karma we.'), false);\nTest.assertEquals(checkIfDannyIsHere('and should 1)/-\\\\/\\\\/(\\\\)y represent and we are child tree cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('is computer his cheers love sitting his cut none none.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends record are character cooking sitting they her and ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('are we D@|\\\\|(\\\\)\u00b0/ vine cooking tree main |\\\\|ot character love.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard his things none friends her house should sitting cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('with vine should friends we keyboard is ever best and.'), false);\nTest.assertEquals(checkIfDannyIsHere('karma seen character character and |)4(\\\\)/\\\\/\u00b0/ sitting still cheers beat.'), true);\nTest.assertEquals(checkIfDannyIsHere('still are ever child alive karma child d/\\\\(\\\\)|\\\\|\u00b0/ with computer.'), true);\nTest.assertEquals(checkIfDannyIsHere('none his friends dan you house is should karma we.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends beat should main record we best tree 1)^|\\\\|(\\\\)y alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('[)a(\\\\)|\\\\|y house mouse are you tree they vine computer main.'), true);\nTest.assertEquals(checkIfDannyIsHere('and his record tree karma karma cut main should her.'), false);\nTest.assertEquals(checkIfDannyIsHere('you cut love d@/\\\\/n`/ film his record keyboard main sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('child child you should cheers beat karma child record things.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent cooking d/-\\\\nny you are should still vine with love.'), true);\nTest.assertEquals(checkIfDannyIsHere('none record [)^(\\\\)|\\\\|`/ friends with still with best |\\\\|ot is.'), true);\nTest.assertEquals(checkIfDannyIsHere('still child child we alive best love we cooking dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('film karma you they cut film best should cooking keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('is we keyboard child cheers D@(\\\\)|\\\\|\\'/ main love house is.'), true);\nTest.assertEquals(checkIfDannyIsHere('still mouse seen film mouse represent represent house karma represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('house are cut love mouse dan [)A|\\\\||\\\\|\u00b0/ computer and child.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive is chair tree ever dan her friends d4n(\\\\)`/ cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('his child seen cut are dan is and represent mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine 1)/-\\\\/\\\\/n`/ seen still mouse chair none computer none dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting |\\\\|ot tree seen with dan d@n/\\\\/\u00b0/ with vine cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('and his cooking keyboard seen friends still are mouse sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('things sitting karma ever record vine computer Da/\\\\/n`/ things character.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair dan represent record are tree love alive you house.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree vine film should house child and tree main sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent chair and his none and should record none with.'), false);\nTest.assertEquals(checkIfDannyIsHere('is computer chair should alive karma karma dan cheers character.'), false);\nTest.assertEquals(checkIfDannyIsHere('with record they character cooking none is tree mouse cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('child alive dan sitting main sitting main you computer and.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting represent main vine love [)4|\\\\|/\\\\/`/ main film cheers alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen represent her and cut house friends film keyboard cut.'), false);\nTest.assertEquals(checkIfDannyIsHere('is film cut her seen with child alive tree is.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever tree cut are vine ever film D^n/\\\\/`/ is are.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree main cooking film they things her |)/-\\\\/\\\\/n\u00b0/ still character.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat represent tree vine still film love and mouse alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan karma dan beat and tree [)4/\\\\/n\\'/ we vine house.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair seen and tree and dan DA|\\\\|/\\\\/\u00b0/ main sitting child.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat is love film seen none karma best dan love.'), false);\nTest.assertEquals(checkIfDannyIsHere('still are child beat computer cheers is ever her house.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut love record cut beat film they |)4(\\\\)|\\\\|\u00b0/ are are.'), true);\nTest.assertEquals(checkIfDannyIsHere('main they things chair is you |)/\\\\n|\\\\|y you with love.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting film house karma cooking chair with we seen things.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent main cooking computer her main his friends mouse are.'), false);\nTest.assertEquals(checkIfDannyIsHere('Dan|\\\\|`/ ever beat tree best mouse keyboard you computer represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair mouse film mouse house record still we karma his.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree child with and things film dan and you you.'), false);\nTest.assertEquals(checkIfDannyIsHere('with cut main character love his none are computer best.'), false);\nTest.assertEquals(checkIfDannyIsHere('is record represent keyboard tree keyboard dan [)a/\\\\/|\\\\|\u00b0/ seen and.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat D4/\\\\/|\\\\|\\'/ best vine house seen her tree sitting cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive none love his record mouse main things keyboard chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('with should still ever seen |]@(\\\\)n\u00b0/ mouse best is vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('they things things and |\\\\|ot child should represent cooking |\\\\|ot.'), false);\nTest.assertEquals(checkIfDannyIsHere('child things you seen we mouse none cut dan alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('film karma karma we main cut |]/\\\\|\\\\|ny represent house none.'), true);\nTest.assertEquals(checkIfDannyIsHere('with film should none represent cooking love record d/-\\\\|\\\\|/\\\\/\u00b0/ tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('his child child with should cheers tree cut none beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('mouse love [)A|\\\\|n`/ chair love vine are with her cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut dan seen friends keyboard is record are karma record.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut main and chair friends love mouse things record love.'), false);\nTest.assertEquals(checkIfDannyIsHere('mouse are they love ever main they his 1)a|\\\\|/\\\\/\u00b0/ cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot mouse 1)a/\\\\/n\\'/ cooking her best beat chair and alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent vine with with her you dan should tree his.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting with you sitting dan love cheers none best friends.'), false);\nTest.assertEquals(checkIfDannyIsHere('seen still alive things cut represent mouse |\\\\|ot film tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot his friends friends vine ever |\\\\|ot chair computer computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent and mouse film computer alive none best mouse friends.'), false);\nTest.assertEquals(checkIfDannyIsHere('is |\\\\|ot are they mouse main character cut none cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer mouse her things seen [)a(\\\\)(\\\\)`/ you none vine love.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut things ever with |)/\\\\|\\\\||\\\\|`/ is dan chair we cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('you child house still is film chair D/\\\\/\\\\//\\\\/y love are.'), true);\nTest.assertEquals(checkIfDannyIsHere('you alive alive [)@n(\\\\)`/ computer character things main film we.'), true);\nTest.assertEquals(checkIfDannyIsHere('alive house cooking seen and and things film we character.'), false);\nTest.assertEquals(checkIfDannyIsHere('character things none with 1)an/\\\\/\\'/ beat things love none main.'), true);\nTest.assertEquals(checkIfDannyIsHere('and d^/\\\\/n\\'/ cheers alive with mouse alive character record still.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair computer |]An|\\\\|y best his mouse none |\\\\|ot are keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('house represent house are we d4/\\\\/(\\\\)`/ computer her you beat.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot house beat ever dan cut sitting her they film.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat with film main alive they should tree chair tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('things record karma |\\\\|ot house mouse cooking cooking dan chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('love house |\\\\|ot main chair vine is character his is.'), false);\nTest.assertEquals(checkIfDannyIsHere('main |)a|\\\\|/\\\\/`/ should cooking cooking main love we cooking computer.'), true);\nTest.assertEquals(checkIfDannyIsHere('with things best best computer are [)/\\\\(\\\\)|\\\\|`/ main cooking cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer |\\\\|ot house friends house none karma keyboard best character.'), false);\nTest.assertEquals(checkIfDannyIsHere('with cut and his |\\\\|ot and |]@n/\\\\/`/ keyboard his still.'), true);\nTest.assertEquals(checkIfDannyIsHere('film represent mouse house love |\\\\|ot cheers ever |)^/\\\\/n`/ vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('is DA(\\\\)|\\\\|\u00b0/ love his house and is ever house cooking.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent is sitting with sitting mouse mouse her cooking keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('are best tree ever his tree friends house friends best.'), false);\nTest.assertEquals(checkIfDannyIsHere('his cheers cheers are cheers record we ever friends seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('her are 1)4n|\\\\|\u00b0/ is main none house cut cheers chair.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot cheers we vine you is keyboard main |\\\\|ot alive.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut d/\\\\(\\\\)|\\\\|\u00b0/ are tree character film cooking should is none.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting with cooking should best film keyboard tree computer represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('main with cooking [)4n|\\\\|`/ still main alive still child we.'), true);\nTest.assertEquals(checkIfDannyIsHere('child karma none |)@|\\\\|ny beat mouse with cooking |\\\\|ot film.'), true);\nTest.assertEquals(checkIfDannyIsHere('house character mouse character they things is tree is friends.'), false);\nTest.assertEquals(checkIfDannyIsHere('should house you cut vine ever are best house represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan represent house you cut character main computer ever chair.'), false);\nTest.assertEquals(checkIfDannyIsHere('are sitting main are karma should cut best main none.'), false);\nTest.assertEquals(checkIfDannyIsHere('you child alive is main film chair computer things sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('cooking with Da/\\\\/n\\'/ karma friends love and and friends film.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat none |\\\\|ot best and his chair love child you.'), false);\nTest.assertEquals(checkIfDannyIsHere('things karma with with |)@/\\\\//\\\\/\u00b0/ seen should with tree things.'), true);\nTest.assertEquals(checkIfDannyIsHere('ever tree |\\\\|ot friends dan D4nny with alive is |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat house computer computer keyboard they love still film friends.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer are |\\\\|ot record computer house his you |]/\\\\|\\\\|/\\\\/\\'/ is.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting tree house child represent cut beat love are none.'), false);\nTest.assertEquals(checkIfDannyIsHere('dan chair tree cheers chair are love you D/-\\\\|\\\\|/\\\\/\\'/ |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('record film still is sitting we you his cut tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('and vine mouse record computer should with dan house represent.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever film cheers best cheers with character with are character.'), false);\nTest.assertEquals(checkIfDannyIsHere('her represent beat 1)A(\\\\)n\\'/ computer karma tree seen beat keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('we cheers still record and karma is represent keyboard tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever film ever D^n|\\\\|y alive are film vine cooking cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('love karma keyboard his none cooking main D^|\\\\|(\\\\)\\'/ and should.'), true);\nTest.assertEquals(checkIfDannyIsHere('dan love are tree friends main house tree cheers cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard tree should with seen sitting |\\\\|ot and his karma.'), false);\nTest.assertEquals(checkIfDannyIsHere('D/-\\\\n|\\\\|\\'/ beat vine and cut alive cut with film vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine cheers keyboard represent we you should and none film.'), false);\nTest.assertEquals(checkIfDannyIsHere('should film karma cooking best D/\\\\|\\\\|/\\\\/y record beat vine represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('you child best friends vine and his cheers things beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('character you cheers cooking his film seen his alive record.'), false);\nTest.assertEquals(checkIfDannyIsHere('|)4n/\\\\/`/ cheers still should things they still her his is.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree tree love things cut his her record mouse you.'), false);\nTest.assertEquals(checkIfDannyIsHere('mouse cheers computer best keyboard main d4n(\\\\)y vine are with.'), true);\nTest.assertEquals(checkIfDannyIsHere('keyboard best tree represent karma none still love keyboard his.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree cheers mouse things chair sitting film cheers |\\\\|ot beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('ever best |\\\\|ot none represent ever cheers |]a(\\\\)n\u00b0/ vine beat.'), true);\nTest.assertEquals(checkIfDannyIsHere('best represent still computer they d/-\\\\/\\\\/|\\\\|\u00b0/ vine sitting sitting are.'), true);\nTest.assertEquals(checkIfDannyIsHere('|)/-\\\\n(\\\\)\\'/ |\\\\|ot dan house dan with is alive we alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking mouse things dan dan represent with child house is.'), false);\nTest.assertEquals(checkIfDannyIsHere('is should still character child love d@n|\\\\|\u00b0/ things should sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot things |)4n(\\\\)\u00b0/ mouse mouse none you record seen record.'), true);\nTest.assertEquals(checkIfDannyIsHere('are is with are ever dan best best dan are.'), false);\nTest.assertEquals(checkIfDannyIsHere('are cooking chair chair things and his child child dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('best seen tree chair still friends character sitting cooking cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat character house things they d4n|\\\\|`/ we should character main.'), true);\nTest.assertEquals(checkIfDannyIsHere('d4nn\\'/ sitting still chair karma they none cut they tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('record cheers cut tree things karma friends dan still beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('we karma sitting [)@|\\\\||\\\\|y and seen house her cut |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('record is her represent cut beat friends best main keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('record ever |\\\\|ot none tree chair best beat [)An(\\\\)y character.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat love they 1)/-\\\\(\\\\)|\\\\|y should dan cooking her should film.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting |\\\\|ot and mouse cheers his love |]an/\\\\/`/ are none.'), true);\nTest.assertEquals(checkIfDannyIsHere('is film friends you should best we |\\\\|ot things seen.'), false);\nTest.assertEquals(checkIfDannyIsHere('with character dan chair d/\\\\/\\\\/|\\\\|y chair alive is |\\\\|ot cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine house dan child film cheers cooking friends chair mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('still main is and still they |\\\\|ot ever computer record.'), false);\nTest.assertEquals(checkIfDannyIsHere('things things [)@|\\\\|/\\\\/\\'/ vine with film cooking things karma her.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen cooking 1)4(\\\\)n`/ beat is main mouse cheers sitting is.'), true);\nTest.assertEquals(checkIfDannyIsHere('they character tree DA|\\\\|n`/ sitting none we with cheers love.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair are |\\\\|ot cheers none her you 1)/-\\\\|\\\\|/\\\\/`/ we seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('film her character seen friends beat seen dan cheers love.'), false);\nTest.assertEquals(checkIfDannyIsHere('love seen computer friends DA/\\\\/(\\\\)\\'/ tree his sitting love things.'), true);\nTest.assertEquals(checkIfDannyIsHere('dan |)^|\\\\|/\\\\/y vine they sitting his main none her should.'), true);\nTest.assertEquals(checkIfDannyIsHere('love you cut alive cheers keyboard are things computer tree.'), false);\nTest.assertEquals(checkIfDannyIsHere('are his still and main you mouse his we cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('should beat |\\\\|ot house still beat should computer still film.'), false);\nTest.assertEquals(checkIfDannyIsHere('we record character none cooking you house tree with ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('best Da|\\\\||\\\\|\\'/ are house dan his sitting character child dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen is you tree film with computer none house ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('is things tree his house none cheers [)/-\\\\/\\\\/|\\\\|`/ you with.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair friends dan d@/\\\\/n`/ best karma seen sitting none vine.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine is beat child seen ever cut none ever are.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree d/\\\\n/\\\\/\u00b0/ karma we record karma should main sitting we.'), true);\nTest.assertEquals(checkIfDannyIsHere('ever is record [)@n/\\\\/\\'/ chair mouse tree chair love karma.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends computer alive main karma alive dan main seen still.'), false);\nTest.assertEquals(checkIfDannyIsHere('love karma they love are they are with beat vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('you mouse house dan best we karma represent mouse we.'), false);\nTest.assertEquals(checkIfDannyIsHere('d/\\\\|\\\\|(\\\\)\\'/ mouse dan his you keyboard friends represent ever dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut karma beat tree beat |\\\\|ot |)a|\\\\|n`/ his |\\\\|ot and.'), true);\nTest.assertEquals(checkIfDannyIsHere('|]@n|\\\\|\u00b0/ sitting and and cooking record represent her best ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('none you represent friends tree and cut you keyboard love.'), false);\nTest.assertEquals(checkIfDannyIsHere('cooking house child child and are karma friends seen main.'), false);\nTest.assertEquals(checkIfDannyIsHere('cheers her mouse friends they |)/-\\\\(\\\\)|\\\\|y are friends cheers ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('love record friends child child cooking dan [)^/\\\\/n`/ still seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('still film should ever love |\\\\|ot D4n(\\\\)`/ mouse record cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('|]A|\\\\|/\\\\/y tree cheers cut is tree keyboard main film beat.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair tree his film tree da/\\\\/|\\\\|`/ is film ever alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('child love tree things should house main and beat |\\\\|ot.'), false);\nTest.assertEquals(checkIfDannyIsHere('none 1)@(\\\\)(\\\\)y with her seen child karma cooking alive tree.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut tree we with cheers karma you things still her.'), false);\nTest.assertEquals(checkIfDannyIsHere('character should seen keyboard things seen |]/-\\\\(\\\\)n\\'/ vine film child.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends friends |\\\\|ot represent friends |\\\\|ot sitting |]A|\\\\||\\\\|y beat love.'), true);\nTest.assertEquals(checkIfDannyIsHere('[)4/\\\\//\\\\/\\'/ things main with sitting we beat cheers is represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('are beat his chair cut mouse mouse best vine should.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard seen keyboard cut karma beat love her house is.'), false);\nTest.assertEquals(checkIfDannyIsHere('things dan and his we cooking they sitting you her.'), false);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot seen sitting computer cooking cheers still ever vine vine.'), false);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot chair we record |]a/\\\\/n\\'/ and still things film child.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut should house film film record cheers karma her dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent seen vine character tree best computer [)A/\\\\/(\\\\)`/ seen his.'), true);\nTest.assertEquals(checkIfDannyIsHere('and chair seen alive |]4|\\\\|/\\\\/\u00b0/ tree friends karma seen record.'), true);\nTest.assertEquals(checkIfDannyIsHere('child still his mouse cooking tree child they film we.'), false);\nTest.assertEquals(checkIfDannyIsHere('d@nny cut karma beat dan they his alive cheers house.'), true);\nTest.assertEquals(checkIfDannyIsHere('you character represent represent keyboard beat child cooking sitting film.'), false);\nTest.assertEquals(checkIfDannyIsHere('things mouse represent are they computer you cheers her |\\\\|ot.'), false);\nTest.assertEquals(checkIfDannyIsHere('house d^|\\\\||\\\\|\\'/ beat dan they best ever her represent mouse.'), true);\nTest.assertEquals(checkIfDannyIsHere('none vine none cheers tree cheers with character mouse main.'), false);\nTest.assertEquals(checkIfDannyIsHere('things you her and her alive they alive with should.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting beat main cheers main his is cooking |\\\\|ot film.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree are mouse mouse still character ever karma cooking should.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat should record you still sitting tree represent chair computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('you you his vine record beat sitting cut they mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('cooking you 1)^n|\\\\|`/ house still |\\\\|ot chair friends keyboard is.'), true);\nTest.assertEquals(checkIfDannyIsHere('tree sitting we is friends things chair and film should.'), false);\nTest.assertEquals(checkIfDannyIsHere('chair are we sitting are they cheers |\\\\|ot should house.'), false);\nTest.assertEquals(checkIfDannyIsHere('his vine 1)/-\\\\(\\\\)(\\\\)\u00b0/ alive tree house is represent keyboard friends.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer still represent computer still alive should karma [)a/\\\\/n\\'/ his.'), true);\nTest.assertEquals(checkIfDannyIsHere('d4|\\\\|n\\'/ child love film main tree seen vine friends |\\\\|ot.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair best represent main D@n(\\\\)\u00b0/ sitting you house ever character.'), true);\nTest.assertEquals(checkIfDannyIsHere('still is love should things his represent best ever keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent friends house none still child dan vine seen you.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer still computer [)^/\\\\/|\\\\|\\'/ mouse love alive represent computer alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('is cheers should record best best chair record sitting beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('alive chair cut cooking still seen mouse cooking tree we.'), false);\nTest.assertEquals(checkIfDannyIsHere('child represent is main represent cheers are Da/\\\\/(\\\\)\u00b0/ cooking main.'), true);\nTest.assertEquals(checkIfDannyIsHere('represent sitting love [)/-\\\\|\\\\||\\\\|y love love should alive child film.'), true);\nTest.assertEquals(checkIfDannyIsHere('character house keyboard tree |\\\\|ot and character should chair film.'), false);\nTest.assertEquals(checkIfDannyIsHere('beat best mouse vine his alive dan 1)^n/\\\\/`/ you main.'), true);\nTest.assertEquals(checkIfDannyIsHere('are is cheers ever is seen none |]/\\\\|\\\\||\\\\|\\'/ main mouse.'), true);\nTest.assertEquals(checkIfDannyIsHere('seen cut and main should dan d^nn`/ cooking best dan.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot with record you beat still 1)@/\\\\/(\\\\)y represent vine house.'), true);\nTest.assertEquals(checkIfDannyIsHere('d/\\\\|\\\\||\\\\|`/ dan tree main his computer character none cheers they.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting seen still things friends you |]a(\\\\)/\\\\/\\'/ tree karma chair.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking we and keyboard karma is still his things sitting.'), false);\nTest.assertEquals(checkIfDannyIsHere('house still chair child 1)a|\\\\||\\\\|\u00b0/ we we mouse his should.'), true);\nTest.assertEquals(checkIfDannyIsHere('love [)A(\\\\)/\\\\/\u00b0/ love seen child film tree cooking love his.'), true);\nTest.assertEquals(checkIfDannyIsHere('cut main |\\\\|ot keyboard are main his cheers still mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('we love cooking computer things karma seen computer should is.'), false);\nTest.assertEquals(checkIfDannyIsHere('represent cooking mouse her child cheers tree should film still.'), false);\nTest.assertEquals(checkIfDannyIsHere('chair Da|\\\\|(\\\\)\u00b0/ friends sitting her his her we keyboard alive.'), true);\nTest.assertEquals(checkIfDannyIsHere('film her cheers dan tree none vine cut are mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('house film beat are are her with chair film cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('vine ever friends beat vine represent are character chair |\\\\|ot.'), false);\nTest.assertEquals(checkIfDannyIsHere('is sitting sitting still seen child is karma film mouse.'), false);\nTest.assertEquals(checkIfDannyIsHere('still beat computer |\\\\|ot sitting beat d4(\\\\)/\\\\/`/ alive friends keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair character chair vine alive beat should still and with.'), false);\nTest.assertEquals(checkIfDannyIsHere('with things computer and character they best love alive beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('cheers dan cheers friends dan his and film cheers with.'), false);\nTest.assertEquals(checkIfDannyIsHere('still you they dan and |\\\\|ot main computer still ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('alive child |\\\\|ot with friends none |\\\\|ot computer is they.'), false);\nTest.assertEquals(checkIfDannyIsHere('|]^/\\\\/n\\'/ his and record you his cheers chair cheers keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting her none record 1)^|\\\\||\\\\|\\'/ child her |\\\\|ot is main.'), true);\nTest.assertEquals(checkIfDannyIsHere('mouse vine is |)/-\\\\/\\\\/ny chair |\\\\|ot should you beat seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('main ever main should computer film seen |\\\\|ot ever none.'), false);\nTest.assertEquals(checkIfDannyIsHere('none his dan chair is d@|\\\\|n`/ you character |\\\\|ot main.'), true);\nTest.assertEquals(checkIfDannyIsHere('love main dan D4nn`/ sitting vine still friends represent his.'), true);\nTest.assertEquals(checkIfDannyIsHere('things character best represent you her are chair and you.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut is seen and should is represent cheers sitting should.'), false);\nTest.assertEquals(checkIfDannyIsHere('computer his you keyboard still things cut ever cheers we.'), false);\nTest.assertEquals(checkIfDannyIsHere('record alive dan child karma D4/\\\\/n\u00b0/ character still ever sitting.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer are and cut best vine ever vine character computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('sitting film tree tree record mouse things mouse |]/\\\\|\\\\|n\\'/ keyboard.'), true);\nTest.assertEquals(checkIfDannyIsHere('beat represent dan represent cheers still we tree keyboard ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('mouse chair they character things and film D@nn`/ things with.'), true);\nTest.assertEquals(checkIfDannyIsHere('things mouse D@(\\\\)n\\'/ cheers house her they sitting you computer.'), true);\nTest.assertEquals(checkIfDannyIsHere('sitting vine love character still with cooking they |)^/\\\\/(\\\\)`/ her.'), true);\nTest.assertEquals(checkIfDannyIsHere('cooking mouse they his seen her are vine keyboard child.'), false);\nTest.assertEquals(checkIfDannyIsHere('chair seen seen are |\\\\|ot is sitting cheers they character.'), false);\nTest.assertEquals(checkIfDannyIsHere('chair should keyboard is |]^n(\\\\)y seen house character still cheers.'), true);\nTest.assertEquals(checkIfDannyIsHere('her we child |\\\\|ot mouse mouse things still karma beat.'), false);\nTest.assertEquals(checkIfDannyIsHere('|]4n|\\\\|`/ we are best alive |\\\\|ot with you keyboard is.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends d@|\\\\||\\\\|\u00b0/ things friends none things ever cheers none seen.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot chair record sitting with still love none DAnn\u00b0/ cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('is still we child they cut they friends her love.'), false);\nTest.assertEquals(checkIfDannyIsHere('cut none house best cut alive are seen |]/\\\\nn\\'/ represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('chair main d^(\\\\)/\\\\/`/ none with tree and ever dan house.'), true);\nTest.assertEquals(checkIfDannyIsHere('with you record [)A|\\\\|(\\\\)`/ |\\\\|ot represent best child cooking and.'), true);\nTest.assertEquals(checkIfDannyIsHere('[)/\\\\|\\\\||\\\\|y love house character karma seen record sitting chair her.'), true);\nTest.assertEquals(checkIfDannyIsHere('D/\\\\|\\\\||\\\\|\u00b0/ none main keyboard none vine record main mouse things.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot keyboard keyboard none represent |)/-\\\\|\\\\|n\\'/ ever dan chair represent.'), true);\nTest.assertEquals(checkIfDannyIsHere('none cheers karma and friends record and vine and you.'), false);\nTest.assertEquals(checkIfDannyIsHere('are cooking cut are they ever things love represent cheers.'), false);\nTest.assertEquals(checkIfDannyIsHere('keyboard sitting [)A|\\\\||\\\\|\\'/ house house film best beat things ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('character none character they |]/\\\\n/\\\\/y character ever represent friends his.'), true);\nTest.assertEquals(checkIfDannyIsHere('child friends and and character should dan |)/\\\\(\\\\)/\\\\/y represent karma.'), true);\nTest.assertEquals(checkIfDannyIsHere('|\\\\|ot computer with we tree should tree is record cooking.'), false);\nTest.assertEquals(checkIfDannyIsHere('his we dAn/\\\\/`/ house we you tree beat cheers cut.'), true);\nTest.assertEquals(checkIfDannyIsHere('1)4|\\\\|(\\\\)y film main are beat with |\\\\|ot with ever record.'), true);\nTest.assertEquals(checkIfDannyIsHere('vine her film is cooking best beat none vine keyboard.'), false);\nTest.assertEquals(checkIfDannyIsHere('friends his tree they main character you alive love dan.'), false);\nTest.assertEquals(checkIfDannyIsHere('his house keyboard film record are are alive his her.'), false);\nTest.assertEquals(checkIfDannyIsHere('is chair should none main child [)/\\\\(\\\\)n\\'/ her and ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('main alive still mouse seen house cheers alive things computer.'), false);\nTest.assertEquals(checkIfDannyIsHere('still |\\\\|ot [)/\\\\/\\\\/ny chair you tree still cooking with ever.'), true);\nTest.assertEquals(checkIfDannyIsHere('friends tree things things best represent love friends sitting and.'), false);\nTest.assertEquals(checkIfDannyIsHere('best things we things love are alive represent karma best.'), false);\nTest.assertEquals(checkIfDannyIsHere('child keyboard child ever vine beat and his ever ever.'), false);\nTest.assertEquals(checkIfDannyIsHere('tree is they child should D/-\\\\|\\\\||\\\\|\u00b0/ best friends chair child.'), true);\nTest.assertEquals(checkIfDannyIsHere('computer you |]anny child chair best character seen vine her.'), true);\nTest.assertEquals(checkIfDannyIsHere('still ever |)^n(\\\\)y cheers cheers computer record karma things chair.'), true);\nTest.assertEquals(checkIfDannyIsHere('mouse computer seen chair alive ever and cut are film.'), false);\nTest.assertEquals(checkIfDannyIsHere('things represent tree and character should tree d/\\\\|\\\\||\\\\|\u00b0/ cheers child.'), true);",
    "new_tests": "const checkIfDannyIsHere = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(checkIfDannyIsHere('is there dan here ?')).toEqual(false);\n        expect(checkIfDannyIsHere('and here dan ny ?')).toEqual(false);\n        expect(checkIfDannyIsHere('I found you d4nny ')).toEqual(true);\n        expect(checkIfDannyIsHere('danny is here')).toEqual(true);\n        expect(checkIfDannyIsHere('best still sitting |\\|ot cut main computer mouse film cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('cheers ever her should child record beat [)4/\\/n`/ beat alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('mouse should are mouse tree tree character record main and.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent ever computer and keyboard cooking [)^n/\\/`/ vine mouse mouse.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard 1)/-\\n(\\)`/ cheers his best with karma |\\|ot beat sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('[)A/\\/|\\|\u00b0/ beat film mouse cheers karma |\\|ot they ever none.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive her child you DAn/\\/\u00b0/ his represent his friends mouse.')).toEqual(true);\n        expect(checkIfDannyIsHere('you dan keyboard best none seen chair should house his.')).toEqual(false);\n        expect(checkIfDannyIsHere('and cheers love record sitting you record represent tree karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('love tree Da|\\||\\|y character vine mouse they computer main sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends friends sitting record dan karma are ever they his.')).toEqual(false);\n        expect(checkIfDannyIsHere('best film house we sitting we his d4(\\)ny |\\|ot seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer with friends seen vine none vine da(\\)n\u00b0/ karma best.')).toEqual(true);\n        expect(checkIfDannyIsHere('you child dan house computer [)4n/\\/\\'/ mouse seen character and.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting alive represent |\\|ot computer house computer cheers child film.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma main her child with is |\\|ot you love represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut dAn|\\|y keyboard vine sitting keyboard chair ever house beat.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine things film sitting computer tree her seen sitting keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('still represent seen record beat is film represent they alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('best house her her mouse [)An/\\/`/ computer should ever tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot |\\|ot they are record computer we represent |]/\\|\\|/\\/\u00b0/ film.')).toEqual(true);\n        expect(checkIfDannyIsHere('we cut cut record best you character we cheers his.')).toEqual(false);\n        expect(checkIfDannyIsHere('you chair friends friends main child things seen love computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen karma we his best best [)@|\\|n`/ best cut |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('dan friends alive still |\\|ot represent things is none computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer still ever d4(\\)(\\)y you his seen best are her.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent mouse we should beat love ever love best best.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends friends her vine cheers da|\\|n\u00b0/ mouse alive best cooking.')).toEqual(true);\n        expect(checkIfDannyIsHere('best |\\|ot |)/\\(\\)n`/ represent friends his his cut with tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('with love chair house is you are things with you.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan cheers his computer d^|\\|ny film we record his cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('none none we his child mouse cut house cooking mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting cooking represent vine is cheers cooking represent none tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer computer |\\|ot alive seen none [)^n/\\/y friends her his.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer computer |\\|ot character vine mouse we cooking none karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('best should represent house love love you record tree represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('record cheers |)a(\\)(\\)`/ |\\|ot cheers keyboard tree beat child seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('dan mouse beat are |\\|ot tree computer beat sitting her.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan her film we his things computer with friends main.')).toEqual(false);\n        expect(checkIfDannyIsHere('love you computer dan keyboard you tree seen vine vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan film her sitting chair and is character 1)A|\\|(\\)\\'/ dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('house mouse her film is computer none represent |\\|ot none.')).toEqual(false);\n        expect(checkIfDannyIsHere('her love film her |)/-\\(\\)ny you house you cheers house.')).toEqual(true);\n        expect(checkIfDannyIsHere('main sitting seen 1)4/\\//\\/`/ record mouse you they you film.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen alive alive tree his cut his should none things.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat we computer sitting chair things beat and love sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('film they main vine we they ever character mouse chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('are karma they film film things and we |\\|ot |\\|ot.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends mouse vine cheers alive [)a|\\|/\\/y they film is alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('ever his chair dA/\\/(\\)\u00b0/ things friends seen computer still sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('should film cut tree film is represent love mouse tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends still child still are friends main chair tree child.')).toEqual(false);\n        expect(checkIfDannyIsHere('things computer represent cheers and mouse |\\|ot represent mouse cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('cooking are character computer sitting still with 1)@(\\)n\\'/ |\\|ot karma.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot love vine best child her seen tree still computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('cooking vine still keyboard should and dan with you you.')).toEqual(false);\n        expect(checkIfDannyIsHere('none they child her cooking cooking cheers child none still.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever d@(\\)/\\/\u00b0/ things child dan dan none ever are ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat represent her tree things friends chair karma cheers sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('child main record vine cheers they love child things vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends house seen her are keyboard cut karma house dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('they beat cut keyboard are child keyboard D@n|\\|\\'/ house vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('we are seen tree cut |)^/\\/|\\|`/ keyboard computer cooking you.')).toEqual(true);\n        expect(checkIfDannyIsHere('record chair character you cut computer beat mouse they child.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting things house and are ever mouse cooking alive keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('we we cheers represent |)@/\\/|\\|`/ computer none mouse and cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive represent dan |\\|ot record represent vine |]4(\\)n\u00b0/ is keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree main still we her main still chair |)A|\\|(\\)\\'/ dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('his they house friends you is main cheers they cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('|\\|ot with and still film none alive ever child computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('we should we alive child should and his alive with.')).toEqual(false);\n        expect(checkIfDannyIsHere('still ever karma you sitting main house child computer friends.')).toEqual(false);\n        expect(checkIfDannyIsHere('none main vine represent they child keyboard d4n(\\)`/ you still.')).toEqual(true);\n        expect(checkIfDannyIsHere('child computer house love should is main still house still.')).toEqual(false);\n        expect(checkIfDannyIsHere('with dan vine mouse cut best cut computer with and.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard character represent sitting friends friends cut are |\\|ot ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('1)an/\\/y cut things her film child main love |\\|ot sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('still alive and film sitting |]/-\\n/\\/\u00b0/ is his cheers cooking.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut best love ever keyboard love and mouse they her.')).toEqual(false);\n        expect(checkIfDannyIsHere('best her sitting her seen child her cooking none her.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends mouse DAn|\\|\\'/ still are film love character seen child.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair cooking karma is keyboard computer |)@(\\)(\\)\\'/ tree child karma.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive main house none film friends with film represent represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('her main things character chair main seen dan |\\|ot cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('alive love |)/\\|\\|/\\/`/ computer cooking and with alive sitting best.')).toEqual(true);\n        expect(checkIfDannyIsHere('karma seen and beat still mouse ever best we beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting film chair represent film you vine still |\\|ot his.')).toEqual(false);\n        expect(checkIfDannyIsHere('are friends house ever film dan love cheers seen dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('you main dan cheers beat sitting |]a/\\//\\/\\'/ |\\|ot sitting record.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen still things tree character |\\|ot dan should record they.')).toEqual(false);\n        expect(checkIfDannyIsHere('main karma best is karma character we friends vine should.')).toEqual(false);\n        expect(checkIfDannyIsHere('they record record keyboard beat character house his love film.')).toEqual(false);\n        expect(checkIfDannyIsHere('should you none with seen keyboard |)/-\\(\\)(\\)\\'/ main mouse alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine karma seen sitting beat record and 1)a/\\//\\/`/ vine |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent keyboard best still none sitting things love represent mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('main |]A|\\|(\\)\u00b0/ sitting love karma child beat chair should you.')).toEqual(true);\n        expect(checkIfDannyIsHere('record record child d/-\\/\\/|\\|`/ friends cheers none friends mouse we.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer they child house things we house are are mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('|)^(\\)n`/ main keyboard love cooking best none chair character mouse.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree love friends things cheers we represent sitting mouse cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine vine dan cut represent beat record [)/-\\(\\)(\\)\\'/ cut film.')).toEqual(true);\n        expect(checkIfDannyIsHere('still character should chair tree vine main things computer karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat record tree film his cooking we mouse sitting you.')).toEqual(false);\n        expect(checkIfDannyIsHere('record we his dan ever is D/\\|\\|/\\/y represent mouse her.')).toEqual(true);\n        expect(checkIfDannyIsHere('none none seen love main character ever computer main ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('are |]/-\\/\\//\\/\\'/ we child mouse character |\\|ot ever film we.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking ever her you still are things character should love.')).toEqual(false);\n        expect(checkIfDannyIsHere('is seen chair alive dan beat and love D^n/\\/y his.')).toEqual(true);\n        expect(checkIfDannyIsHere('is none [)4n/\\/y her tree |\\|ot his are you still.')).toEqual(true);\n        expect(checkIfDannyIsHere('we love friends karma things cut computer cheers his and.')).toEqual(false);\n        expect(checkIfDannyIsHere('main represent |)A(\\)ny keyboard is karma love sitting dan |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('karma cut seen karma cheers represent keyboard are none with.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut |]a/\\/|\\|\\'/ dan vine record cooking we friends love computer.')).toEqual(true);\n        expect(checkIfDannyIsHere('karma dan computer |\\|ot best [)A(\\)(\\)y ever friends karma her.')).toEqual(true);\n        expect(checkIfDannyIsHere('house sitting main love friends should and and record house.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma and we tree karma beat cheers none best ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('his her record [)@(\\)/\\/`/ seen still are beat mouse house.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends tree you main you main computer are her you.')).toEqual(false);\n        expect(checkIfDannyIsHere('is mouse beat ever record karma D^n(\\)\u00b0/ ever represent her.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking are chair they best should friends you computer best.')).toEqual(false);\n        expect(checkIfDannyIsHere('chair should ever alive cooking we [)A/\\/|\\|\\'/ alive and vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('ever her sitting ever they his they main computer sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('cheers friends cheers dan is is character [)A|\\|/\\/y dan computer.')).toEqual(true);\n        expect(checkIfDannyIsHere('with main record main beat friends ever sitting vine friends.')).toEqual(false);\n        expect(checkIfDannyIsHere('love vine record sitting we still things still main things.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan cooking vine alive beat friends love chair vine vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut child with Dan/\\/`/ still they ever none his vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('are seen sitting we dan record 1)a|\\|/\\/\\'/ still cut tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('his best best mouse |\\|ot keyboard we vine record child.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard is friends karma Da|\\||\\|`/ love is tree sitting with.')).toEqual(true);\n        expect(checkIfDannyIsHere('none chair with alive none D^|\\|n\\'/ represent vine we you.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree film mouse beat karma |]@n(\\)`/ you you keyboard main.')).toEqual(true);\n        expect(checkIfDannyIsHere('character beat represent tree cooking still is best child keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('are sitting dan are best none vine friends cooking character.')).toEqual(false);\n        expect(checkIfDannyIsHere('should you |)/\\|\\||\\|\u00b0/ is are seen we character and they.')).toEqual(true);\n        expect(checkIfDannyIsHere('they house dan cut best character computer best should seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('and character his seen sitting none mouse karma still still.')).toEqual(false);\n        expect(checkIfDannyIsHere('alive they main none cheers dan alive her with best.')).toEqual(false);\n        expect(checkIfDannyIsHere('1)@(\\)|\\|y things is sitting his love friends vine beat we.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut karma love tree cooking sitting beat still sitting cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('|]A/\\/ny |\\|ot we main house with computer |\\|ot alive her.')).toEqual(true);\n        expect(checkIfDannyIsHere('love |]4(\\)/\\/`/ cheers chair main love film her keyboard you.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends |\\|ot computer they ever |]A/\\/|\\|y sitting none karma represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('none d/-\\/\\/|\\|y chair keyboard film karma represent film is main.')).toEqual(true);\n        expect(checkIfDannyIsHere('with and mouse none none should sitting film his keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma cut things vine her should |\\|ot computer sitting and.')).toEqual(false);\n        expect(checkIfDannyIsHere('record cut represent child cheers are seen film main chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree his is seen his cooking beat record we ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard you mouse tree |]^/\\/n`/ his seen her house house.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive should love her best karma character karma we main.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine chair is keyboard main her we with still cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent film character keyboard D^|\\|/\\/`/ represent we keyboard you record.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends is keyboard and vine house you love beat ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan represent still tree [)@n|\\|\u00b0/ things still none represent you.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends and love they you cut are karma still cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('they represent dan seen his best beat house karma tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut karma with is |\\|ot |\\|ot dan sitting is child.')).toEqual(false);\n        expect(checkIfDannyIsHere('none 1)/\\nn\u00b0/ his his they ever tree friends his and.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive |)4n/\\/\u00b0/ beat sitting should mouse none cooking is none.')).toEqual(true);\n        expect(checkIfDannyIsHere('record are are with computer and cut none represent things.')).toEqual(false);\n        expect(checkIfDannyIsHere('his friends vine alive are represent cut you cut mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer things friends still alive cheers karma friends cheers represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('cheers seen should cut mouse [)a|\\||\\|y chair computer computer should.')).toEqual(true);\n        expect(checkIfDannyIsHere('1)^n/\\/`/ sitting friends main record sitting dan chair alive her.')).toEqual(true);\n        expect(checkIfDannyIsHere('still are mouse we seen we house alive we keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('you D4(\\)|\\|\u00b0/ beat cut we keyboard his her record cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('is |\\|ot his mouse dan child and still cooking seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('we child cooking main keyboard is character |\\|ot are friends.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan we none cut |\\|ot film vine they cut beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('none still represent things chair represent you his d^n|\\|\\'/ best.')).toEqual(true);\n        expect(checkIfDannyIsHere('we represent and chair you [)/\\n(\\)\u00b0/ child ever chair character.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive seen tree is chair seen still represent |\\|ot child.')).toEqual(false);\n        expect(checkIfDannyIsHere('[)/\\/\\/|\\|`/ tree house we computer with beat his love cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('still her cut cooking main chair cut character child seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever we things should represent still they are his they.')).toEqual(false);\n        expect(checkIfDannyIsHere('best you things keyboard we best represent record cooking none.')).toEqual(false);\n        expect(checkIfDannyIsHere('and tree cooking with film vine is you ever character.')).toEqual(false);\n        expect(checkIfDannyIsHere('[)/-\\n/\\/`/ |\\|ot character record still and child keyboard seen none.')).toEqual(true);\n        expect(checkIfDannyIsHere('film cut love his sitting house are his none cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('should record chair alive are cheers vine |\\|ot dan cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('mouse love alive still child cheers they is cooking alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends house house you sitting best film sitting seen cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('still 1)A(\\)n\u00b0/ should should cheers alive film keyboard cooking tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut things is keyboard his none sitting things film computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('|\\|ot they vine best should sitting friends |]@(\\)|\\|y child you.')).toEqual(true);\n        expect(checkIfDannyIsHere('they you |\\|ot represent none ever 1)An|\\|\\'/ tree still best.')).toEqual(true);\n        expect(checkIfDannyIsHere('and character karma vine house you chair vine they keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('mouse you his still love her mouse mouse we film.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree friends child Da|\\|ny his tree his child is chair.')).toEqual(true);\n        expect(checkIfDannyIsHere('still represent is cheers dAn/\\/\u00b0/ house computer alive character tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('d^|\\|(\\)\u00b0/ |\\|ot keyboard house character represent |\\|ot seen none film.')).toEqual(true);\n        expect(checkIfDannyIsHere('|]A(\\)/\\/`/ sitting friends you tree dan her still and is.')).toEqual(true);\n        expect(checkIfDannyIsHere('child cheers child best and alive record best record sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('cooking we his cut computer cooking represent mouse chair film.')).toEqual(false);\n        expect(checkIfDannyIsHere('best we alive karma tree is character beat da(\\)/\\/y ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('child none [)A(\\)|\\|\u00b0/ mouse keyboard none is vine character computer.')).toEqual(true);\n        expect(checkIfDannyIsHere('karma computer record ever 1)/\\|\\|/\\/`/ vine you ever is cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard his seen [)A(\\)/\\/\u00b0/ with computer seen character beat still.')).toEqual(true);\n        expect(checkIfDannyIsHere('child sitting still mouse cooking mouse her none computer computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('love tree d^|\\|n\\'/ represent child still |\\|ot child they keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('things his karma alive [)^n(\\)\u00b0/ represent seen are none her.')).toEqual(true);\n        expect(checkIfDannyIsHere('we represent d4n/\\/\\'/ her film her seen |\\|ot his his.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard sitting sitting vine ever mouse best film karma sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat things we they things character friends mouse mouse karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan seen karma main cut karma his d/\\|\\||\\|\u00b0/ best record.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer film friends character best DA/\\/|\\|y cheers with things his.')).toEqual(true);\n        expect(checkIfDannyIsHere('character still should D@(\\)/\\/\\'/ cut seen sitting record with record.')).toEqual(true);\n        expect(checkIfDannyIsHere('karma and cooking her best her you karma beat none.')).toEqual(false);\n        expect(checkIfDannyIsHere('cooking love 1)/-\\/\\/n`/ his still mouse should and mouse ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot dan none film record dan computer cut vine cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('Da|\\|(\\)y record vine her computer and things vine are ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('you house cheers and none cooking we record vine cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan alive her dan child tree child we vine sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('none main alive tree none tree they should cooking love.')).toEqual(false);\n        expect(checkIfDannyIsHere('none child chair friends [)/\\(\\)|\\|`/ record you you cheers love.')).toEqual(true);\n        expect(checkIfDannyIsHere('1)an(\\)\\'/ child should his you is dan main are house.')).toEqual(true);\n        expect(checkIfDannyIsHere('best his seen alive karma keyboard are house cooking beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever cut none record keyboard none ever mouse friends is.')).toEqual(false);\n        expect(checkIfDannyIsHere('and karma seen cheers main keyboard child should 1)/\\/\\/n\\'/ keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('none cooking alive dan sitting |]^|\\||\\|`/ mouse her is friends.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine |\\|ot tree things computer still vine Dan/\\/\u00b0/ computer child.')).toEqual(true);\n        expect(checkIfDannyIsHere('are vine film beat friends ever beat love beat and.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat is DA|\\|/\\/`/ things main house vine his main cooking.')).toEqual(true);\n        expect(checkIfDannyIsHere('d@(\\)|\\|y her vine cut and and tree ever best main.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard tree D/-\\/\\//\\/\u00b0/ house computer chair represent tree dan represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking beat alive mouse mouse best film cooking is are.')).toEqual(false);\n        expect(checkIfDannyIsHere('they tree cheers |\\|ot seen should they sitting seen cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen best should love they house love dan we |\\|ot.')).toEqual(false);\n        expect(checkIfDannyIsHere('is child seen her are |)A|\\|/\\/\u00b0/ represent we are best.')).toEqual(true);\n        expect(checkIfDannyIsHere('[)^(\\)/\\/`/ should still alive you child |\\|ot we we |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('with dan her beat his |\\|ot and child D@(\\)/\\/\\'/ ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('ever tree alive D4|\\|ny none cooking and house record we.')).toEqual(true);\n        expect(checkIfDannyIsHere('character cheers alive his alive you film are karma none.')).toEqual(false);\n        expect(checkIfDannyIsHere('best friends chair friends love we |)^nn`/ should love tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('none is love should tree is computer d@|\\|/\\/y chair and.')).toEqual(true);\n        expect(checkIfDannyIsHere('cheers and vine friends is d^(\\)/\\/`/ computer her vine chair.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot mouse karma keyboard things you love child computer mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('cooking karma |\\|ot things friends represent should record keyboard character.')).toEqual(false);\n        expect(checkIfDannyIsHere('film computer cheers they child cooking is ever cut none.')).toEqual(false);\n        expect(checkIfDannyIsHere('none is record alive cooking they still we karma child.')).toEqual(false);\n        expect(checkIfDannyIsHere('things and |)^/\\/ny is love film cheers mouse is love.')).toEqual(true);\n        expect(checkIfDannyIsHere('karma best karma seen we |\\|ot cheers her karma computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('best should friends |)an/\\/\\'/ tree sitting cooking computer computer is.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent friends film vine and sitting friends |)a(\\)|\\|\\'/ chair |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('with computer child her mouse child vine best |\\|ot film.')).toEqual(false);\n        expect(checkIfDannyIsHere('his tree character should best and you we ever you.')).toEqual(false);\n        expect(checkIfDannyIsHere('things friends are best cheers they her [)A/\\/n\u00b0/ |\\|ot his.')).toEqual(true);\n        expect(checkIfDannyIsHere('dan still we keyboard karma ever house main seen computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('1)/-\\/\\/n`/ sitting cooking character dan tree and you represent alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('is beat beat child character friends record with computer vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer ever computer 1)A(\\)/\\/y computer still none things house sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('should |\\|ot dan they things |)/\\|\\|(\\)y her computer cooking karma.')).toEqual(true);\n        expect(checkIfDannyIsHere('none we main |\\|ot karma film things with we |\\|ot.')).toEqual(false);\n        expect(checkIfDannyIsHere('1)/-\\|\\|ny child child child karma they tree his friends keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('they are seen |)an|\\|y friends cut ever tree friends are.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard seen best love best 1)^n/\\/y are main seen tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('d^/\\//\\/\\'/ film none tree computer and |\\|ot main and |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('main 1)/-\\n|\\|\u00b0/ his sitting main still keyboard things none should.')).toEqual(true);\n        expect(checkIfDannyIsHere('things ever they beat house cheers seen should cut vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('cheers dan child tree cut beat |]^/\\/n`/ ever seen represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('Da(\\)/\\/`/ character film love none chair is things his mouse.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot still still |\\|ot tree character ever cut DA(\\)(\\)\\'/ seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive his keyboard mouse tree beat |\\|ot cheers his cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('love karma mouse [)/\\/\\/|\\|y and house none things cut cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('we none beat friends we beat D@/\\/ny you alive film.')).toEqual(true);\n        expect(checkIfDannyIsHere('[)/\\(\\)(\\)y beat is house her represent computer house mouse vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen best |\\|ot represent vine sitting child child best cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('things should d/\\n(\\)`/ cooking house tree and we and record.')).toEqual(true);\n        expect(checkIfDannyIsHere('is vine |)@n/\\/y house vine represent best best cheers tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard love we |)/\\n/\\/\u00b0/ with house none none cooking best.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer chair his and friends |]A|\\|/\\/\u00b0/ none friends none computer.')).toEqual(true);\n        expect(checkIfDannyIsHere('main dan alive we still sitting best cooking none child.')).toEqual(false);\n        expect(checkIfDannyIsHere('child none main dan cheers keyboard things alive |)/\\|\\|(\\)`/ they.')).toEqual(true);\n        expect(checkIfDannyIsHere('none dan D/-\\(\\)|\\|\\'/ tree we cut her main child dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('film sitting are represent chair alive they seen you represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('they alive |]a(\\)(\\)\\'/ and main vine seen his vine alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree ever character cut friends |\\|ot dan friends her tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('they tree 1)/\\/\\/|\\|\\'/ karma ever vine child tree they cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('main main is is represent sitting seen love none film.')).toEqual(false);\n        expect(checkIfDannyIsHere('cheers and mouse and is dan beat you best best.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree child computer 1)A|\\|/\\/\\'/ record computer beat house alive house.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat keyboard |\\|ot we house mouse chair |]/-\\n/\\/y represent beat.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer dAnn\u00b0/ his best her |\\|ot with still tree record.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot they we represent you computer character we chair with.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen with character house computer friends child beat with cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('is tree still |]a(\\)/\\/\\'/ none chair character ever friends dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen |\\|ot tree main none mouse chair dan things cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('none ever still keyboard his seen keyboard |\\|ot cut and.')).toEqual(false);\n        expect(checkIfDannyIsHere('should we cheers dan none cooking her film sitting record.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine with sitting cooking best none his dan film friends.')).toEqual(false);\n        expect(checkIfDannyIsHere('character cooking and computer cheers we film you vine character.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends |\\|ot his none best house [)^(\\)|\\|`/ none represent friends.')).toEqual(true);\n        expect(checkIfDannyIsHere('love represent best friends keyboard they represent his sitting character.')).toEqual(false);\n        expect(checkIfDannyIsHere('chair seen record cheers things d/-\\(\\)/\\/\\'/ character house beat cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('child and represent friends you keyboard tree house they we.')).toEqual(false);\n        expect(checkIfDannyIsHere('still karma should his d/\\(\\)(\\)y chair alive you none you.')).toEqual(true);\n        expect(checkIfDannyIsHere('ever ever best vine best ever with her friends tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan is sitting 1)^n|\\|\\'/ sitting house cooking main is child.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent cheers karma beat we d4n/\\/`/ mouse child house they.')).toEqual(true);\n        expect(checkIfDannyIsHere('cheers film her keyboard friends D^(\\)/\\/\u00b0/ best his represent child.')).toEqual(true);\n        expect(checkIfDannyIsHere('they is computer alive things mouse and main karma vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('things his vine with and d/-\\|\\||\\|`/ and alive are we.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent and sitting alive [)Ann\u00b0/ alive sitting best still cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('they her karma none friends best love is 1)a/\\/(\\)`/ love.')).toEqual(true);\n        expect(checkIfDannyIsHere('still we are tree character is da/\\/n`/ mouse ever are.')).toEqual(true);\n        expect(checkIfDannyIsHere('mouse and with dan are and you |\\|ot tree cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('with karma keyboard friends none karma main best |\\|ot vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan |\\|ot they are d/\\|\\|ny best cut ever main represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('and character house mouse cooking mouse dan child they chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard mouse represent karma computer seen best keyboard sitting child.')).toEqual(false);\n        expect(checkIfDannyIsHere('none main are beat beat are film ever vine child.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen tree computer chair none none should mouse ever with.')).toEqual(false);\n        expect(checkIfDannyIsHere('they they still dan cut they cooking mouse represent things.')).toEqual(false);\n        expect(checkIfDannyIsHere('we you sitting is alive character dan love main we.')).toEqual(false);\n        expect(checkIfDannyIsHere('best record cut mouse seen karma you represent things with.')).toEqual(false);\n        expect(checkIfDannyIsHere('alive beat child should ever house beat are his represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('should they beat represent [)^(\\)|\\|\u00b0/ her chair main cooking |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('cheers cheers keyboard vine cooking still computer things love tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent seen karma dan tree dan represent [)@|\\|/\\/\u00b0/ still dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('record cheers cooking best cut cooking still alive chair character.')).toEqual(false);\n        expect(checkIfDannyIsHere('alive |\\|ot represent sitting keyboard none da|\\|/\\/\u00b0/ character and alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('house and mouse dan her child friends friends is main.')).toEqual(false);\n        expect(checkIfDannyIsHere('they computer represent dan house her cut should record child.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree main with mouse beat his vine keyboard cooking should.')).toEqual(false);\n        expect(checkIfDannyIsHere('still cheers 1)/-\\(\\)/\\/`/ should ever house represent represent character seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent tree they best you love alive film character tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('are tree 1)4n/\\/`/ and character |\\|ot should alive sitting best.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent karma keyboard sitting is |\\|ot beat her karma alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('character chair child alive you film with vine cheers her.')).toEqual(false);\n        expect(checkIfDannyIsHere('still friends are with main mouse they |\\|ot we beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma |\\|ot you his and and sitting love they alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma main tree things they love best |]ann\u00b0/ cheers his.')).toEqual(true);\n        expect(checkIfDannyIsHere('house karma still is tree sitting chair and beat tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('record love they friends character d/-\\(\\)(\\)\u00b0/ cut karma and you.')).toEqual(true);\n        expect(checkIfDannyIsHere('|)A|\\||\\|y cooking they child cut represent character best cooking |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut beat keyboard keyboard main seen character are |)A(\\)n\\'/ alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking dan child best |]a(\\)(\\)\u00b0/ cooking ever record are main.')).toEqual(true);\n        expect(checkIfDannyIsHere('child his they and keyboard tree none best alive you.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma is d@|\\|/\\/`/ cooking chair house main computer cooking represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('is still child they dan none beat record her we.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat vine beat they his record alive karma record still.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut her her sitting mouse karma is mouse none they.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard child cut represent and things child house 1)a/\\/|\\|\u00b0/ and.')).toEqual(true);\n        expect(checkIfDannyIsHere('house house still beat ever still with dan you keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever should represent beat computer Dan/\\/`/ with record should they.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut his chair karma |]@n(\\)`/ ever dan should are dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair cheers cut sitting beat computer his [)An|\\|\\'/ keyboard we.')).toEqual(true);\n        expect(checkIfDannyIsHere('|]/-\\/\\/(\\)y they film you film are cheers mouse best child.')).toEqual(true);\n        expect(checkIfDannyIsHere('|)^n(\\)`/ his ever record record vine beat none are alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('child |\\|ot tree house |\\|ot main computer we best |\\|ot.')).toEqual(false);\n        expect(checkIfDannyIsHere('character is represent computer alive none is film child record.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut dan love |)/-\\/\\/(\\)y record karma none love is cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('|)@/\\/n\\'/ you cooking ever they still sitting friends house cooking.')).toEqual(true);\n        expect(checkIfDannyIsHere('|)/-\\(\\)|\\|`/ keyboard karma |\\|ot they you beat is things beat.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen alive cut house child house none film cheers character.')).toEqual(false);\n        expect(checkIfDannyIsHere('is |\\|ot main mouse |\\|ot alive karma you represent none.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer character child is is mouse house her record chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('character are best they they karma sitting chair |)a|\\|/\\/y seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('house you sitting sitting main still cheers love represent his.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree keyboard chair record seen character we cheers chair her.')).toEqual(false);\n        expect(checkIfDannyIsHere('and mouse vine and friends you friends cut his chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('things friends character chair ever tree beat dan record represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent should 1)/\\|\\|(\\)`/ chair best computer tree karma beat we.')).toEqual(true);\n        expect(checkIfDannyIsHere('best karma beat love Da(\\)/\\/`/ cooking vine karma are you.')).toEqual(true);\n        expect(checkIfDannyIsHere('her friends things still karma none record main cooking karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard with seen things cheers house record we d/-\\|\\|/\\/`/ main.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat represent dan chair is keyboard sitting [)a/\\/n\u00b0/ main beat.')).toEqual(true);\n        expect(checkIfDannyIsHere('record house ever his keyboard and ever his is seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends things is sitting character keyboard mouse tree we house.')).toEqual(false);\n        expect(checkIfDannyIsHere('[)/-\\|\\|/\\/y we you film are are seen friends computer things.')).toEqual(true);\n        expect(checkIfDannyIsHere('character record they her record dan cooking represent represent with.')).toEqual(false);\n        expect(checkIfDannyIsHere('still love ever karma still dan beat child ever mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('best with child cut still love keyboard represent character ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('Da/\\/n\u00b0/ they chair represent with alive you mouse still keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('you house alive none her mouse cheers friends 1)4(\\)|\\|y main.')).toEqual(true);\n        expect(checkIfDannyIsHere('child house D^/\\//\\/\u00b0/ things things sitting ever they cut tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair they her her vine dan film things keyboard none.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut computer still are you seen |]/\\(\\)(\\)\\'/ her house you.')).toEqual(true);\n        expect(checkIfDannyIsHere('record are things things is |)^nn\\'/ they main they dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('record keyboard vine ever love her computer we you chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma vine his love best and her love love computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('mouse film her are represent you friends with her things.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine cheers we still alive things character |\\|ot house child.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat dan you child best is none beat you is.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine dAn/\\/\u00b0/ sitting cut best dan his we and sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('dan cheers cut represent with chair his vine ever main.')).toEqual(false);\n        expect(checkIfDannyIsHere('house keyboard vine chair you with cooking they you cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('is you house 1)@(\\)n\u00b0/ mouse friends dan beat should should.')).toEqual(true);\n        expect(checkIfDannyIsHere('you film with |]/\\(\\)/\\/y karma computer best keyboard keyboard seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('you |]A/\\/|\\|`/ keyboard ever cut represent beat represent you main.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree cheers sitting chair mouse we cheers [)A(\\)(\\)\\'/ friends they.')).toEqual(true);\n        expect(checkIfDannyIsHere('should things sitting record |\\|ot |\\|ot house [)An(\\)y and you.')).toEqual(true);\n        expect(checkIfDannyIsHere('dan [)@/\\/n\u00b0/ her they house best chair still character things.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot seen his |\\|ot seen cooking you chair should beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('are cheers mouse [)An|\\|y tree still |\\|ot his we are.')).toEqual(true);\n        expect(checkIfDannyIsHere('love beat best represent cut his should alive and karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat beat things they character none ever cooking friends sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('alive cooking with 1)/-\\|\\||\\|\\'/ still her you her we alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot child karma is karma cheers cooking his they cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard is tree sitting character beat is cut they record.')).toEqual(false);\n        expect(checkIfDannyIsHere('best house things character love none are love still keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('things cooking beat ever vine sitting child record sitting her.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting his friends cooking his you alive is still cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('|\\|ot keyboard computer and things his film alive and record.')).toEqual(false);\n        expect(checkIfDannyIsHere('best cheers ever is character love cooking ever seen still.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever cheers chair D^(\\)|\\|\u00b0/ |\\|ot none they we with |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('record main chair with 1)@(\\)/\\/y love should chair tree main.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree ever keyboard best sitting her represent computer ever seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('1)@n|\\|`/ her friends best you alive none dan her record.')).toEqual(true);\n        expect(checkIfDannyIsHere('film are should computer are character mouse keyboard |]/-\\(\\)ny ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('are film karma beat they |)4(\\)(\\)\\'/ friends |\\|ot computer mouse.')).toEqual(true);\n        expect(checkIfDannyIsHere('they house ever film represent seen main are are cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('things you beat still computer chair d/-\\/\\/(\\)`/ child his best.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut should with film karma is they and computer friends.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine alive tree mouse with things his friends [)4/\\/|\\|`/ vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('character film main sitting chair sitting D/-\\/\\/n\u00b0/ you main none.')).toEqual(true);\n        expect(checkIfDannyIsHere('they chair house seen cooking alive you alive alive child.')).toEqual(false);\n        expect(checkIfDannyIsHere('her keyboard child none things is are his we are.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut dan you seen cheers her computer D^|\\|(\\)\\'/ |\\|ot his.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat D^/\\/|\\|`/ still ever with cooking cut main you mouse.')).toEqual(true);\n        expect(checkIfDannyIsHere('still her are her |\\|ot his should cooking beat seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('we house house and her friends [)a(\\)n\u00b0/ cooking sitting represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('best film is cut karma sitting with tree beat beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen karma we should child keyboard vine things beat is.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan you we cut still dan we should they dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree main keyboard they child best is beat friends computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent sitting ever keyboard his child 1)/-\\n(\\)\\'/ karma with seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('with record record represent should child tree [)a|\\|/\\/\\'/ you things.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine child cheers seen character are dan main tree |\\|ot.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer love with is character is seen are is mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever is cheers none ever main best his |]A/\\/n\\'/ sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair and seen we mouse karma child sitting are dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('|]/-\\|\\|ny none character tree ever her chair ever none house.')).toEqual(true);\n        expect(checkIfDannyIsHere('and record we beat things |\\|ot best dan film ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('his with none |\\|ot things karma his still still dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('best you cooking alive chair friends cooking still child dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('you are his |)/\\(\\)/\\/`/ vine things her chair |\\|ot still.')).toEqual(true);\n        expect(checkIfDannyIsHere('karma seen [)@|\\|/\\/\u00b0/ |\\|ot with film love best are vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('with is cut beat ever film is chair seen they.')).toEqual(false);\n        expect(checkIfDannyIsHere('her is dan vine should |\\|ot main still karma alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting with is |)^/\\/(\\)\\'/ things ever cooking main dan is.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer her we and cut ever 1)/-\\(\\)(\\)y record main film.')).toEqual(true);\n        expect(checkIfDannyIsHere('ever beat things cut alive and cooking should dan dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree none her love and are beat keyboard beat and.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent his character we cheers |\\|ot sitting cooking alive seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('should things D^(\\)(\\)`/ and karma karma are none best we.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends are represent friends alive sitting chair film main is.')).toEqual(false);\n        expect(checkIfDannyIsHere('character they seen love child tree character D/\\nn\\'/ they cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('mouse vine chair represent computer best dan cut still is.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat chair ever 1)/\\|\\|(\\)\u00b0/ represent child computer love are friends.')).toEqual(true);\n        expect(checkIfDannyIsHere('1)^(\\)|\\|\u00b0/ her things we alive character chair vine is love.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent should computer karma beat alive tree things her you.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan [)/-\\/\\/|\\|y ever seen her they with main keyboard main.')).toEqual(true);\n        expect(checkIfDannyIsHere('none computer and her should with sitting are cut with.')).toEqual(false);\n        expect(checkIfDannyIsHere('her character child tree house friends beat seen house seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('character his with child represent computer child record is still.')).toEqual(false);\n        expect(checkIfDannyIsHere('things friends alive are chair represent and child computer her.')).toEqual(false);\n        expect(checkIfDannyIsHere('film record should is love alive are sitting child best.')).toEqual(false);\n        expect(checkIfDannyIsHere('cooking character his represent chair character with you love you.')).toEqual(false);\n        expect(checkIfDannyIsHere('his cooking his vine best film none |\\|ot record child.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen record sitting with cut her record love cooking vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('none vine computer represent alive and computer things and still.')).toEqual(false);\n        expect(checkIfDannyIsHere('alive dan and best should should with chair dan and.')).toEqual(false);\n        expect(checkIfDannyIsHere('none computer dann\\'/ represent alive represent keyboard cut keyboard cooking.')).toEqual(true);\n        expect(checkIfDannyIsHere('things best 1)/-\\(\\)(\\)\u00b0/ seen are |\\|ot karma karma mouse they.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair house his dan cooking things they main they her.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine love and tree karma main love you his his.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma seen and seen cheers seen still cooking best none.')).toEqual(false);\n        expect(checkIfDannyIsHere('you cooking tree dA(\\)/\\/y keyboard they vine beat is none.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive we vine karma still we vine we sitting should.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent her ever [)@n/\\/\\'/ main record represent record are alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('child none his 1)@n/\\/y tree seen her should beat cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('film child |)4n/\\/y cheers |\\|ot friends none house dan his.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut record ever 1)A(\\)ny beat karma alive cooking chair they.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine and they character record keyboard |)4/\\/(\\)`/ none are vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('and film film character represent best cut ever chair love.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan represent seen keyboard seen beat they |)An(\\)y vine sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot seen should |]A|\\|(\\)`/ seen main karma represent film is.')).toEqual(true);\n        expect(checkIfDannyIsHere('record should and alive is |)An|\\|y film chair computer still.')).toEqual(true);\n        expect(checkIfDannyIsHere('D/\\/\\//\\/\u00b0/ friends ever computer with love we |\\|ot you with.')).toEqual(true);\n        expect(checkIfDannyIsHere('cheers tree beat things tree they karma record and her.')).toEqual(false);\n        expect(checkIfDannyIsHere('should mouse her things seen dan friends sitting friends keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent child and her cooking they you keyboard seen character.')).toEqual(false);\n        expect(checkIfDannyIsHere('|\\|ot tree cut represent seen cut keyboard dan friends her.')).toEqual(false);\n        expect(checkIfDannyIsHere('they and are main should we are |)^|\\|ny character ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer D^/\\/|\\|\\'/ tree computer friends chair with mouse sitting still.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard chair 1)/\\nn\\'/ we are mouse still still beat child.')).toEqual(true);\n        expect(checkIfDannyIsHere('mouse you dan|\\|y |\\|ot cheers sitting character are dan ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree seen chair should cut chair 1)@/\\/|\\|`/ record represent keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('is |\\|ot friends [)Ann`/ sitting mouse friends her you cooking.')).toEqual(true);\n        expect(checkIfDannyIsHere('her sitting keyboard should beat vine friends ever and beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat cooking love you his |)A|\\|/\\/\\'/ karma ever love tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard character character cooking |]/\\n(\\)y should cheers record sitting represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('mouse computer cheers is best friends beat mouse mouse child.')).toEqual(false);\n        expect(checkIfDannyIsHere('still cut karma alive ever friends with cheers chair ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut we karma character keyboard friends |)@n/\\/\\'/ still love and.')).toEqual(true);\n        expect(checkIfDannyIsHere('and is with house her character tree tree things with.')).toEqual(false);\n        expect(checkIfDannyIsHere('things and |\\|ot with |\\|ot seen still ever child chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('best beat house sitting house seen love [)@n|\\|`/ child and.')).toEqual(true);\n        expect(checkIfDannyIsHere('we karma mouse friends best her keyboard best chair her.')).toEqual(false);\n        expect(checkIfDannyIsHere('best karma still they cheers child beat represent her mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer mouse beat tree tree love d/-\\/\\//\\/\\'/ you they keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('her friends with seen character best dan keyboard and her.')).toEqual(false);\n        expect(checkIfDannyIsHere('with things you karma mouse beat cooking 1)^/\\/(\\)\u00b0/ tree they.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting beat with things keyboard seen tree house tree computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('film beat love child child character love you |\\|ot karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('chair karma is love cheers character we D^|\\|/\\/\\'/ cut none.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree ever house we computer cooking child vine dan house.')).toEqual(false);\n        expect(checkIfDannyIsHere('Dan|\\|\u00b0/ karma |\\|ot karma seen chair represent keyboard with with.')).toEqual(true);\n        expect(checkIfDannyIsHere('love best film sitting cut you record house they keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('best tree seen are character child D@(\\)|\\|y you ever karma.')).toEqual(true);\n        expect(checkIfDannyIsHere('his 1)A(\\)|\\|\u00b0/ record main alive chair his tree karma chair.')).toEqual(true);\n        expect(checkIfDannyIsHere('is still with they tree tree his his love house.')).toEqual(false);\n        expect(checkIfDannyIsHere('main D@|\\||\\|y main none are |\\|ot they computer you seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent things mouse house her friends best things beat keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('things keyboard computer with house child still vine film her.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut still child tree keyboard her character still D/-\\/\\/(\\)`/ |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair child record character you still with |)A|\\||\\|\u00b0/ keyboard represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('|]@n|\\|`/ vine with love beat should his seen house represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('her seen still D/\\|\\|/\\/`/ friends we alive we beat house.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer and alive mouse |\\|ot best mouse vine represent film.')).toEqual(false);\n        expect(checkIfDannyIsHere('record you love main |\\|ot cooking is represent with they.')).toEqual(false);\n        expect(checkIfDannyIsHere('we cut film his house best chair seen still karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('her and his dan seen [)^n/\\/y dan is house they.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine film none house house keyboard |\\|ot keyboard beat we.')).toEqual(false);\n        expect(checkIfDannyIsHere('we |\\|ot house character keyboard you things his seen seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('house things |\\|ot karma character ever seen seen chair main.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine record chair are cut tree |)a(\\)/\\/`/ with ever her.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine best house vine record cheers with you child seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('they her seen none mouse things karma karma sitting none.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut |]a/\\/n`/ dan cheers alive her cooking |\\|ot karma and.')).toEqual(true);\n        expect(checkIfDannyIsHere('you love things chair cooking are sitting his beat film.')).toEqual(false);\n        expect(checkIfDannyIsHere('record friends none |\\|ot 1)4nny and we friends beat film.')).toEqual(true);\n        expect(checkIfDannyIsHere('cheers computer we ever 1)A|\\|/\\/\u00b0/ child cheers they we child.')).toEqual(true);\n        expect(checkIfDannyIsHere('they beat |\\|ot cheers dan they you tree record still.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat vine is seen da/\\/ny tree sitting her with |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer main record best sitting |)A(\\)n\\'/ cheers is film alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('should cooking we film chair seen and none |]^(\\)n`/ none.')).toEqual(true);\n        expect(checkIfDannyIsHere('things character are karma her ever you cooking beat still.')).toEqual(false);\n        expect(checkIfDannyIsHere('|)a|\\|/\\/\\'/ none seen character still alive record love main represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('|]/\\|\\|/\\/`/ |\\|ot her house dan should tree karma computer love.')).toEqual(true);\n        expect(checkIfDannyIsHere('things her tree her love |\\|ot alive with cheers friends.')).toEqual(false);\n        expect(checkIfDannyIsHere('are ever friends mouse [)a|\\|(\\)`/ they ever ever we tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard should computer house character we best they with cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends best |]^n|\\|\u00b0/ they represent seen and should vine film.')).toEqual(true);\n        expect(checkIfDannyIsHere('film house cut chair with dan you love none house.')).toEqual(false);\n        expect(checkIfDannyIsHere('love things cut |]a|\\|/\\/y is friends her is cheers and.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent mouse should chair things chair cheers friends cut dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('record his karma is tree cut [)@|\\||\\|\\'/ sitting vine you.')).toEqual(true);\n        expect(checkIfDannyIsHere('love main alive d/\\(\\)(\\)`/ house child mouse cheers you child.')).toEqual(true);\n        expect(checkIfDannyIsHere('things and main dan they beat dAn(\\)y sitting computer ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent keyboard character mouse record sitting vine should with main.')).toEqual(false);\n        expect(checkIfDannyIsHere('chair with tree none |)A|\\|n\u00b0/ still record alive should house.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends mouse and cut sitting represent her none chair still.')).toEqual(false);\n        expect(checkIfDannyIsHere('mouse main seen seen main character alive with vine tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('cheers they with friends friends best tree keyboard should mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat friends her things tree main tree love film karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever you |]/-\\n(\\)y beat are ever best you main cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends best beat none none we seen house |]an(\\)\\'/ house.')).toEqual(true);\n        expect(checkIfDannyIsHere('dan things vine things cooking chair are film should chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('best 1)^/\\/ny they film sitting |\\|ot sitting character film seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('still things we love computer mouse main mouse are cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('house you is mouse child child her is |\\|ot alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('|)/\\|\\|(\\)\u00b0/ sitting none beat |\\|ot still chair main love cooking.')).toEqual(true);\n        expect(checkIfDannyIsHere('karma film still keyboard computer vine film vine child film.')).toEqual(false);\n        expect(checkIfDannyIsHere('love are you you dan house |]A(\\)|\\|`/ still seen you.')).toEqual(true);\n        expect(checkIfDannyIsHere('his sitting should child house are karma should ever with.')).toEqual(false);\n        expect(checkIfDannyIsHere('character love film beat karma sitting mouse |\\|ot ever dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('cooking D/\\(\\)|\\|y beat are still friends ever record cut keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting represent friends you vine mouse his |)/-\\/\\/(\\)y character main.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive keyboard love cooking tree and his film and keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('character dan vine with dan chair represent none things cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting main should is character best house computer cut love.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer ever you represent sitting cheers keyboard represent ever is.')).toEqual(false);\n        expect(checkIfDannyIsHere('main things seen friends we sitting sitting child is record.')).toEqual(false);\n        expect(checkIfDannyIsHere('film main his beat dA(\\)|\\|`/ things we is with child.')).toEqual(true);\n        expect(checkIfDannyIsHere('best alive mouse character keyboard film main best main keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('are karma friends cooking friends love dan his record cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('should is chair film vine her cooking 1)/\\|\\||\\|\\'/ sitting sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair child is chair are should and computer sitting is.')).toEqual(false);\n        expect(checkIfDannyIsHere('her keyboard main her cheers they love and friends computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen character should |]@nn\u00b0/ none alive is cooking beat friends.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard with record they house we ever child love best.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma cooking represent |)A|\\|/\\/y seen none his cooking alive her.')).toEqual(true);\n        expect(checkIfDannyIsHere('and keyboard things with |\\|ot vine seen child represent none.')).toEqual(false);\n        expect(checkIfDannyIsHere('D/\\/\\/(\\)\\'/ are keyboard best love represent beat his house cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking his is represent her cheers karma sitting with are.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine main dan |]@(\\)n\u00b0/ none things |\\|ot still main karma.')).toEqual(true);\n        expect(checkIfDannyIsHere('child keyboard computer chair best house they still tree they.')).toEqual(false);\n        expect(checkIfDannyIsHere('are best and his main love we her her best.')).toEqual(false);\n        expect(checkIfDannyIsHere('|\\|ot cheers main represent sitting cooking love cheers tree none.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting cut film still karma friends his keyboard beat character.')).toEqual(false);\n        expect(checkIfDannyIsHere('with record things ever love |\\|ot [)/-\\(\\)|\\|\\'/ represent tree ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('you you chair is keyboard chair |\\|ot cut computer main.')).toEqual(false);\n        expect(checkIfDannyIsHere('are and alive keyboard |)A|\\|/\\/\u00b0/ should film we cut record.')).toEqual(true);\n        expect(checkIfDannyIsHere('with film seen friends child child beat child they child.')).toEqual(false);\n        expect(checkIfDannyIsHere('house |\\|ot none tree and film main friends vine keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('main cheers keyboard character best chair 1)^|\\|(\\)`/ with karma we.')).toEqual(true);\n        expect(checkIfDannyIsHere('character tree computer keyboard should things computer beat her are.')).toEqual(false);\n        expect(checkIfDannyIsHere('best house his seen tree with represent film karma still.')).toEqual(false);\n        expect(checkIfDannyIsHere('her house chair are tree character still things computer and.')).toEqual(false);\n        expect(checkIfDannyIsHere('none keyboard computer cut |\\|ot his seen dan |]4/\\/|\\|\u00b0/ none.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends should |\\|ot [)^(\\)/\\/\\'/ his karma cheers cooking with are.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent are his karma 1)4|\\||\\|`/ keyboard main child you child.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard with house 1)/-\\/\\//\\/\u00b0/ computer they dan his tree film.')).toEqual(true);\n        expect(checkIfDannyIsHere('things still mouse they vine you cooking 1)@/\\/(\\)y keyboard his.')).toEqual(true);\n        expect(checkIfDannyIsHere('record they cooking none should her |)^n(\\)`/ tree child dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('character alive film record is seen beat child represent cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('we her house main seen 1)An/\\/`/ ever chair house her.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut ever is house seen still beat tree are mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('is represent love keyboard friends dan we [)4|\\|(\\)\u00b0/ karma and.')).toEqual(true);\n        expect(checkIfDannyIsHere('ever should seen tree his love dan chair character house.')).toEqual(false);\n        expect(checkIfDannyIsHere('cheers cut and none still 1)4n(\\)\u00b0/ best main they film.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut tree cooking mouse with beat |\\|ot love her is.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen |)a(\\)/\\/`/ represent you karma child chair child friends best.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot his friends house vine vine dan vine are house.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan record love 1)/-\\|\\|/\\/y they dan character cut keyboard tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('and vine friends beat child friends beat is dan |\\|ot.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen keyboard we her alive record child child with cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('|]A|\\|/\\/\u00b0/ child |\\|ot friends record you you none tree sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent beat film character house his none and child beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('none cooking cooking alive chair represent tree seen ever are.')).toEqual(false);\n        expect(checkIfDannyIsHere('things mouse best cooking main best child represent cooking child.')).toEqual(false);\n        expect(checkIfDannyIsHere('we her computer record character seen with character vine chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('1)4n|\\|\u00b0/ and house cut cut with they film love dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('|)an/\\/`/ karma computer film cut you ever love film we.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat chair are main they ever karma keyboard best seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('best should character things with alive ever tree and you.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine vine [)/-\\(\\)(\\)`/ ever you his film dan best cooking.')).toEqual(true);\n        expect(checkIfDannyIsHere('is with ever keyboard cooking represent we represent ever main.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen we and computer computer none represent 1)/-\\|\\||\\|`/ friends dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('dan dan keyboard chair alive ever record mouse represent none.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine love you [)@/\\/ny is |\\|ot love vine love is.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree represent film record things and karma sitting child ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('best |\\|ot still character friends D@|\\|/\\/\u00b0/ should |\\|ot things keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut keyboard mouse karma best keyboard things ever sitting alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('we cooking keyboard is things her is best is house.')).toEqual(false);\n        expect(checkIfDannyIsHere('you alive computer chair his is keyboard beat Dan|\\|`/ chair.')).toEqual(true);\n        expect(checkIfDannyIsHere('her things computer best film record computer D/\\n|\\|\\'/ ever is.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen love karma we main sitting and karma friends film.')).toEqual(false);\n        expect(checkIfDannyIsHere('and mouse dan house are his record beat mouse vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('we dA|\\|(\\)y represent and cooking cooking cooking |\\|ot with beat.')).toEqual(true);\n        expect(checkIfDannyIsHere('mouse sitting sitting love mouse |\\|ot you is things karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('you his seen film |)@|\\|n`/ love cooking beat they her.')).toEqual(true);\n        expect(checkIfDannyIsHere('ever cooking cooking you cooking film child his character you.')).toEqual(false);\n        expect(checkIfDannyIsHere('you chair we d^/\\/n\\'/ keyboard karma we are his best.')).toEqual(true);\n        expect(checkIfDannyIsHere('you her |]/\\nn\u00b0/ things vine with cooking things ever is.')).toEqual(true);\n        expect(checkIfDannyIsHere('D4|\\|(\\)\\'/ none house computer her ever chair are should friends.')).toEqual(true);\n        expect(checkIfDannyIsHere('record mouse record you and with chair sitting love chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('main love is computer film friends film D@(\\)/\\/`/ computer alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('we vine seen cooking best none film with cheers her.')).toEqual(false);\n        expect(checkIfDannyIsHere('love his cooking you [)A(\\)(\\)y friends beat seen we beat.')).toEqual(true);\n        expect(checkIfDannyIsHere('film best dAn/\\/y film vine are tree is cut things.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard computer mouse we alive his best her d/\\|\\|/\\/`/ should.')).toEqual(true);\n        expect(checkIfDannyIsHere('we cooking beat they |\\|ot dan alive still mouse things.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree computer |]@/\\/|\\|\\'/ record her cooking they still best record.')).toEqual(true);\n        expect(checkIfDannyIsHere('with you child chair computer beat |]4n(\\)`/ child record none.')).toEqual(true);\n        expect(checkIfDannyIsHere('we is tree things you and is are best love.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent friends record mouse love best and represent mouse none.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma sitting seen with we beat computer we tree still.')).toEqual(false);\n        expect(checkIfDannyIsHere('things record character alive sitting sitting cheers her record with.')).toEqual(false);\n        expect(checkIfDannyIsHere('they chair mouse main chair they mouse still D@/\\/n\\'/ house.')).toEqual(true);\n        expect(checkIfDannyIsHere('best mouse love keyboard represent record tree |\\|ot friends we.')).toEqual(false);\n        expect(checkIfDannyIsHere('record his and things mouse |]a/\\/n`/ seen mouse and should.')).toEqual(true);\n        expect(checkIfDannyIsHere('are are seen friends sitting mouse her record karma still.')).toEqual(false);\n        expect(checkIfDannyIsHere('should computer seen love with her friends mouse alive keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan|\\|y is still love best her computer none still film.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut ever love still [)^/\\/(\\)`/ should cheers computer chair chair.')).toEqual(true);\n        expect(checkIfDannyIsHere('karma child tree mouse record dan love mouse alive film.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent still dan is cut we and chair mouse alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('should [)4(\\)|\\|y film best house friends best friends keyboard and.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen things chair represent we cut house represent sitting are.')).toEqual(false);\n        expect(checkIfDannyIsHere('house house karma and friends child child vine chair chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('things is are character record chair dan computer still dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('house keyboard tree friends seen ever cut 1)A|\\|(\\)y things karma.')).toEqual(true);\n        expect(checkIfDannyIsHere('d4|\\||\\|`/ karma and ever you alive main best tree with.')).toEqual(true);\n        expect(checkIfDannyIsHere('still sitting and alive friends love things mouse |\\|ot alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('record none 1)/-\\/\\/ny mouse you alive is vine things still.')).toEqual(true);\n        expect(checkIfDannyIsHere('best chair ever record main film film best cheers should.')).toEqual(false);\n        expect(checkIfDannyIsHere('we character karma mouse represent should none house best love.')).toEqual(false);\n        expect(checkIfDannyIsHere('|\\|ot is are mouse cooking none seen 1)a(\\)n\u00b0/ alive tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('|]A/\\/|\\|\u00b0/ sitting tree with with his tree beat mouse with.')).toEqual(true);\n        expect(checkIfDannyIsHere('main mouse |\\|ot house represent vine best character ever alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('still record none vine beat cut they karma house main.')).toEqual(false);\n        expect(checkIfDannyIsHere('character seen film with alive best cheers with dan house.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat cheers karma 1)/\\(\\)|\\|`/ house main dan vine dan mouse.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking character is child with her |\\|ot |)/-\\(\\)|\\|y should keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('still alive karma should child represent should his and still.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree house cheers sitting 1)/\\/\\/|\\|\\'/ still sitting dan record with.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot tree vine D/\\n(\\)\\'/ mouse house character best cheers |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting vine cooking character you [)An(\\)`/ vine her main cooking.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent you house karma they chair karma child house with.')).toEqual(false);\n        expect(checkIfDannyIsHere('child computer keyboard beat dan tree cooking da(\\)(\\)`/ house sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut seen vine sitting 1)@|\\|/\\/`/ |\\|ot sitting mouse and still.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking best should child we house record record with beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard child |\\|ot should none tree Dan/\\/\\'/ you alive her.')).toEqual(true);\n        expect(checkIfDannyIsHere('|]@nn\u00b0/ beat we computer represent none vine his her record.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat house computer main with film love we chair represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('things cheers film main mouse alive 1)/-\\|\\|(\\)y mouse best keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer his best [)/\\/\\//\\/\u00b0/ computer cooking love seen friends karma.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends none you his [)/\\|\\||\\|\u00b0/ house they cut child friends.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking none best film is tree film his karma we.')).toEqual(false);\n        expect(checkIfDannyIsHere('and should 1)/-\\/\\/(\\)y represent and we are child tree cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('is computer his cheers love sitting his cut none none.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends record are character cooking sitting they her and ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('are we D@|\\|(\\)\u00b0/ vine cooking tree main |\\|ot character love.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard his things none friends her house should sitting cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('with vine should friends we keyboard is ever best and.')).toEqual(false);\n        expect(checkIfDannyIsHere('karma seen character character and |)4(\\)/\\/\u00b0/ sitting still cheers beat.')).toEqual(true);\n        expect(checkIfDannyIsHere('still are ever child alive karma child d/\\(\\)|\\|\u00b0/ with computer.')).toEqual(true);\n        expect(checkIfDannyIsHere('none his friends dan you house is should karma we.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends beat should main record we best tree 1)^|\\|(\\)y alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('[)a(\\)|\\|y house mouse are you tree they vine computer main.')).toEqual(true);\n        expect(checkIfDannyIsHere('and his record tree karma karma cut main should her.')).toEqual(false);\n        expect(checkIfDannyIsHere('you cut love d@/\\/n`/ film his record keyboard main sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('child child you should cheers beat karma child record things.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent cooking d/-\\nny you are should still vine with love.')).toEqual(true);\n        expect(checkIfDannyIsHere('none record [)^(\\)|\\|`/ friends with still with best |\\|ot is.')).toEqual(true);\n        expect(checkIfDannyIsHere('still child child we alive best love we cooking dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('film karma you they cut film best should cooking keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('is we keyboard child cheers D@(\\)|\\|\\'/ main love house is.')).toEqual(true);\n        expect(checkIfDannyIsHere('still mouse seen film mouse represent represent house karma represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('house are cut love mouse dan [)A|\\||\\|\u00b0/ computer and child.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive is chair tree ever dan her friends d4n(\\)`/ cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('his child seen cut are dan is and represent mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine 1)/-\\/\\/n`/ seen still mouse chair none computer none dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting |\\|ot tree seen with dan d@n/\\/\u00b0/ with vine cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('and his cooking keyboard seen friends still are mouse sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('things sitting karma ever record vine computer Da/\\/n`/ things character.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair dan represent record are tree love alive you house.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree vine film should house child and tree main sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent chair and his none and should record none with.')).toEqual(false);\n        expect(checkIfDannyIsHere('is computer chair should alive karma karma dan cheers character.')).toEqual(false);\n        expect(checkIfDannyIsHere('with record they character cooking none is tree mouse cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('child alive dan sitting main sitting main you computer and.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting represent main vine love [)4|\\|/\\/`/ main film cheers alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen represent her and cut house friends film keyboard cut.')).toEqual(false);\n        expect(checkIfDannyIsHere('is film cut her seen with child alive tree is.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever tree cut are vine ever film D^n/\\/`/ is are.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree main cooking film they things her |)/-\\/\\/n\u00b0/ still character.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat represent tree vine still film love and mouse alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan karma dan beat and tree [)4/\\/n\\'/ we vine house.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair seen and tree and dan DA|\\|/\\/\u00b0/ main sitting child.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat is love film seen none karma best dan love.')).toEqual(false);\n        expect(checkIfDannyIsHere('still are child beat computer cheers is ever her house.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut love record cut beat film they |)4(\\)|\\|\u00b0/ are are.')).toEqual(true);\n        expect(checkIfDannyIsHere('main they things chair is you |)/\\n|\\|y you with love.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting film house karma cooking chair with we seen things.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent main cooking computer her main his friends mouse are.')).toEqual(false);\n        expect(checkIfDannyIsHere('Dan|\\|`/ ever beat tree best mouse keyboard you computer represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair mouse film mouse house record still we karma his.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree child with and things film dan and you you.')).toEqual(false);\n        expect(checkIfDannyIsHere('with cut main character love his none are computer best.')).toEqual(false);\n        expect(checkIfDannyIsHere('is record represent keyboard tree keyboard dan [)a/\\/|\\|\u00b0/ seen and.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat D4/\\/|\\|\\'/ best vine house seen her tree sitting cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive none love his record mouse main things keyboard chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('with should still ever seen |]@(\\)n\u00b0/ mouse best is vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('they things things and |\\|ot child should represent cooking |\\|ot.')).toEqual(false);\n        expect(checkIfDannyIsHere('child things you seen we mouse none cut dan alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('film karma karma we main cut |]/\\|\\|ny represent house none.')).toEqual(true);\n        expect(checkIfDannyIsHere('with film should none represent cooking love record d/-\\|\\|/\\/\u00b0/ tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('his child child with should cheers tree cut none beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('mouse love [)A|\\|n`/ chair love vine are with her cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut dan seen friends keyboard is record are karma record.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut main and chair friends love mouse things record love.')).toEqual(false);\n        expect(checkIfDannyIsHere('mouse are they love ever main they his 1)a|\\|/\\/\u00b0/ cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot mouse 1)a/\\/n\\'/ cooking her best beat chair and alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent vine with with her you dan should tree his.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting with you sitting dan love cheers none best friends.')).toEqual(false);\n        expect(checkIfDannyIsHere('seen still alive things cut represent mouse |\\|ot film tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('|\\|ot his friends friends vine ever |\\|ot chair computer computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent and mouse film computer alive none best mouse friends.')).toEqual(false);\n        expect(checkIfDannyIsHere('is |\\|ot are they mouse main character cut none cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer mouse her things seen [)a(\\)(\\)`/ you none vine love.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut things ever with |)/\\|\\||\\|`/ is dan chair we cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('you child house still is film chair D/\\/\\//\\/y love are.')).toEqual(true);\n        expect(checkIfDannyIsHere('you alive alive [)@n(\\)`/ computer character things main film we.')).toEqual(true);\n        expect(checkIfDannyIsHere('alive house cooking seen and and things film we character.')).toEqual(false);\n        expect(checkIfDannyIsHere('character things none with 1)an/\\/\\'/ beat things love none main.')).toEqual(true);\n        expect(checkIfDannyIsHere('and d^/\\/n\\'/ cheers alive with mouse alive character record still.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair computer |]An|\\|y best his mouse none |\\|ot are keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('house represent house are we d4/\\/(\\)`/ computer her you beat.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot house beat ever dan cut sitting her they film.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat with film main alive they should tree chair tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('things record karma |\\|ot house mouse cooking cooking dan chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('love house |\\|ot main chair vine is character his is.')).toEqual(false);\n        expect(checkIfDannyIsHere('main |)a|\\|/\\/`/ should cooking cooking main love we cooking computer.')).toEqual(true);\n        expect(checkIfDannyIsHere('with things best best computer are [)/\\(\\)|\\|`/ main cooking cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer |\\|ot house friends house none karma keyboard best character.')).toEqual(false);\n        expect(checkIfDannyIsHere('with cut and his |\\|ot and |]@n/\\/`/ keyboard his still.')).toEqual(true);\n        expect(checkIfDannyIsHere('film represent mouse house love |\\|ot cheers ever |)^/\\/n`/ vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('is DA(\\)|\\|\u00b0/ love his house and is ever house cooking.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent is sitting with sitting mouse mouse her cooking keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('are best tree ever his tree friends house friends best.')).toEqual(false);\n        expect(checkIfDannyIsHere('his cheers cheers are cheers record we ever friends seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('her are 1)4n|\\|\u00b0/ is main none house cut cheers chair.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot cheers we vine you is keyboard main |\\|ot alive.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut d/\\(\\)|\\|\u00b0/ are tree character film cooking should is none.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting with cooking should best film keyboard tree computer represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('main with cooking [)4n|\\|`/ still main alive still child we.')).toEqual(true);\n        expect(checkIfDannyIsHere('child karma none |)@|\\|ny beat mouse with cooking |\\|ot film.')).toEqual(true);\n        expect(checkIfDannyIsHere('house character mouse character they things is tree is friends.')).toEqual(false);\n        expect(checkIfDannyIsHere('should house you cut vine ever are best house represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan represent house you cut character main computer ever chair.')).toEqual(false);\n        expect(checkIfDannyIsHere('are sitting main are karma should cut best main none.')).toEqual(false);\n        expect(checkIfDannyIsHere('you child alive is main film chair computer things sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('cooking with Da/\\/n\\'/ karma friends love and and friends film.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat none |\\|ot best and his chair love child you.')).toEqual(false);\n        expect(checkIfDannyIsHere('things karma with with |)@/\\//\\/\u00b0/ seen should with tree things.')).toEqual(true);\n        expect(checkIfDannyIsHere('ever tree |\\|ot friends dan D4nny with alive is |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat house computer computer keyboard they love still film friends.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer are |\\|ot record computer house his you |]/\\|\\|/\\/\\'/ is.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting tree house child represent cut beat love are none.')).toEqual(false);\n        expect(checkIfDannyIsHere('dan chair tree cheers chair are love you D/-\\|\\|/\\/\\'/ |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('record film still is sitting we you his cut tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('and vine mouse record computer should with dan house represent.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever film cheers best cheers with character with are character.')).toEqual(false);\n        expect(checkIfDannyIsHere('her represent beat 1)A(\\)n\\'/ computer karma tree seen beat keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('we cheers still record and karma is represent keyboard tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever film ever D^n|\\|y alive are film vine cooking cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('love karma keyboard his none cooking main D^|\\|(\\)\\'/ and should.')).toEqual(true);\n        expect(checkIfDannyIsHere('dan love are tree friends main house tree cheers cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard tree should with seen sitting |\\|ot and his karma.')).toEqual(false);\n        expect(checkIfDannyIsHere('D/-\\n|\\|\\'/ beat vine and cut alive cut with film vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine cheers keyboard represent we you should and none film.')).toEqual(false);\n        expect(checkIfDannyIsHere('should film karma cooking best D/\\|\\|/\\/y record beat vine represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('you child best friends vine and his cheers things beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('character you cheers cooking his film seen his alive record.')).toEqual(false);\n        expect(checkIfDannyIsHere('|)4n/\\/`/ cheers still should things they still her his is.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree tree love things cut his her record mouse you.')).toEqual(false);\n        expect(checkIfDannyIsHere('mouse cheers computer best keyboard main d4n(\\)y vine are with.')).toEqual(true);\n        expect(checkIfDannyIsHere('keyboard best tree represent karma none still love keyboard his.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree cheers mouse things chair sitting film cheers |\\|ot beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('ever best |\\|ot none represent ever cheers |]a(\\)n\u00b0/ vine beat.')).toEqual(true);\n        expect(checkIfDannyIsHere('best represent still computer they d/-\\/\\/|\\|\u00b0/ vine sitting sitting are.')).toEqual(true);\n        expect(checkIfDannyIsHere('|)/-\\n(\\)\\'/ |\\|ot dan house dan with is alive we alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking mouse things dan dan represent with child house is.')).toEqual(false);\n        expect(checkIfDannyIsHere('is should still character child love d@n|\\|\u00b0/ things should sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot things |)4n(\\)\u00b0/ mouse mouse none you record seen record.')).toEqual(true);\n        expect(checkIfDannyIsHere('are is with are ever dan best best dan are.')).toEqual(false);\n        expect(checkIfDannyIsHere('are cooking chair chair things and his child child dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('best seen tree chair still friends character sitting cooking cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat character house things they d4n|\\|`/ we should character main.')).toEqual(true);\n        expect(checkIfDannyIsHere('d4nn\\'/ sitting still chair karma they none cut they tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('record cheers cut tree things karma friends dan still beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('we karma sitting [)@|\\||\\|y and seen house her cut |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('record is her represent cut beat friends best main keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('record ever |\\|ot none tree chair best beat [)An(\\)y character.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat love they 1)/-\\(\\)|\\|y should dan cooking her should film.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting |\\|ot and mouse cheers his love |]an/\\/`/ are none.')).toEqual(true);\n        expect(checkIfDannyIsHere('is film friends you should best we |\\|ot things seen.')).toEqual(false);\n        expect(checkIfDannyIsHere('with character dan chair d/\\/\\/|\\|y chair alive is |\\|ot cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine house dan child film cheers cooking friends chair mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('still main is and still they |\\|ot ever computer record.')).toEqual(false);\n        expect(checkIfDannyIsHere('things things [)@|\\|/\\/\\'/ vine with film cooking things karma her.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen cooking 1)4(\\)n`/ beat is main mouse cheers sitting is.')).toEqual(true);\n        expect(checkIfDannyIsHere('they character tree DA|\\|n`/ sitting none we with cheers love.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair are |\\|ot cheers none her you 1)/-\\|\\|/\\/`/ we seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('film her character seen friends beat seen dan cheers love.')).toEqual(false);\n        expect(checkIfDannyIsHere('love seen computer friends DA/\\/(\\)\\'/ tree his sitting love things.')).toEqual(true);\n        expect(checkIfDannyIsHere('dan |)^|\\|/\\/y vine they sitting his main none her should.')).toEqual(true);\n        expect(checkIfDannyIsHere('love you cut alive cheers keyboard are things computer tree.')).toEqual(false);\n        expect(checkIfDannyIsHere('are his still and main you mouse his we cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('should beat |\\|ot house still beat should computer still film.')).toEqual(false);\n        expect(checkIfDannyIsHere('we record character none cooking you house tree with ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('best Da|\\||\\|\\'/ are house dan his sitting character child dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen is you tree film with computer none house ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('is things tree his house none cheers [)/-\\/\\/|\\|`/ you with.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair friends dan d@/\\/n`/ best karma seen sitting none vine.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine is beat child seen ever cut none ever are.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree d/\\n/\\/\u00b0/ karma we record karma should main sitting we.')).toEqual(true);\n        expect(checkIfDannyIsHere('ever is record [)@n/\\/\\'/ chair mouse tree chair love karma.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends computer alive main karma alive dan main seen still.')).toEqual(false);\n        expect(checkIfDannyIsHere('love karma they love are they are with beat vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('you mouse house dan best we karma represent mouse we.')).toEqual(false);\n        expect(checkIfDannyIsHere('d/\\|\\|(\\)\\'/ mouse dan his you keyboard friends represent ever dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut karma beat tree beat |\\|ot |)a|\\|n`/ his |\\|ot and.')).toEqual(true);\n        expect(checkIfDannyIsHere('|]@n|\\|\u00b0/ sitting and and cooking record represent her best ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('none you represent friends tree and cut you keyboard love.')).toEqual(false);\n        expect(checkIfDannyIsHere('cooking house child child and are karma friends seen main.')).toEqual(false);\n        expect(checkIfDannyIsHere('cheers her mouse friends they |)/-\\(\\)|\\|y are friends cheers ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('love record friends child child cooking dan [)^/\\/n`/ still seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('still film should ever love |\\|ot D4n(\\)`/ mouse record cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('|]A|\\|/\\/y tree cheers cut is tree keyboard main film beat.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair tree his film tree da/\\/|\\|`/ is film ever alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('child love tree things should house main and beat |\\|ot.')).toEqual(false);\n        expect(checkIfDannyIsHere('none 1)@(\\)(\\)y with her seen child karma cooking alive tree.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut tree we with cheers karma you things still her.')).toEqual(false);\n        expect(checkIfDannyIsHere('character should seen keyboard things seen |]/-\\(\\)n\\'/ vine film child.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends friends |\\|ot represent friends |\\|ot sitting |]A|\\||\\|y beat love.')).toEqual(true);\n        expect(checkIfDannyIsHere('[)4/\\//\\/\\'/ things main with sitting we beat cheers is represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('are beat his chair cut mouse mouse best vine should.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard seen keyboard cut karma beat love her house is.')).toEqual(false);\n        expect(checkIfDannyIsHere('things dan and his we cooking they sitting you her.')).toEqual(false);\n        expect(checkIfDannyIsHere('|\\|ot seen sitting computer cooking cheers still ever vine vine.')).toEqual(false);\n        expect(checkIfDannyIsHere('|\\|ot chair we record |]a/\\/n\\'/ and still things film child.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut should house film film record cheers karma her dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent seen vine character tree best computer [)A/\\/(\\)`/ seen his.')).toEqual(true);\n        expect(checkIfDannyIsHere('and chair seen alive |]4|\\|/\\/\u00b0/ tree friends karma seen record.')).toEqual(true);\n        expect(checkIfDannyIsHere('child still his mouse cooking tree child they film we.')).toEqual(false);\n        expect(checkIfDannyIsHere('d@nny cut karma beat dan they his alive cheers house.')).toEqual(true);\n        expect(checkIfDannyIsHere('you character represent represent keyboard beat child cooking sitting film.')).toEqual(false);\n        expect(checkIfDannyIsHere('things mouse represent are they computer you cheers her |\\|ot.')).toEqual(false);\n        expect(checkIfDannyIsHere('house d^|\\||\\|\\'/ beat dan they best ever her represent mouse.')).toEqual(true);\n        expect(checkIfDannyIsHere('none vine none cheers tree cheers with character mouse main.')).toEqual(false);\n        expect(checkIfDannyIsHere('things you her and her alive they alive with should.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting beat main cheers main his is cooking |\\|ot film.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree are mouse mouse still character ever karma cooking should.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat should record you still sitting tree represent chair computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('you you his vine record beat sitting cut they mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('cooking you 1)^n|\\|`/ house still |\\|ot chair friends keyboard is.')).toEqual(true);\n        expect(checkIfDannyIsHere('tree sitting we is friends things chair and film should.')).toEqual(false);\n        expect(checkIfDannyIsHere('chair are we sitting are they cheers |\\|ot should house.')).toEqual(false);\n        expect(checkIfDannyIsHere('his vine 1)/-\\(\\)(\\)\u00b0/ alive tree house is represent keyboard friends.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer still represent computer still alive should karma [)a/\\/n\\'/ his.')).toEqual(true);\n        expect(checkIfDannyIsHere('d4|\\|n\\'/ child love film main tree seen vine friends |\\|ot.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair best represent main D@n(\\)\u00b0/ sitting you house ever character.')).toEqual(true);\n        expect(checkIfDannyIsHere('still is love should things his represent best ever keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent friends house none still child dan vine seen you.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer still computer [)^/\\/|\\|\\'/ mouse love alive represent computer alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('is cheers should record best best chair record sitting beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('alive chair cut cooking still seen mouse cooking tree we.')).toEqual(false);\n        expect(checkIfDannyIsHere('child represent is main represent cheers are Da/\\/(\\)\u00b0/ cooking main.')).toEqual(true);\n        expect(checkIfDannyIsHere('represent sitting love [)/-\\|\\||\\|y love love should alive child film.')).toEqual(true);\n        expect(checkIfDannyIsHere('character house keyboard tree |\\|ot and character should chair film.')).toEqual(false);\n        expect(checkIfDannyIsHere('beat best mouse vine his alive dan 1)^n/\\/`/ you main.')).toEqual(true);\n        expect(checkIfDannyIsHere('are is cheers ever is seen none |]/\\|\\||\\|\\'/ main mouse.')).toEqual(true);\n        expect(checkIfDannyIsHere('seen cut and main should dan d^nn`/ cooking best dan.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot with record you beat still 1)@/\\/(\\)y represent vine house.')).toEqual(true);\n        expect(checkIfDannyIsHere('d/\\|\\||\\|`/ dan tree main his computer character none cheers they.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting seen still things friends you |]a(\\)/\\/\\'/ tree karma chair.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking we and keyboard karma is still his things sitting.')).toEqual(false);\n        expect(checkIfDannyIsHere('house still chair child 1)a|\\||\\|\u00b0/ we we mouse his should.')).toEqual(true);\n        expect(checkIfDannyIsHere('love [)A(\\)/\\/\u00b0/ love seen child film tree cooking love his.')).toEqual(true);\n        expect(checkIfDannyIsHere('cut main |\\|ot keyboard are main his cheers still mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('we love cooking computer things karma seen computer should is.')).toEqual(false);\n        expect(checkIfDannyIsHere('represent cooking mouse her child cheers tree should film still.')).toEqual(false);\n        expect(checkIfDannyIsHere('chair Da|\\|(\\)\u00b0/ friends sitting her his her we keyboard alive.')).toEqual(true);\n        expect(checkIfDannyIsHere('film her cheers dan tree none vine cut are mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('house film beat are are her with chair film cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('vine ever friends beat vine represent are character chair |\\|ot.')).toEqual(false);\n        expect(checkIfDannyIsHere('is sitting sitting still seen child is karma film mouse.')).toEqual(false);\n        expect(checkIfDannyIsHere('still beat computer |\\|ot sitting beat d4(\\)/\\/`/ alive friends keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair character chair vine alive beat should still and with.')).toEqual(false);\n        expect(checkIfDannyIsHere('with things computer and character they best love alive beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('cheers dan cheers friends dan his and film cheers with.')).toEqual(false);\n        expect(checkIfDannyIsHere('still you they dan and |\\|ot main computer still ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('alive child |\\|ot with friends none |\\|ot computer is they.')).toEqual(false);\n        expect(checkIfDannyIsHere('|]^/\\/n\\'/ his and record you his cheers chair cheers keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting her none record 1)^|\\||\\|\\'/ child her |\\|ot is main.')).toEqual(true);\n        expect(checkIfDannyIsHere('mouse vine is |)/-\\/\\/ny chair |\\|ot should you beat seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('main ever main should computer film seen |\\|ot ever none.')).toEqual(false);\n        expect(checkIfDannyIsHere('none his dan chair is d@|\\|n`/ you character |\\|ot main.')).toEqual(true);\n        expect(checkIfDannyIsHere('love main dan D4nn`/ sitting vine still friends represent his.')).toEqual(true);\n        expect(checkIfDannyIsHere('things character best represent you her are chair and you.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut is seen and should is represent cheers sitting should.')).toEqual(false);\n        expect(checkIfDannyIsHere('computer his you keyboard still things cut ever cheers we.')).toEqual(false);\n        expect(checkIfDannyIsHere('record alive dan child karma D4/\\/n\u00b0/ character still ever sitting.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer are and cut best vine ever vine character computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('sitting film tree tree record mouse things mouse |]/\\|\\|n\\'/ keyboard.')).toEqual(true);\n        expect(checkIfDannyIsHere('beat represent dan represent cheers still we tree keyboard ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('mouse chair they character things and film D@nn`/ things with.')).toEqual(true);\n        expect(checkIfDannyIsHere('things mouse D@(\\)n\\'/ cheers house her they sitting you computer.')).toEqual(true);\n        expect(checkIfDannyIsHere('sitting vine love character still with cooking they |)^/\\/(\\)`/ her.')).toEqual(true);\n        expect(checkIfDannyIsHere('cooking mouse they his seen her are vine keyboard child.')).toEqual(false);\n        expect(checkIfDannyIsHere('chair seen seen are |\\|ot is sitting cheers they character.')).toEqual(false);\n        expect(checkIfDannyIsHere('chair should keyboard is |]^n(\\)y seen house character still cheers.')).toEqual(true);\n        expect(checkIfDannyIsHere('her we child |\\|ot mouse mouse things still karma beat.')).toEqual(false);\n        expect(checkIfDannyIsHere('|]4n|\\|`/ we are best alive |\\|ot with you keyboard is.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends d@|\\||\\|\u00b0/ things friends none things ever cheers none seen.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot chair record sitting with still love none DAnn\u00b0/ cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('is still we child they cut they friends her love.')).toEqual(false);\n        expect(checkIfDannyIsHere('cut none house best cut alive are seen |]/\\nn\\'/ represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('chair main d^(\\)/\\/`/ none with tree and ever dan house.')).toEqual(true);\n        expect(checkIfDannyIsHere('with you record [)A|\\|(\\)`/ |\\|ot represent best child cooking and.')).toEqual(true);\n        expect(checkIfDannyIsHere('[)/\\|\\||\\|y love house character karma seen record sitting chair her.')).toEqual(true);\n        expect(checkIfDannyIsHere('D/\\|\\||\\|\u00b0/ none main keyboard none vine record main mouse things.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot keyboard keyboard none represent |)/-\\|\\|n\\'/ ever dan chair represent.')).toEqual(true);\n        expect(checkIfDannyIsHere('none cheers karma and friends record and vine and you.')).toEqual(false);\n        expect(checkIfDannyIsHere('are cooking cut are they ever things love represent cheers.')).toEqual(false);\n        expect(checkIfDannyIsHere('keyboard sitting [)A|\\||\\|\\'/ house house film best beat things ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('character none character they |]/\\n/\\/y character ever represent friends his.')).toEqual(true);\n        expect(checkIfDannyIsHere('child friends and and character should dan |)/\\(\\)/\\/y represent karma.')).toEqual(true);\n        expect(checkIfDannyIsHere('|\\|ot computer with we tree should tree is record cooking.')).toEqual(false);\n        expect(checkIfDannyIsHere('his we dAn/\\/`/ house we you tree beat cheers cut.')).toEqual(true);\n        expect(checkIfDannyIsHere('1)4|\\|(\\)y film main are beat with |\\|ot with ever record.')).toEqual(true);\n        expect(checkIfDannyIsHere('vine her film is cooking best beat none vine keyboard.')).toEqual(false);\n        expect(checkIfDannyIsHere('friends his tree they main character you alive love dan.')).toEqual(false);\n        expect(checkIfDannyIsHere('his house keyboard film record are are alive his her.')).toEqual(false);\n        expect(checkIfDannyIsHere('is chair should none main child [)/\\(\\)n\\'/ her and ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('main alive still mouse seen house cheers alive things computer.')).toEqual(false);\n        expect(checkIfDannyIsHere('still |\\|ot [)/\\/\\/ny chair you tree still cooking with ever.')).toEqual(true);\n        expect(checkIfDannyIsHere('friends tree things things best represent love friends sitting and.')).toEqual(false);\n        expect(checkIfDannyIsHere('best things we things love are alive represent karma best.')).toEqual(false);\n        expect(checkIfDannyIsHere('child keyboard child ever vine beat and his ever ever.')).toEqual(false);\n        expect(checkIfDannyIsHere('tree is they child should D/-\\|\\||\\|\u00b0/ best friends chair child.')).toEqual(true);\n        expect(checkIfDannyIsHere('computer you |]anny child chair best character seen vine her.')).toEqual(true);\n        expect(checkIfDannyIsHere('still ever |)^n(\\)y cheers cheers computer record karma things chair.')).toEqual(true);\n        expect(checkIfDannyIsHere('mouse computer seen chair alive ever and cut are film.')).toEqual(false);\n        expect(checkIfDannyIsHere('things represent tree and character should tree d/\\|\\||\\|\u00b0/ cheers child.')).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function missingLetter(arr) {\n  \n}",
    "new_code": "function missingLetter(arr) {\n  // Your code here.\n}\n\nmodule.exports = missingLetter;\n",
    "original_tests": "Test.assertEquals(missingLetter([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\"]), \"d\");\nTest.assertEquals(missingLetter([\"O\", \"Q\", \"R\", \"S\"]), \"P\");\nTest.assertEquals(missingLetter([\"t\", \"u\", \"v\", \"w\", \"x\", \"z\"]), \"y\");\nTest.assertEquals(missingLetter([\"m\", \"o\"]), \"n\");\nTest.assertEquals(missingLetter([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]), \"i\");\nTest.assertEquals(missingLetter([\"q\", \"s\", \"t\"]), \"r\");\nTest.assertEquals(missingLetter([\"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"k\", \"l\", \"m\", \"n\"]), \"j\");\nTest.assertEquals(missingLetter([\"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"m\", \"n\", \"o\", \"p\"]), \"l\");\nTest.assertEquals(missingLetter([\"t\", \"u\", \"w\", \"x\"]), \"v\");\nTest.assertEquals(missingLetter([\"B\", \"D\"]), \"C\");",
    "new_tests": "const missingLetter = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(missingLetter(['a', 'b', 'c', 'e', 'f', 'g'])).toEqual('d');\n        expect(missingLetter(['O', 'Q', 'R', 'S'])).toEqual('P');\n        expect(missingLetter(['t', 'u', 'v', 'w', 'x', 'z'])).toEqual('y');\n        expect(missingLetter(['m', 'o'])).toEqual('n');\n        expect(missingLetter(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])).toEqual('i');\n        expect(missingLetter(['q', 's', 't'])).toEqual('r');\n        expect(missingLetter(['c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n'])).toEqual('j');\n        expect(missingLetter(['e', 'f', 'g', 'h', 'i', 'j', 'k', 'm', 'n', 'o', 'p'])).toEqual('l');\n        expect(missingLetter(['t', 'u', 'w', 'x'])).toEqual('v');\n        expect(missingLetter(['B', 'D'])).toEqual('C');\n    });\n});\n"
  },
  {
    "original_code": "function findShortestWords(str) {\n  \n}",
    "new_code": "function findShortestWords(str) {\n  // Your code here.\n}\n\nmodule.exports = findShortestWords;\n",
    "original_tests": "Test.assertSimilar(findShortestWords(\"Strive not to be a success, but rather to be of value.\"), ['a'])\nTest.assertSimilar(findShortestWords(\"You miss 100% of the shots you don\u2019t take.\"), ['of'])\nTest.assertSimilar(findShortestWords(\"Life is what happens to you while you\u2019re busy making other plans.\"), ['is', 'to'])\nTest.assertSimilar(findShortestWords(\"We become what we think about.\"), ['we', 'we'])\nTest.assertSimilar(findShortestWords(\"The most common way people give up their power is by thinking they don\u2019t have any.\"), ['by', 'is', 'up'])\nTest.assertSimilar(findShortestWords(\"The best time to plant the tree was 20 years ago. The second best time is now.\"), ['is', 'to'])\nTest.assertSimilar(findShortestWords(\"Your time is limited, so don\u2019t waste it living someone else\u2019s life.\"), ['is', 'it', 'so'])\nTest.assertSimilar(findShortestWords(\"You can never cross the ocean until you have the courage to lose sight of the shore.\"), ['of', 'to'])\nTest.assertSimilar(findShortestWords(\"There is only one way to avoid criticism: do nothing, say nothing, and be nothing.\"), ['be', 'do', 'is', 'to' ])\nTest.assertSimilar(findShortestWords(\"The only person you are destined to become is the person you decide to be.\"), ['be', 'is', 'to', 'to'])\nTest.assertSimilar(findShortestWords(\"What lies behind us and what lies before us are tiny matters compared to what lies within us.\"), ['to', 'us', 'us', 'us'])\nTest.assertSimilar(findShortestWords(\"If you are depressed you are living in the past. If you are anxious you are living in the future. If you are at peace you are living in the present.\"), ['at', 'if', 'if', 'if', 'in', 'in', 'in'])\nTest.assertSimilar(findShortestWords(\"Happiness depends upon ourselves.\"), ['upon'])\nTest.assertSimilar(findShortestWords(\"Chase two rabbits, catch none.\"), ['two'])\nTest.assertSimilar(findShortestWords(\"Only the truth of who you are, if realized, will set you free.\"), ['if', 'of'])\nTest.assertSimilar(findShortestWords(\"If you end up with a boring miserable life because you listened to your parents, your teacher, your priest, or some guy on television, then you deserve it.\"), ['a'])\nTest.assertSimilar(findShortestWords(\"To accomplish great things, we must not only act, but also dream; not only plan, but also believe.\"), ['to', 'we'])\nTest.assertSimilar(findShortestWords(\"A tiger doesn\u2019t lose sleep over the opinion of sheep.\"), ['a'])\nTest.assertSimilar(findShortestWords(\"Kindness is a language that the deaf can hear and the blind can see.\"), ['a'])\nTest.assertSimilar(findShortestWords(\"Being realistic is the most common path to mediocrity.\"), ['is', 'to'])\nTest.assertSimilar(findShortestWords(\"Bravery means finding something more important than fear.\"), ['fear', 'more', 'than'])\nTest.assertSimilar(findShortestWords(\"Can you imagine what I would do if I could do all I can?\"), ['i', 'i', 'i'])\nTest.assertSimilar(findShortestWords(\"Believe you can and you\u2019re halfway there.\"), ['and', 'can', 'you'])\nTest.assertSimilar(findShortestWords(\"Remember that happiness is a way of travel, not a destination.\"), ['a', 'a'])\nTest.assertSimilar(findShortestWords(\"May the best day of your past be the worst day of your future.\"), ['be', 'of', 'of'])",
    "new_tests": "const findShortestWords = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(findShortestWords('Strive not to be a success, but rather to be of value.')).toEqual(['a']);\n        expect(findShortestWords('You miss 100% of the shots you don\u2019t take.')).toEqual(['of']);\n        expect(findShortestWords('Life is what happens to you while you\u2019re busy making other plans.')).toEqual(['is', 'to']);\n        expect(findShortestWords('We become what we think about.')).toEqual(['we', 'we']);\n        expect(findShortestWords('The most common way people give up their power is by thinking they don\u2019t have any.')).toEqual(['by', 'is', 'up']);\n        expect(findShortestWords('The best time to plant the tree was 20 years ago. The second best time is now.')).toEqual(['is', 'to']);\n        expect(findShortestWords('Your time is limited, so don\u2019t waste it living someone else\u2019s life.')).toEqual(['is', 'it', 'so']);\n        expect(findShortestWords('You can never cross the ocean until you have the courage to lose sight of the shore.')).toEqual(['of', 'to']);\n        expect(findShortestWords('There is only one way to avoid criticism: do nothing, say nothing, and be nothing.')).toEqual(['be', 'do', 'is', 'to']);\n        expect(findShortestWords('The only person you are destined to become is the person you decide to be.')).toEqual(['be', 'is', 'to', 'to']);\n        expect(findShortestWords('What lies behind us and what lies before us are tiny matters compared to what lies within us.')).toEqual(['to', 'us', 'us', 'us']);\n        expect(findShortestWords('If you are depressed you are living in the past. If you are anxious you are living in the future. If you are at peace you are living in the present.')).toEqual(['at', 'if', 'if', 'if', 'in', 'in', 'in']);\n        expect(findShortestWords('Happiness depends upon ourselves.')).toEqual(['upon']);\n        expect(findShortestWords('Chase two rabbits, catch none.')).toEqual(['two']);\n        expect(findShortestWords('Only the truth of who you are, if realized, will set you free.')).toEqual(['if', 'of']);\n        expect(findShortestWords('If you end up with a boring miserable life because you listened to your parents, your teacher, your priest, or some guy on television, then you deserve it.')).toEqual(['a']);\n        expect(findShortestWords('To accomplish great things, we must not only act, but also dream; not only plan, but also believe.')).toEqual(['to', 'we']);\n        expect(findShortestWords('A tiger doesn\u2019t lose sleep over the opinion of sheep.')).toEqual(['a']);\n        expect(findShortestWords('Kindness is a language that the deaf can hear and the blind can see.')).toEqual(['a']);\n        expect(findShortestWords('Being realistic is the most common path to mediocrity.')).toEqual(['is', 'to']);\n        expect(findShortestWords('Bravery means finding something more important than fear.')).toEqual(['fear', 'more', 'than']);\n        expect(findShortestWords('Can you imagine what I would do if I could do all I can?')).toEqual(['i', 'i', 'i']);\n        expect(findShortestWords('Believe you can and you\u2019re halfway there.')).toEqual(['and', 'can', 'you']);\n        expect(findShortestWords('Remember that happiness is a way of travel, not a destination.')).toEqual(['a', 'a']);\n        expect(findShortestWords('May the best day of your past be the worst day of your future.')).toEqual(['be', 'of', 'of']);\n    });\n});\n"
  },
  {
    "original_code": "function ana_str_str(needle, haystack){\n  \n}",
    "new_code": "function ana_str_str(needle, haystack) {\n  // Your code here.\n}\n\nmodule.exports = ana_str_str;\n",
    "original_tests": "Test.assertEquals(ana_str_str('car', 'race'), true)\nTest.assertEquals(ana_str_str('nod', 'done'), true)\nTest.assertEquals(ana_str_str('bag', 'grab'), false)",
    "new_tests": "const ana_str_str = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(ana_str_str('car', 'race')).toEqual(true);\n        expect(ana_str_str('nod', 'done')).toEqual(true);\n        expect(ana_str_str('bag', 'grab')).toEqual(false);\n    });\n});\n"
  },
  {
    "original_code": "function findMissing(arr) {\n  \n}",
    "new_code": "function findMissing(arr) {\n  // Your code here.\n}\n\nmodule.exports = findMissing;\n",
    "original_tests": "Test.assertEquals(findMissing([[1], [1, 2], [4, 5, 1, 1], [5, 6, 7, 8, 9]]), 3);\nTest.assertEquals(findMissing([[5, 6, 7, 8, 9], [1, 2], [4, 5, 1, 1], [1] ]), 3);\nTest.assertEquals(findMissing([[4, 4, 4, 4], [1], [3, 3, 3]]), 2);\nTest.assertEquals(findMissing([[false], [false, false, false]]), 2);\nTest.assertEquals(findMissing([[\"f\", \"r\", \"s\"], [\"d\", \"e\"], [\"a\", \"f\", \"b\", \"n\"], [\"z\"], [\"fg\", \"gty\", \"d\", \"dfr\", \"dr\", \"q\"]]), 5);\nTest.assertEquals(findMissing([[5, 2, 9], [4, 5, 1, 1, 5, 6], [1, 1], [5, 6, 7, 8, 9]]), 4);\nTest.assertEquals(findMissing([]), false, \"When the main array is empty, return false.\");\nTest.assertEquals(findMissing(null), false, \"Return false if you are given null as an argument.\");\nTest.assertEquals(findMissing([[], [1, 2, 2]]), false, \"If an array within the parent array is empty, return false.\");",
    "new_tests": "const findMissing = require('./code');\n\ndescribe('Tests', () => {\n    test('When the main array is empty, return false.', () => {\n        expect(findMissing([])).toEqual(false);\n    });\n\ntest('Return false if you are given null as an argument.', () => {\n        expect(findMissing(undefined)).toEqual(false);\n    });\n\ntest('If an array within the parent array is empty, return false.', () => {\n        expect(findMissing([[], [1, 2, 2]])).toEqual(false);\n    });\n    \n    test('the tests', () => {\n        expect(findMissing([[1], [1, 2], [4, 5, 1, 1], [5, 6, 7, 8, 9]])).toEqual(3);\n        expect(findMissing([[5, 6, 7, 8, 9], [1, 2], [4, 5, 1, 1], [1]])).toEqual(3);\n        expect(findMissing([[4, 4, 4, 4], [1], [3, 3, 3]])).toEqual(2);\n        expect(findMissing([[false], [false, false, false]])).toEqual(2);\n        expect(findMissing([['f', 'r', 's'], ['d', 'e'], ['a', 'f', 'b', 'n'], ['z'], ['fg', 'gty', 'd', 'dfr', 'dr', 'q']])).toEqual(5);\n        expect(findMissing([[5, 2, 9], [4, 5, 1, 1, 5, 6], [1, 1], [5, 6, 7, 8, 9]])).toEqual(4);\n    });\n});\n"
  },
  {
    "original_code": "function mangled(str) {\n  \n}",
    "new_code": "function mangled(str) {\n  // Your code here.\n}\n\nmodule.exports = mangled;\n",
    "original_tests": "Test.assertEquals(mangled(\"Fun times!\"), \"GvO Ujnft!\")\nTest.assertEquals(mangled(\"The quick brown fox.\"), \"UIf rvjdl cspxO gpy.\")\nTest.assertEquals(mangled(\"Omega\"), \"Pnfhb\")\nTest.assertEquals(mangled(\"I will never be this young again. Ever. Oh damn\u2026 I just got older.\"), \"J xjmm Ofwfs cf UIjt zpvOh bhbjO. Fwfs. PI EbnO\u2026 J kvtU hpU pmEfs.\")\nTest.assertEquals(mangled(\"Should we start class now, or should we wait for everyone to get here?\"), \"TIpvmE xf tUbsU dmbtt Opx, ps tIpvmE xf xbjU gps fwfszpOf Up hfU Ifsf?\")\nTest.assertEquals(mangled(\"Check back tomorrow; I will see if the book has arrived.\"), \"DIfdl cbdl Upnpsspx; J xjmm tff jg UIf cppl Ibt bssjwfE.\")\nTest.assertEquals(mangled(\"The lake is a long way from here.\"), \"UIf mblf jt b mpOh xbz gspn Ifsf.\")\nTest.assertEquals(mangled(\"It was getting dark, and we weren\u2019t there yet.\"), \"JU xbt hfUUjOh Ebsl, bOE xf xfsfO\u2019U UIfsf zfU.\")\nTest.assertEquals(mangled(\"The mysterious diary records the voice.\"), \"UIf nztUfsjpvt Ejbsz sfdpsEt UIf wpjdf.\")\nTest.assertEquals(mangled(\"Cats are good pets, for they are clean and are not noisy.\"), \"DbUt bsf hppE qfUt, gps UIfz bsf dmfbO bOE bsf OpU Opjtz.\")",
    "new_tests": "const mangled = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(mangled('Fun times!')).toEqual('GvO Ujnft!');\n        expect(mangled('The quick brown fox.')).toEqual('UIf rvjdl cspxO gpy.');\n        expect(mangled('Omega')).toEqual('Pnfhb');\n        expect(mangled('I will never be this young again. Ever. Oh damn\u2026 I just got older.')).toEqual('J xjmm Ofwfs cf UIjt zpvOh bhbjO. Fwfs. PI EbnO\u2026 J kvtU hpU pmEfs.');\n        expect(mangled('Should we start class now, or should we wait for everyone to get here?')).toEqual('TIpvmE xf tUbsU dmbtt Opx, ps tIpvmE xf xbjU gps fwfszpOf Up hfU Ifsf?');\n        expect(mangled('Check back tomorrow; I will see if the book has arrived.')).toEqual('DIfdl cbdl Upnpsspx; J xjmm tff jg UIf cppl Ibt bssjwfE.');\n        expect(mangled('The lake is a long way from here.')).toEqual('UIf mblf jt b mpOh xbz gspn Ifsf.');\n        expect(mangled('It was getting dark, and we weren\u2019t there yet.')).toEqual('JU xbt hfUUjOh Ebsl, bOE xf xfsfO\u2019U UIfsf zfU.');\n        expect(mangled('The mysterious diary records the voice.')).toEqual('UIf nztUfsjpvt Ejbsz sfdpsEt UIf wpjdf.');\n        expect(mangled('Cats are good pets, for they are clean and are not noisy.')).toEqual('DbUt bsf hppE qfUt, gps UIfz bsf dmfbO bOE bsf OpU Opjtz.');\n    });\n});\n"
  },
  {
    "original_code": "function sumConsecutives(arr) {\n  \n}",
    "new_code": "function sumConsecutives(arr) {\n  // Your code here.\n}\n\nmodule.exports = sumConsecutives;\n",
    "original_tests": "Test.assertSimilar(sumConsecutives([0, 7, 7, 7, 5, 4, 9, 9, 0]), [0, 21, 5, 4, 18, 0]);\nTest.assertSimilar(sumConsecutives([4, 4, 5, 6, 8, 8, 8]), [8, 5, 6, 24]);\nTest.assertSimilar(sumConsecutives([-5, -5, 7, 7, 12, 0]), [-10, 14, 12, 0]);\nTest.assertSimilar(sumConsecutives([2, 2, 2, 2, 2, 7]), [10, 7]);\nTest.assertSimilar(sumConsecutives([2, 2, -4, 4, 5, 5, 6, 6, 6, 6, 6, 1]), [4, -4, 4, 10, 30, 1]);\nTest.assertSimilar(sumConsecutives([3, 3, 3, 3, 1]), [12, 1]);\nTest.assertSimilar(sumConsecutives([1, -1, -2, 2, 3, -3, 4, -4]), [1, -1, -2, 2, 3, -3, 4, -4]);",
    "new_tests": "const sumConsecutives = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(sumConsecutives([0, 7, 7, 7, 5, 4, 9, 9, 0])).toEqual([0, 21, 5, 4, 18, 0]);\n        expect(sumConsecutives([4, 4, 5, 6, 8, 8, 8])).toEqual([8, 5, 6, 24]);\n        expect(sumConsecutives([-5, -5, 7, 7, 12, 0])).toEqual([-10, 14, 12, 0]);\n        expect(sumConsecutives([2, 2, 2, 2, 2, 7])).toEqual([10, 7]);\n        expect(sumConsecutives([2, 2, -4, 4, 5, 5, 6, 6, 6, 6, 6, 1])).toEqual([4, -4, 4, 10, 30, 1]);\n        expect(sumConsecutives([3, 3, 3, 3, 1])).toEqual([12, 1]);\n        expect(sumConsecutives([1, -1, -2, 2, 3, -3, 4, -4])).toEqual([1, -1, -2, 2, 3, -3, 4, -4]);\n    });\n});\n"
  },
  {
    "original_code": "function selReverse(arr, len) {\n  \n}",
    "new_code": "function selReverse(arr, len) {\n  // Your code here.\n}\n\nmodule.exports = selReverse;\n",
    "original_tests": "Test.assertSimilar(selReverse([1, 2, 3, 4, 5, 6], 2), [2, 1, 4, 3, 6, 5]);\nTest.assertSimilar(selReverse([2, 4, 6, 8, 10, 12, 14, 16], 3), [6, 4, 2, 12, 10, 8, 16, 14]);\nTest.assertSimilar(selReverse([5, 7, 2, 6, 0, 4, 6], 100), [6, 4, 0, 6, 2, 7, 5]);\nTest.assertSimilar(selReverse([6, 0, 0, 0, 3, 8, 9, 7, 1], 9), [1, 7, 9, 8, 3, 0, 0, 0, 6]);\nTest.assertSimilar(selReverse([12, 54, 67, 34, 65, 34, 33], 0), [12, 54, 67, 34, 65, 34, 33]);\nTest.assertSimilar(selReverse([12, 54, 67, 34, 65, 34, 33], 1), [12, 54, 67, 34, 65, 34, 33]);\nTest.assertSimilar(selReverse([22, 13, 22, 13, 13, 22, 22, 13], 5), [13, 13, 22, 13, 22, 13, 22, 22]);\nTest.assertSimilar(selReverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), [2, 1, 4, 3, 6, 5, 8, 7, 10, 9]);\nTest.assertSimilar(selReverse([1], 2), [1]);\nTest.assertSimilar(selReverse([1, 2], 2), [2, 1]);",
    "new_tests": "const selReverse = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(selReverse([1, 2, 3, 4, 5, 6], 2)).toEqual([2, 1, 4, 3, 6, 5]);\n        expect(selReverse([2, 4, 6, 8, 10, 12, 14, 16], 3)).toEqual([6, 4, 2, 12, 10, 8, 16, 14]);\n        expect(selReverse([5, 7, 2, 6, 0, 4, 6], 100)).toEqual([6, 4, 0, 6, 2, 7, 5]);\n        expect(selReverse([6, 0, 0, 0, 3, 8, 9, 7, 1], 9)).toEqual([1, 7, 9, 8, 3, 0, 0, 0, 6]);\n        expect(selReverse([12, 54, 67, 34, 65, 34, 33], 0)).toEqual([12, 54, 67, 34, 65, 34, 33]);\n        expect(selReverse([12, 54, 67, 34, 65, 34, 33], 1)).toEqual([12, 54, 67, 34, 65, 34, 33]);\n        expect(selReverse([22, 13, 22, 13, 13, 22, 22, 13], 5)).toEqual([13, 13, 22, 13, 22, 13, 22, 22]);\n        expect(selReverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)).toEqual([2, 1, 4, 3, 6, 5, 8, 7, 10, 9]);\n        expect(selReverse([1], 2)).toEqual([1]);\n        expect(selReverse([1, 2], 2)).toEqual([2, 1]);\n    });\n});\n"
  },
  {
    "original_code": "function deepCount(arr) {\n  \n}",
    "new_code": "function deepCount(arr) {\n  // Your code here.\n}\n\nmodule.exports = deepCount;\n",
    "original_tests": "Test.assertEquals(deepCount([1, 2, 3]), 3);\nTest.assertEquals(deepCount([\"x\", \"y\", [\"z\"]]), 4);\nTest.assertEquals(deepCount([\"a\", \"b\", [\"c\", \"d\", [\"e\"]]]), 7);\nTest.assertEquals(deepCount([[1], [2], [3]]), 6);\nTest.assertEquals(deepCount([[[[[[[[[]]]]]]]]]), 8);\nTest.assertEquals(deepCount([null]), 1);\nTest.assertEquals(deepCount([[]]), 1);\nTest.assertEquals(deepCount([[undefined], [null, [\"edabit\"]], [0]]), 8);",
    "new_tests": "const deepCount = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(deepCount([1, 2, 3])).toEqual(3);\n        expect(deepCount(['x', 'y', ['z']])).toEqual(4);\n        expect(deepCount(['a', 'b', ['c', 'd', ['e']]])).toEqual(7);\n        expect(deepCount([[1], [2], [3]])).toEqual(6);\n        expect(deepCount([[[[[[[[[]]]]]]]]])).toEqual(8);\n        expect(deepCount([undefined])).toEqual(1);\n        expect(deepCount([[]])).toEqual(1);\n        expect(deepCount([[undefined], [undefined, ['edabit']], [0]])).toEqual(8);\n    });\n});\n"
  },
  {
    "original_code": "function overTwentyOne(args) {\n  \n}",
    "new_code": "function overTwentyOne(args) {\n  // Your code here.\n}\n\nmodule.exports = overTwentyOne;\n",
    "original_tests": "Test.assertEquals(overTwentyOne(['A', 2, 3]), false);\nTest.assertEquals(overTwentyOne(['A', 'J', 'K']), false);\nTest.assertEquals(overTwentyOne(['A', 'J', 'K', 'Q']), true);\nTest.assertEquals(overTwentyOne([5, 3, 6, 6, 7, 9]), true);",
    "new_tests": "const overTwentyOne = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(overTwentyOne(['A', 2, 3])).toEqual(false);\n        expect(overTwentyOne(['A', 'J', 'K'])).toEqual(false);\n        expect(overTwentyOne(['A', 'J', 'K', 'Q'])).toEqual(true);\n        expect(overTwentyOne([5, 3, 6, 6, 7, 9])).toEqual(true);\n    });\n});\n"
  },
  {
    "original_code": "function expand(num) {\n  \n}",
    "new_code": "function expand(num) {\n  // Your code here.\n}\n\nmodule.exports = expand;\n",
    "original_tests": "Test.assertEquals(expand(13), \"10 + 3\");\nTest.assertEquals(expand(86), \"80 + 6\");\nTest.assertEquals(expand(17000000), \"10000000 + 7000000\");\nTest.assertEquals(expand(420370022), \"400000000 + 20000000 + 300000 + 70000 + 20 + 2\");\nTest.assertEquals(expand(70304), \"70000 + 300 + 4\");\nTest.assertEquals(expand(9000000), \"9000000\");\nTest.assertEquals(expand(5325), \"5000 + 300 + 20 + 5\");\nTest.assertEquals(expand(2096039485293), \"2000000000000 + 90000000000 + 6000000000 + 30000000 + 9000000 + 400000 + 80000 + 5000 + 200 + 90 + 3\");\nTest.assertEquals(expand(92093403034573), \"90000000000000 + 2000000000000 + 90000000000 + 3000000000 + 400000000 + 3000000 + 30000 + 4000 + 500 + 70 + 3\");",
    "new_tests": "const expand = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(expand(13)).toEqual('10 + 3');\n        expect(expand(86)).toEqual('80 + 6');\n        expect(expand(17000000)).toEqual('10000000 + 7000000');\n        expect(expand(420370022)).toEqual('400000000 + 20000000 + 300000 + 70000 + 20 + 2');\n        expect(expand(70304)).toEqual('70000 + 300 + 4');\n        expect(expand(9000000)).toEqual('9000000');\n        expect(expand(5325)).toEqual('5000 + 300 + 20 + 5');\n        expect(expand(2096039485293)).toEqual('2000000000000 + 90000000000 + 6000000000 + 30000000 + 9000000 + 400000 + 80000 + 5000 + 200 + 90 + 3');\n        expect(expand(92093403034573)).toEqual('90000000000000 + 2000000000000 + 90000000000 + 3000000000 + 400000000 + 3000000 + 30000 + 4000 + 500 + 70 + 3');\n    });\n});\n"
  },
  {
    "original_code": "function numToGoogle(arr) {\n  \n}",
    "new_code": "function numToGoogle(arr) {\n  // Your code here.\n}\n\nmodule.exports = numToGoogle;\n",
    "original_tests": "Test.assertEquals(numToGoogle([\"12213467\"]), \"Google.\");\nTest.assertEquals(numToGoogle([\"12213467\", \"321\"]), \"Google.log\");\nTest.assertEquals(numToGoogle([\"12213467\", \"321\", \"122906\"]), \"Google.log\");\nTest.assertEquals(numToGoogle([\"15\", \"2502\", \"15\",345]), \"GOOGLE\");\nTest.assertEquals(numToGoogle([\"15\", \"2502\", \"15\",35,45]), \"GOOGLE\");\nTest.assertEquals(numToGoogle([15,202,1,3,4]), \"Google\");\nTest.assertEquals(numToGoogle([\"1221348\"]), \"elgoog\");\nTest.assertEquals(numToGoogle([\"15345678\"]), \".ELG\");\nTest.assertEquals(numToGoogle([\"218\",\"6\",\"12\",6,1,2,]), \"go.go.go\");",
    "new_tests": "const numToGoogle = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(numToGoogle(['12213467'])).toEqual('Google.');\n        expect(numToGoogle(['12213467', '321'])).toEqual('Google.log');\n        expect(numToGoogle(['12213467', '321', '122906'])).toEqual('Google.log');\n        expect(numToGoogle(['15', '2502', '15', 345])).toEqual('GOOGLE');\n        expect(numToGoogle(['15', '2502', '15', 35, 45])).toEqual('GOOGLE');\n        expect(numToGoogle([15, 202, 1, 3, 4])).toEqual('Google');\n        expect(numToGoogle(['1221348'])).toEqual('elgoog');\n        expect(numToGoogle(['15345678'])).toEqual('.ELG');\n        expect(numToGoogle(['218', '6', '12', 6, 1, 2])).toEqual('go.go.go');\n    });\n});\n"
  },
  {
    "original_code": "function pigLatin(str) {\n  \n}",
    "new_code": "function pigLatin(str) {\n  // Your code here.\n}\n\nmodule.exports = pigLatin;\n",
    "original_tests": "Test.assertEquals(pigLatin(\"Cats are great pets.\"), \"Atscay areway reatgay etspay.\");\nTest.assertEquals(pigLatin(\"Tom got a small piece of pie.\"), \"Omtay otgay away mallsay iecepay ofway iepay.\");\nTest.assertEquals(pigLatin(\"He told us a very exciting tale.\"), \"Ehay oldtay usway away eryvay excitingway aletay.\");\nTest.assertEquals(pigLatin(\"A diamond is not enough.\"), \"Away iamondday isway otnay enoughway.\");\nTest.assertEquals(pigLatin(\"Hurry!\"), \"Urryhay!\");",
    "new_tests": "const pigLatin = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(pigLatin('Cats are great pets.')).toEqual('Atscay areway reatgay etspay.');\n        expect(pigLatin('Tom got a small piece of pie.')).toEqual('Omtay otgay away mallsay iecepay ofway iepay.');\n        expect(pigLatin('He told us a very exciting tale.')).toEqual('Ehay oldtay usway away eryvay excitingway aletay.');\n        expect(pigLatin('A diamond is not enough.')).toEqual('Away iamondday isway otnay enoughway.');\n        expect(pigLatin('Hurry!')).toEqual('Urryhay!');\n    });\n});\n"
  },
  {
    "original_code": "function youtubeId(link) {\n  \n}",
    "new_code": "function youtubeId(link) {\n  // Your code here.\n}\n\nmodule.exports = youtubeId;\n",
    "original_tests": "Test.assertEquals(\n  youtubeId('https://www.youtube.com/watch?v=XPEr1cArWRg'),\n  'XPEr1cArWRg'\n);\nTest.assertEquals(\n  youtubeId('http://www.youtube.com/watch?v=-SNQGyVW_YI&t=8871'),\n  '-SNQGyVW_YI'\n);\nTest.assertEquals(\n  youtubeId('https://youtube.com/watch?t=4m40s&v=vxP3bY-XxY4'),\n  'vxP3bY-XxY4'\n);\nTest.assertEquals(\n  youtubeId('www.youtube.com/watch?list=PL3QZUm48uWnsdFakp3A2fI-NzmfH1jyQe&v=yv56ncTdTmU&index=8'),\n  'yv56ncTdTmU'\n);\nTest.assertEquals(\n  youtubeId('https://youtu.be/BCDEDi5gDPo'),\n  'BCDEDi5gDPo'\n);\nTest.assertEquals(\n  youtubeId('https://www.youtube.com/watch?feature=youtu.be&v=jOxnoDi9IYg&t=3311s'),\n  'jOxnoDi9IYg'\n);\nTest.assertEquals(\n  youtubeId('https://www.youtube-nocookie.com/embed/2w9SQjdn9U4'),\n  '2w9SQjdn9U4'\n);",
    "new_tests": "const youtubeId = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(youtubeId('https://www.youtube.com/watch?v=XPEr1cArWRg')).toEqual('XPEr1cArWRg');\n        expect(youtubeId('http://www.youtube.com/watch?v=-SNQGyVW_YI&t=8871')).toEqual('-SNQGyVW_YI');\n        expect(youtubeId('https://youtube.com/watch?t=4m40s&v=vxP3bY-XxY4')).toEqual('vxP3bY-XxY4');\n        expect(youtubeId('www.youtube.com/watch?list=PL3QZUm48uWnsdFakp3A2fI-NzmfH1jyQe&v=yv56ncTdTmU&index=8')).toEqual('yv56ncTdTmU');\n        expect(youtubeId('https://youtu.be/BCDEDi5gDPo')).toEqual('BCDEDi5gDPo');\n        expect(youtubeId('https://www.youtube.com/watch?feature=youtu.be&v=jOxnoDi9IYg&t=3311s')).toEqual('jOxnoDi9IYg');\n        expect(youtubeId('https://www.youtube-nocookie.com/embed/2w9SQjdn9U4')).toEqual('2w9SQjdn9U4');\n    });\n});\n"
  },
  {
    "original_code": "function wordRank(str) {\n  \n}",
    "new_code": "function wordRank(str) {\n  // Your code here.\n}\n\nmodule.exports = wordRank;\n",
    "original_tests": "Test.assertEquals(wordRank(\"If the Easter Bunny and the Tooth Fairy had babies would they take your teeth and leave chocolate for you?\"), \"chocolate\");\nTest.assertEquals(wordRank(\"The memory we used to share is no longer coherent.\"), \"memory\");\nTest.assertEquals(wordRank(\"He didn\u2019t want to go to the dentist, yet he went anyway.\"), \"dentist\");\nTest.assertEquals(wordRank(\"What was the person thinking when they discovered cow\u2019s milk was fine for human consumption... and why did they do it in the first place!?\"), \"consumption\");\nTest.assertEquals(wordRank(\"Mary plays the piano.\"), \"plays\");\nTest.assertEquals(wordRank(\"I hear that Nancy is very pretty.\"), \"pretty\");\nTest.assertEquals(wordRank(\"If you like tuna and tomato sauce- try combining the two. It\u2019s really not as bad as it sounds.\"), \"sounds\");\nTest.assertEquals(wordRank(\"She works two jobs to make ends meet; at least, that was her reason for not having time to join us.\"), \"works\");\nTest.assertEquals(wordRank(\"Wednesday is hump day, but has anyone asked the camel if he\u2019s happy about it?\"), \"Wednesday\");\nTest.assertEquals(wordRank(\"The body may perhaps compensates for the loss of a true metaphysics.\"), \"metaphysics\");\nTest.assertEquals(wordRank(\"The clock within this blog and the clock on my laptop are 1 hour different from each other.\"), \"different\");\nTest.assertEquals(wordRank(\"Check back tomorrow; I will see if the book has arrived.\"), \"tomorrow\");",
    "new_tests": "const wordRank = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(wordRank('If the Easter Bunny and the Tooth Fairy had babies would they take your teeth and leave chocolate for you?')).toEqual('chocolate');\n        expect(wordRank('The memory we used to share is no longer coherent.')).toEqual('memory');\n        expect(wordRank('He didn\u2019t want to go to the dentist, yet he went anyway.')).toEqual('dentist');\n        expect(wordRank('What was the person thinking when they discovered cow\u2019s milk was fine for human consumption... and why did they do it in the first place!?')).toEqual('consumption');\n        expect(wordRank('Mary plays the piano.')).toEqual('plays');\n        expect(wordRank('I hear that Nancy is very pretty.')).toEqual('pretty');\n        expect(wordRank('If you like tuna and tomato sauce- try combining the two. It\u2019s really not as bad as it sounds.')).toEqual('sounds');\n        expect(wordRank('She works two jobs to make ends meet; at least, that was her reason for not having time to join us.')).toEqual('works');\n        expect(wordRank('Wednesday is hump day, but has anyone asked the camel if he\u2019s happy about it?')).toEqual('Wednesday');\n        expect(wordRank('The body may perhaps compensates for the loss of a true metaphysics.')).toEqual('metaphysics');\n        expect(wordRank('The clock within this blog and the clock on my laptop are 1 hour different from each other.')).toEqual('different');\n        expect(wordRank('Check back tomorrow; I will see if the book has arrived.')).toEqual('tomorrow');\n    });\n});\n"
  },
  {
    "original_code": "function stripUrlParams(url, paramsToStrip) {\n  \n}",
    "new_code": "function stripUrlParams(url, paramsToStrip) {\n  // Your code here.\n}\n\nmodule.exports = stripUrlParams;\n",
    "original_tests": "Test.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2&a=2\"), \"https://edabit.com?a=2&b=2\");\nTest.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2&a=2\", [\"b\"]), \"https://edabit.com?a=2\");\nTest.assertEquals(stripUrlParams(\"https://edabit.com\", [\"b\"]), \"https://edabit.com\");\nTest.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2\"), \"https://edabit.com?a=1&b=2\");\nTest.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2\", [\"c\"]), \"https://edabit.com?a=1&b=2\");\nTest.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2&c=3&d=4\", [\"a\", \"d\"]), \"https://edabit.com?b=2&c=3\", \"The 2nd argument can contain multiple URL params.\");\nTest.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2&c=3&d=4&c=5\", [\"a\", \"d\"]), \"https://edabit.com?b=2&c=5\");",
    "new_tests": "const stripUrlParams = require('./code');\n\ndescribe('Tests', () => {\n    test('The 2nd argument can contain multiple URL params.', () => {\n        expect(stripUrlParams('https://edabit.com?a=1&b=2&c=3&d=4', ['a', 'd'])).toEqual('https://edabit.com?b=2&c=3');\n    });\n    \n    test('the tests', () => {\n        expect(stripUrlParams('https://edabit.com?a=1&b=2&a=2')).toEqual('https://edabit.com?a=2&b=2');\n        expect(stripUrlParams('https://edabit.com?a=1&b=2&a=2', ['b'])).toEqual('https://edabit.com?a=2');\n        expect(stripUrlParams('https://edabit.com', ['b'])).toEqual('https://edabit.com');\n        expect(stripUrlParams('https://edabit.com?a=1&b=2')).toEqual('https://edabit.com?a=1&b=2');\n        expect(stripUrlParams('https://edabit.com?a=1&b=2', ['c'])).toEqual('https://edabit.com?a=1&b=2');\n        expect(stripUrlParams('https://edabit.com?a=1&b=2&c=3&d=4&c=5', ['a', 'd'])).toEqual('https://edabit.com?b=2&c=5');\n    });\n});\n"
  },
  {
    "original_code": "function findFrequent(arr) {\n  \n}",
    "new_code": "function findFrequent(arr) {\n  // Your code here.\n}\n\nmodule.exports = findFrequent;\n",
    "original_tests": "Test.assertEquals(findFrequent([3, 7, 3]), 3);\nTest.assertEquals(findFrequent([null, \"hello\", true, null]), null);\nTest.assertEquals(findFrequent([false, \"up\", \"down\", \"left\", \"right\", true, false]), false);\nTest.assertEquals(findFrequent([undefined]), undefined);\nTest.assertEquals(findFrequent([1, 2, -3, true, false, undefined, \"yes\", \"yeah\", \"yup\", 2]), 2);\nTest.assertEquals(findFrequent([\"Batman\", \"Superman\", \"Batman\"]), \"Batman\");",
    "new_tests": "const findFrequent = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(findFrequent([3, 7, 3])).toEqual(3);\n        expect(findFrequent([undefined, 'hello', true, undefined])).toEqual(undefined);\n        expect(findFrequent([false, 'up', 'down', 'left', 'right', true, false])).toEqual(false);\n        expect(findFrequent([undefined])).toEqual(undefined);\n        expect(findFrequent([1, 2, -3, true, false, undefined, 'yes', 'yeah', 'yup', 2])).toEqual(2);\n        expect(findFrequent(['Batman', 'Superman', 'Batman'])).toEqual('Batman');\n    });\n});\n"
  },
  {
    "original_code": "function getPrimeFactorization(num) {\n  \n}",
    "new_code": "function getPrimeFactorization(num) {\n  // Your code here.\n}\n\nmodule.exports = getPrimeFactorization;\n",
    "original_tests": "Test.assertSimilar(getPrimeFactorization(2), [[2, 1]]);\nTest.assertSimilar(getPrimeFactorization(4), [[2, 2]]);\nTest.assertSimilar(getPrimeFactorization(10), [[2, 1], [5, 1]]);\nTest.assertSimilar(getPrimeFactorization(11), [[11, 1]]);\nTest.assertSimilar(getPrimeFactorization(29), [[29, 1]]);\nTest.assertSimilar(getPrimeFactorization(60), [[2, 2], [3, 1], [5, 1]]);\nTest.assertSimilar(getPrimeFactorization(100), [[2, 2], [5, 2]]);\nTest.assertSimilar(getPrimeFactorization(151), [[151, 1]]);\nTest.assertSimilar(getPrimeFactorization(323), [[17, 1], [19, 1]]);\nTest.assertSimilar(getPrimeFactorization(997), [[997, 1]]);\nTest.assertSimilar(getPrimeFactorization(3349), [[17, 1], [197, 1]]);\nTest.assertSimilar(getPrimeFactorization(5040), [[2, 4], [3, 2], [5, 1], [7, 1]]);\nTest.assertSimilar(getPrimeFactorization(6097), [[7, 1], [13, 1], [67, 1]]);\nTest.assertSimilar(getPrimeFactorization(8192), [[2, 13]]);\nTest.assertSimilar(getPrimeFactorization(9870), [[2, 1], [3, 1], [5, 1], [7, 1], [47, 1]]);\nTest.assertSimilar(getPrimeFactorization(9973), [[9973, 1]]);\nTest.assertSimilar(getPrimeFactorization(9999), [[3, 2], [11, 1], [101, 1]]);",
    "new_tests": "const getPrimeFactorization = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(getPrimeFactorization(2)).toEqual([[2, 1]]);\n        expect(getPrimeFactorization(4)).toEqual([[2, 2]]);\n        expect(getPrimeFactorization(10)).toEqual([[2, 1], [5, 1]]);\n        expect(getPrimeFactorization(11)).toEqual([[11, 1]]);\n        expect(getPrimeFactorization(29)).toEqual([[29, 1]]);\n        expect(getPrimeFactorization(60)).toEqual([[2, 2], [3, 1], [5, 1]]);\n        expect(getPrimeFactorization(100)).toEqual([[2, 2], [5, 2]]);\n        expect(getPrimeFactorization(151)).toEqual([[151, 1]]);\n        expect(getPrimeFactorization(323)).toEqual([[17, 1], [19, 1]]);\n        expect(getPrimeFactorization(997)).toEqual([[997, 1]]);\n        expect(getPrimeFactorization(3349)).toEqual([[17, 1], [197, 1]]);\n        expect(getPrimeFactorization(5040)).toEqual([[2, 4], [3, 2], [5, 1], [7, 1]]);\n        expect(getPrimeFactorization(6097)).toEqual([[7, 1], [13, 1], [67, 1]]);\n        expect(getPrimeFactorization(8192)).toEqual([[2, 13]]);\n        expect(getPrimeFactorization(9870)).toEqual([[2, 1], [3, 1], [5, 1], [7, 1], [47, 1]]);\n        expect(getPrimeFactorization(9973)).toEqual([[9973, 1]]);\n        expect(getPrimeFactorization(9999)).toEqual([[3, 2], [11, 1], [101, 1]]);\n    });\n});\n"
  },
  {
    "original_code": "function syncSubs(subtitles, timeIncrement) {\n  \n}",
    "new_code": "function syncSubs(subtitles, timeIncrement) {\n  // Your code here.\n}\n\nmodule.exports = syncSubs;\n",
    "original_tests": "Test.assertEquals(syncSubs(\n`708\n00:44:50,006 --> 00:44:53,007\nPeople are taking this festival\nextremely seriously.`, `00:03:30,550`),\n`708\n00:48:20,556 --> 00:48:23,557\nPeople are taking this festival\nextremely seriously.`)\nTest.assertEquals(syncSubs(\n`729\n00:45:55,704 --> 00:45:59,506\nSo we don't have to wait for it.`, `00:00:00,000`),\n`729\n00:45:55,704 --> 00:45:59,506\nSo we don't have to wait for it.`)\nTest.assertEquals(syncSubs(\n`735\n00:46:24,967 --> 00:46:27,701\nWe've already won.\n\n736\n00:46:27,736 --> 00:46:30,637\n[Crowd cheers]`, `01:21:00,211`),\n`735\n02:07:25,178 --> 02:07:27,912\nWe've already won.\n\n736\n02:07:27,947 --> 02:07:30,848\n[Crowd cheers]`)\nTest.assertEquals(syncSubs(\n`722\n00:45:34,483 --> 00:45:36,917\nMy mercy...`, `00:60:09,010`),\n`There is a problem with the second argument`)\nTest.assertEquals(syncSubs(\n`722\n00:45:34,483 --> 00:45:36,917\nMy mercy...`, `00:00:09.000`),\n`There is a problem with the second argument`)\nTest.assertEquals(syncSubs(\n`722\n00:45:34,483 --> 00:45:36,917\nMy mercy...`, `0:4:5,921`),\n`There is a problem with the second argument`)\nTest.assertEquals(syncSubs(\n`187\n00:13:29,202 --> 00:13:37,202\n\u266a`, `02:54:55,999`),\n`187\n03:08:25,201 --> 03:08:33,201\n\u266a`)",
    "new_tests": "const syncSubs = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(syncSubs(`708\n00:44:50,006 --> 00:44:53,007\nPeople are taking this festival\nextremely seriously.`, `00:03:30,550`)).toEqual(`708\n00:48:20,556 --> 00:48:23,557\nPeople are taking this festival\nextremely seriously.`);\n        expect(syncSubs(`729\n00:45:55,704 --> 00:45:59,506\nSo we don't have to wait for it.`, `00:00:00,000`)).toEqual(`729\n00:45:55,704 --> 00:45:59,506\nSo we don't have to wait for it.`);\n        expect(syncSubs(`735\n00:46:24,967 --> 00:46:27,701\nWe've already won.\n\n736\n00:46:27,736 --> 00:46:30,637\n[Crowd cheers]`, `01:21:00,211`)).toEqual(`735\n02:07:25,178 --> 02:07:27,912\nWe've already won.\n\n736\n02:07:27,947 --> 02:07:30,848\n[Crowd cheers]`);\n        expect(syncSubs(`722\n00:45:34,483 --> 00:45:36,917\nMy mercy...`, `00:60:09,010`)).toEqual(`There is a problem with the second argument`);\n        expect(syncSubs(`722\n00:45:34,483 --> 00:45:36,917\nMy mercy...`, `00:00:09.000`)).toEqual(`There is a problem with the second argument`);\n        expect(syncSubs(`722\n00:45:34,483 --> 00:45:36,917\nMy mercy...`, `0:4:5,921`)).toEqual(`There is a problem with the second argument`);\n        expect(syncSubs(`187\n00:13:29,202 --> 00:13:37,202\n\u266a`, `02:54:55,999`)).toEqual(`187\n03:08:25,201 --> 03:08:33,201\n\u266a`);\n    });\n});\n"
  },
  {
    "original_code": "function groupMonotonic(arr) {\n  \n}",
    "new_code": "function groupMonotonic(arr) {\n  // Your code here.\n}\n\nmodule.exports = groupMonotonic;\n",
    "original_tests": "Test.assertSimilar(groupMonotonic([]), []);\nTest.assertSimilar(groupMonotonic([0]), []);\nTest.assertSimilar(groupMonotonic([1]), []);\nTest.assertSimilar(groupMonotonic([0, 1]), []);\nTest.assertSimilar(groupMonotonic([1, 0]), []);\nTest.assertSimilar(groupMonotonic([1, 1]), []);\nTest.assertSimilar(groupMonotonic([0, 1, 2]), []);\nTest.assertSimilar(groupMonotonic([2, 1, 0]), []);\nTest.assertSimilar(groupMonotonic([0, 2, 1]), [1]);\nTest.assertSimilar(groupMonotonic([1, 0, 2]), [1]);\nTest.assertSimilar(groupMonotonic([0, 1, 1, 0]), [2]);\nTest.assertSimilar(groupMonotonic([1, 2, 3, 4, 4, 4, 3, 2, 1]), [5]);\nTest.assertSimilar(groupMonotonic([0, 6, 10, 9, 3, -3, -9, -10, -6, 0]), [2, 7]);",
    "new_tests": "const groupMonotonic = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(groupMonotonic([])).toEqual([]);\n        expect(groupMonotonic([0])).toEqual([]);\n        expect(groupMonotonic([1])).toEqual([]);\n        expect(groupMonotonic([0, 1])).toEqual([]);\n        expect(groupMonotonic([1, 0])).toEqual([]);\n        expect(groupMonotonic([1, 1])).toEqual([]);\n        expect(groupMonotonic([0, 1, 2])).toEqual([]);\n        expect(groupMonotonic([2, 1, 0])).toEqual([]);\n        expect(groupMonotonic([0, 2, 1])).toEqual([1]);\n        expect(groupMonotonic([1, 0, 2])).toEqual([1]);\n        expect(groupMonotonic([0, 1, 1, 0])).toEqual([2]);\n        expect(groupMonotonic([1, 2, 3, 4, 4, 4, 3, 2, 1])).toEqual([5]);\n        expect(groupMonotonic([0, 6, 10, 9, 3, -3, -9, -10, -6, 0])).toEqual([2, 7]);\n    });\n});\n"
  },
  {
    "original_code": "function validColor(color) {\n  \n}",
    "new_code": "function validColor(color) {\n  // Your code here.\n}\n\nmodule.exports = validColor;\n",
    "original_tests": "// True tests\nTest.assertEquals(validColor('rgb(0,0,0)'), true, 'rgb lowest valid numbers');\nTest.assertEquals(validColor('rgb(255,255,255)'), true, 'rgb highest valid numbers');\nTest.assertEquals(validColor('rgba(0,0,0,0)'), true, 'rgba lowest valid numbers');\nTest.assertEquals(validColor('rgba(255,255,255,1)'), true, 'rgba highest valid numbers');\nTest.assertEquals(validColor('rgba(0,0,0,0.123456789)'), true, 'alpha can have many decimals');\nTest.assertEquals(validColor('rgba(0,0,0,.8)'), true, 'in alpha the number before the dot is optional');\nTest.assertEquals(validColor('rgba(\t0 , 127\t, 255 , 0.1\t)'), true, 'whitespace is allowed around numbers (even tabs)');\nTest.assertEquals(validColor('rgb(0%,50%,100%)'), true, 'numbers can be percentages');\n\n// False tests\nTest.assertEquals(validColor('rgb(0,,0)'), false, 'INVALID: missing number');\nTest.assertEquals(validColor('rgb (0,0,0)'), false, 'INVALID: whitespace before parenthesis');\nTest.assertEquals(validColor('rgb(0,0,0,0)'), false, 'INVALID: rgb with 4 numbers');\nTest.assertEquals(validColor('rgba(0,0,0)'), false, 'INVALID: rgba with 3 numbers');\nTest.assertEquals(validColor('rgb(-1,0,0)'), false, 'INVALID: numbers below 0');\nTest.assertEquals(validColor('rgb(255,256,255)'), false, 'INVALID: numbers above 255');\nTest.assertEquals(validColor('rgb(100%,100%,101%)'), false, 'INVALID: numbers above 100%');\nTest.assertEquals(validColor('rgba(0,0,0,-1)'), false, 'INVALID: alpha below 0');\nTest.assertEquals(validColor('rgba(0,0,0,1.1)'), false, 'INVALID: alpha above 1');",
    "new_tests": "const validColor = require('./code');\n\ndescribe('Tests', () => {\n    test('rgb lowest valid numbers', () => {\n        expect(validColor('rgb(0,0,0)')).toEqual(true);\n    });\n\ntest('rgb highest valid numbers', () => {\n        expect(validColor('rgb(255,255,255)')).toEqual(true);\n    });\n\ntest('rgba lowest valid numbers', () => {\n        expect(validColor('rgba(0,0,0,0)')).toEqual(true);\n    });\n\ntest('rgba highest valid numbers', () => {\n        expect(validColor('rgba(255,255,255,1)')).toEqual(true);\n    });\n\ntest('alpha can have many decimals', () => {\n        expect(validColor('rgba(0,0,0,0.123456789)')).toEqual(true);\n    });\n\ntest('in alpha the number before the dot is optional', () => {\n        expect(validColor('rgba(0,0,0,.8)')).toEqual(true);\n    });\n\ntest('whitespace is allowed around numbers (even tabs)', () => {\n        expect(validColor('rgba(\t0 , 127\t, 255 , 0.1\t)')).toEqual(true);\n    });\n\ntest('numbers can be percentages', () => {\n        expect(validColor('rgb(0%,50%,100%)')).toEqual(true);\n    });\n\ntest('INVALID: missing number', () => {\n        expect(validColor('rgb(0,,0)')).toEqual(false);\n    });\n\ntest('INVALID: whitespace before parenthesis', () => {\n        expect(validColor('rgb (0,0,0)')).toEqual(false);\n    });\n\ntest('INVALID: rgb with 4 numbers', () => {\n        expect(validColor('rgb(0,0,0,0)')).toEqual(false);\n    });\n\ntest('INVALID: rgba with 3 numbers', () => {\n        expect(validColor('rgba(0,0,0)')).toEqual(false);\n    });\n\ntest('INVALID: numbers below 0', () => {\n        expect(validColor('rgb(-1,0,0)')).toEqual(false);\n    });\n\ntest('INVALID: numbers above 255', () => {\n        expect(validColor('rgb(255,256,255)')).toEqual(false);\n    });\n\ntest('INVALID: numbers above 100%', () => {\n        expect(validColor('rgb(100%,100%,101%)')).toEqual(false);\n    });\n\ntest('INVALID: alpha below 0', () => {\n        expect(validColor('rgba(0,0,0,-1)')).toEqual(false);\n    });\n\ntest('INVALID: alpha above 1', () => {\n        expect(validColor('rgba(0,0,0,1.1)')).toEqual(false);\n    });\n    \n    test('the tests', () => {\n        \n    });\n});\n"
  },
  {
    "original_code": "//Should return m mod n\nfunction mod(m, n) {\n  \n}",
    "new_code": "function mod(m, n) {\n  // Your code here.\n}\n\nmodule.exports = mod;\n",
    "original_tests": "Test.assertEquals(mod(-13, 64), 51);\nTest.assertEquals(mod(50, 25), 0);\nTest.assertEquals(mod(-6, 3), 0);\nTest.assertNotEquals(mod(-45, 2), -1);",
    "new_tests": "const mod = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(mod(-13, 64)).toEqual(51);\n        expect(mod(50, 25)).toEqual(0);\n        expect(mod(-6, 3)).toEqual(0);\n        expect(mod(-45, 2)).not.toEqual(-1);\n    });\n});\n"
  },
  {
    "original_code": "function spiral(arr) {\n  \n}",
    "new_code": "function spiral(arr) {\n  // Your code here.\n}\n\nmodule.exports = spiral;\n",
    "original_tests": "Test.assertSimilar(\n  spiral(\n    [\n      [7, 2],\n      [5, 0]\n    ]\n  ),\n  [7, 2, 0, 5],\n  'Should work with a 2x2 array'\n);\n\nTest.assertSimilar(\n  spiral(\n    [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9]\n    ]\n  ),\n  [1, 2, 3, 6, 9, 8, 7, 4, 5],\n  'Should work with a 3x3 array'\n);\n\nTest.assertSimilar(\n  spiral(\n    [\n      [1, 9, 9],\n      [2, 4, 9],\n      [7, 3, 9]\n    ]\n  ),\n  [1, 9, 9, 9, 9, 3, 7, 2, 4],\n  'Should work with a 3x3 array'\n);\n\nTest.assertSimilar(\n  spiral(\n    [\n      [6, 4, 3, 9],\n      [2, 5, 7, 1],\n      [8, 6, 2, 3],\n      [4, 5, 9, 1]\n    ]\n  ),\n  [6, 4, 3, 9, 1, 3, 1, 9, 5, 4, 8, 2, 5, 7, 2, 6],\n  'Should work with a 4x4 array'\n);\n\nTest.assertSimilar(\n  spiral(\n    [\n      [4, 1, 55, 5, 9],\n      [16, 7, 6, 5, 3],\n      [8, 20, 2, 0, 8],\n      [2, 9, 9, 1, 11],\n      [6, 5, 3, 18, 5]\n    ]\n  ),\n  [4, 1, 55, 5, 9, 3, 8, 11, 5, 18, 3, 5, 6, 2, 8, 16, 7, 6, 5, 0, 1, 9, 9, 20, 2],\n  'Should work with a 5x5 array'\n);\n\nTest.assertSimilar(\n  spiral(\n    [\n      [1, 5],\n      [9, 2],\n      [7, 3]\n    ]\n  ),\n  [1, 5, 2, 3, 7, 9],\n  'Should work when there are more rows than collumns'\n);\n\nTest.assertSimilar(\n  spiral(\n    [\n      [2, 4, 6, 8],\n      [7, 3, 0, 5]\n    ]\n  ),\n  [2, 4, 6, 8, 5, 0, 3, 7],\n  'Should work when there are more collumns than rows'\n);",
    "new_tests": "const spiral = require('./code');\n\ndescribe('Tests', () => {\n    test('Should work with a 2x2 array', () => {\n        expect(spiral([[7, 2], [5, 0]])).toEqual([7, 2, 0, 5]);\n    });\n\ntest('Should work with a 3x3 array', () => {\n        expect(spiral([[1, 2, 3], [4, 5, 6], [7, 8, 9]])).toEqual([1, 2, 3, 6, 9, 8, 7, 4, 5]);\n    });\n\ntest('Should work with a 3x3 array', () => {\n        expect(spiral([[1, 9, 9], [2, 4, 9], [7, 3, 9]])).toEqual([1, 9, 9, 9, 9, 3, 7, 2, 4]);\n    });\n\ntest('Should work with a 4x4 array', () => {\n        expect(spiral([[6, 4, 3, 9], [2, 5, 7, 1], [8, 6, 2, 3], [4, 5, 9, 1]])).toEqual([6, 4, 3, 9, 1, 3, 1, 9, 5, 4, 8, 2, 5, 7, 2, 6]);\n    });\n\ntest('Should work with a 5x5 array', () => {\n        expect(spiral([[4, 1, 55, 5, 9], [16, 7, 6, 5, 3], [8, 20, 2, 0, 8], [2, 9, 9, 1, 11], [6, 5, 3, 18, 5]])).toEqual([4, 1, 55, 5, 9, 3, 8, 11, 5, 18, 3, 5, 6, 2, 8, 16, 7, 6, 5, 0, 1, 9, 9, 20, 2]);\n    });\n\ntest('Should work when there are more rows than collumns', () => {\n        expect(spiral([[1, 5], [9, 2], [7, 3]])).toEqual([1, 5, 2, 3, 7, 9]);\n    });\n\ntest('Should work when there are more collumns than rows', () => {\n        expect(spiral([[2, 4, 6, 8], [7, 3, 0, 5]])).toEqual([2, 4, 6, 8, 5, 0, 3, 7]);\n    });\n    \n    test('the tests', () => {\n        \n    });\n});\n"
  },
  {
    "original_code": "function getPathLength(world, width, height) {\n  \n}",
    "new_code": "function getPathLength(world, width, height) {\n  // Your code here.\n}\n\nmodule.exports = getPathLength;\n",
    "original_tests": "Test.assertEquals(getPathLength('m,.,.,.,t,.,.,.,h', 3, 3), 3)\nTest.assertEquals(getPathLength('m,.,.,.,.,.,.,.,h', 3, 3), 2)\nTest.assertEquals(getPathLength('m,h', 2, 1), 1)\nTest.assertEquals(getPathLength('.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,m,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,h,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,.,.,.', 10, 10), 9)\nTest.assertEquals(getPathLength('.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,m,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,h,t,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,.,.,.', 10, 10), -1)\nTest.assertEquals(getPathLength('m,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,.,t,h', 10, 10), 14)\nTest.assertEquals(getPathLength('m,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,.,t,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,t,.,.,.,.,.,.,.,t,.,t,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,.,t,h', 10, 10), 15)\nTest.assertEquals(getPathLength('mh', 25, 25), 24)\nTest.assertEquals(getPathLength('m,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,t,t,t,t,t,.,t,.,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,h', 25, 25), 91)\nTest.assertEquals(getPathLength('m,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,t,t,t,t,t,.,t,.,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,h', 25, 25), -1)",
    "new_tests": "const getPathLength = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(getPathLength('m,.,.,.,t,.,.,.,h', 3, 3)).toEqual(3);\n        expect(getPathLength('m,.,.,.,.,.,.,.,h', 3, 3)).toEqual(2);\n        expect(getPathLength('m,h', 2, 1)).toEqual(1);\n        expect(getPathLength('.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,m,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,h,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,.,.,.', 10, 10)).toEqual(9);\n        expect(getPathLength('.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,m,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,h,t,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,.,.,.', 10, 10)).toEqual(-1);\n        expect(getPathLength('m,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,.,t,h', 10, 10)).toEqual(14);\n        expect(getPathLength('m,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,.,t,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,t,.,.,.,.,.,.,.,t,.,t,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,.,t,h', 10, 10)).toEqual(15);\n        expect(getPathLength('m,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,h', 25, 25)).toEqual(24);\n        expect(getPathLength('m,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,t,t,t,t,t,.,t,.,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,h', 25, 25)).toEqual(91);\n        expect(getPathLength('m,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,t,t,t,t,t,.,t,.,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,h', 25, 25)).toEqual(-1);\n    });\n});\n"
  },
  {
    "original_code": "function waterjug(start, goal) {\n  \n}",
    "new_code": "function waterjug(start, goal) {\n  // Your code here.\n}\n\nmodule.exports = waterjug;\n",
    "original_tests": "Test.assertEquals(waterjug([3, 5, 8], [0, 3, 5]), 2);\nTest.assertEquals(waterjug([1, 3, 4],  [0, 2, 2]), 3);\nTest.assertEquals(waterjug([8, 17, 20], [0, 10, 10]), 9);\nTest.assertEquals(waterjug([4, 17, 22], [2, 5, 15]), \"No solution.\");\nTest.assertEquals(waterjug([3, 5, 8],  [0, 5, 3]), 1);\nTest.assertEquals(waterjug([3, 5, 8], [0, 6, 2]), \"No solution.\");\nTest.assertEquals(waterjug([6, 7, 10],  [0, 0, 10]), 0);\nTest.assertEquals(waterjug([3, 5, 8],  [4, 0, 4]), \"No solution.\");\nTest.assertEquals(waterjug([3, 5, 8],  [2, 1, 4]), \"No solution.\");\nTest.assertEquals(waterjug([3, 5, 8],  [0, 2, 6]), 3);\nTest.assertEquals(waterjug([6, 7, 10],  [5, 5, 0]), \"No solution.\");\nTest.assertEquals(waterjug([30, 45, 50],  [25, 25, 0]), \"No solution.\");\nTest.assertEquals(waterjug([3, 5, 8],  [0, 4, 4]), 7);\nTest.assertEquals(waterjug([4, 7, 10],  [0, 5, 5]), 8);",
    "new_tests": "const waterjug = require('./code');\n\ndescribe('Tests', () => {\n    \n    \n    test('the tests', () => {\n        expect(waterjug([3, 5, 8], [0, 3, 5])).toEqual(2);\n        expect(waterjug([1, 3, 4], [0, 2, 2])).toEqual(3);\n        expect(waterjug([8, 17, 20], [0, 10, 10])).toEqual(9);\n        expect(waterjug([4, 17, 22], [2, 5, 15])).toEqual('No solution.');\n        expect(waterjug([3, 5, 8], [0, 5, 3])).toEqual(1);\n        expect(waterjug([3, 5, 8], [0, 6, 2])).toEqual('No solution.');\n        expect(waterjug([6, 7, 10], [0, 0, 10])).toEqual(0);\n        expect(waterjug([3, 5, 8], [4, 0, 4])).toEqual('No solution.');\n        expect(waterjug([3, 5, 8], [2, 1, 4])).toEqual('No solution.');\n        expect(waterjug([3, 5, 8], [0, 2, 6])).toEqual(3);\n        expect(waterjug([6, 7, 10], [5, 5, 0])).toEqual('No solution.');\n        expect(waterjug([30, 45, 50], [25, 25, 0])).toEqual('No solution.');\n        expect(waterjug([3, 5, 8], [0, 4, 4])).toEqual(7);\n        expect(waterjug([4, 7, 10], [0, 5, 5])).toEqual(8);\n    });\n});\n"
  },
  {
    "original_code": "function dartsSolver(sections, darts, target) {\n  \n}",
    "new_code": "function dartsSolver(sections, darts, target) {\n  // Your code here.\n}\n\nmodule.exports = dartsSolver;\n",
    "original_tests": "// Base tests\nTest.assertSimilar(\n  dartsSolver([3, 6, 8, 11, 15, 19, 22], 3, 35),\n  ['8-8-19']\n);\nTest.assertSimilar(\n  dartsSolver([2, 4, 7, 10, 13, 18, 24], 3, 29),\n  ['4-7-18']\n);\nTest.assertSimilar(\n  dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 40),\n  ['11-11-18']\n);\nTest.assertSimilar(\n  dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 8),\n  [],\n  'Should return an empty array if there are no solutions'\n);\n\n// Additional tests\nTest.assertSimilar(\n  dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 32),\n  ['3-11-18', '7-7-18', '7-11-14'],\n  'Should return multiple solutions in the correct order'\n);\nTest.assertSimilar(\n  dartsSolver([3, 7, 11, 14, 18, 20, 25, 29, 34], 3, 67),\n  ['18-20-29'],\n  'Should work with more sections'\n);\nTest.assertSimilar(\n  dartsSolver([3, 7, 11, 14, 18, 20, 25], 4, 23),\n  ['3-3-3-14'],\n  'Should work with 4 darts'\n);\n",
    "new_tests": "const dartsSolver = require('./code');\n\ndescribe('Tests', () => {\n    test('Should return an empty array if there are no solutions', () => {\n        expect(dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 8)).toEqual([]);\n    });\n\ntest('Should return multiple solutions in the correct order', () => {\n        expect(dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 32)).toEqual(['3-11-18', '7-7-18', '7-11-14']);\n    });\n\ntest('Should work with more sections', () => {\n        expect(dartsSolver([3, 7, 11, 14, 18, 20, 25, 29, 34], 3, 67)).toEqual(['18-20-29']);\n    });\n\ntest('Should work with 4 darts', () => {\n        expect(dartsSolver([3, 7, 11, 14, 18, 20, 25], 4, 23)).toEqual(['3-3-3-14']);\n    });\n    \n    test('the tests', () => {\n        expect(dartsSolver([3, 6, 8, 11, 15, 19, 22], 3, 35)).toEqual(['8-8-19']);\n        expect(dartsSolver([2, 4, 7, 10, 13, 18, 24], 3, 29)).toEqual(['4-7-18']);\n        expect(dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 40)).toEqual(['11-11-18']);\n    });\n});\n"
  }
]